public class com.mysql.jdbc.ConnectionImpl extends com.mysql.jdbc.ConnectionPropertiesImpl implements com.mysql.jdbc.Connection
{
    private static final java.lang.String JDBC_LOCAL_CHARACTER_SET_RESULTS;
    private static final java.lang.Object CHARSET_CONVERTER_NOT_AVAILABLE_MARKER;
    public static java.util.Map charsetMap;
    protected static final java.lang.String DEFAULT_LOGGER_CLASS;
    private static final int HISTOGRAM_BUCKETS;
    private static final java.lang.String LOGGER_INSTANCE_NAME;
    private static java.util.Map mapTransIsolationNameToValue;
    private static final com.mysql.jdbc.log.Log NULL_LOGGER;
    private static java.util.Map roundRobinStatsMap;
    private static final java.util.Map serverCollationByUrl;
    private static final java.util.Map serverConfigByUrl;
    private long queryTimeCount;
    private double queryTimeSum;
    private double queryTimeSumSquares;
    private double queryTimeMean;
    private static java.util.Timer cancelTimer;
    private java.util.List connectionLifecycleInterceptors;
    private static final java.lang.reflect.Constructor JDBC_4_CONNECTION_CTOR;
    private boolean autoCommit;
    private java.util.Map cachedPreparedStatementParams;
    private java.lang.String characterSetMetadata;
    private java.lang.String characterSetResultsOnServer;
    private java.util.Map charsetConverterMap;
    private java.util.Map charsetToNumBytesMap;
    private long connectionCreationTimeMillis;
    private long connectionId;
    private java.lang.String database;
    private java.sql.DatabaseMetaData dbmd;
    private java.util.TimeZone defaultTimeZone;
    private com.mysql.jdbc.profiler.ProfilerEventHandler eventSink;
    private boolean executingFailoverReconnect;
    private boolean failedOver;
    private java.lang.Throwable forceClosedReason;
    private java.lang.Throwable forcedClosedLocation;
    private boolean hasIsolationLevels;
    private boolean hasQuotedIdentifiers;
    private java.lang.String host;
    private java.util.List hostList;
    private int hostListSize;
    private java.lang.String[] indexToCharsetMapping;
    private com.mysql.jdbc.MysqlIO io;
    private boolean isClientTzUTC;
    private boolean isClosed;
    private boolean isInGlobalTx;
    private boolean isRunningOnJDK13;
    private int isolationLevel;
    private boolean isServerTzUTC;
    private long lastQueryFinishedTime;
    private com.mysql.jdbc.log.Log log;
    private long longestQueryTimeMs;
    private boolean lowerCaseTableNames;
    private long masterFailTimeMillis;
    private int maxAllowedPacket;
    private long maximumNumberTablesAccessed;
    private boolean maxRowsChanged;
    private long metricsLastReportedMs;
    private long minimumNumberTablesAccessed;
    private final java.lang.Object mutex;
    private java.lang.String myURL;
    private boolean needsPing;
    private int netBufferLength;
    private boolean noBackslashEscapes;
    private long numberOfPreparedExecutes;
    private long numberOfPrepares;
    private long numberOfQueriesIssued;
    private long numberOfResultSetsCreated;
    private long[] numTablesMetricsHistBreakpoints;
    private int[] numTablesMetricsHistCounts;
    private long[] oldHistBreakpoints;
    private int[] oldHistCounts;
    private java.util.Map openStatements;
    private com.mysql.jdbc.util.LRUCache parsedCallableStatementCache;
    private boolean parserKnowsUnicode;
    private java.lang.String password;
    private long[] perfMetricsHistBreakpoints;
    private int[] perfMetricsHistCounts;
    private java.lang.Throwable pointOfOrigin;
    private int port;
    private boolean preferSlaveDuringFailover;
    protected java.util.Properties props;
    private long queriesIssuedFailedOver;
    private boolean readInfoMsg;
    private boolean readOnly;
    protected com.mysql.jdbc.util.LRUCache resultSetMetadataCache;
    private java.util.TimeZone serverTimezoneTZ;
    private java.util.Map serverVariables;
    private long shortestQueryTimeMs;
    private java.util.Map statementsUsingMaxRows;
    private double totalQueryTimeMs;
    private boolean transactionsSupported;
    private java.util.Map typeMap;
    private boolean useAnsiQuotes;
    private java.lang.String user;
    private boolean useServerPreparedStmts;
    private com.mysql.jdbc.util.LRUCache serverSideStatementCheckCache;
    private com.mysql.jdbc.util.LRUCache serverSideStatementCache;
    private java.util.Calendar sessionCalendar;
    private java.util.Calendar utcCalendar;
    private java.lang.String origHostToConnectTo;
    private int origPortToConnectTo;
    private java.lang.String origDatabaseToConnectTo;
    private java.lang.String errorMessageEncoding;
    private boolean usePlatformCharsetConverters;
    private boolean hasTriedMasterFlag;
    private java.lang.String statementComment;
    private boolean usingCachedConfig;
    static java.lang.Class class$java$lang$String;
    static java.lang.Class class$java$util$Timer;
    static java.lang.Class class$java$util$Properties;
    static java.lang.Class class$java$lang$Throwable;
    static java.lang.Class class$java$sql$Blob;

    protected static java.sql.SQLException appendMessageToException(java.sql.SQLException, java.lang.String)
    {
        java.sql.SQLException r0, r5;
        java.lang.String r1, r2, r3, $r11;
        int i0, $i1, $i2, $i3;
        java.lang.StringBuffer r4, $r8;
        null_type n0, n1, n2;
        java.lang.Class r6, r7, $r14, $r15, $r18, $r19;
        int[] $r12;
        java.lang.Object $r13, r23;
        java.lang.Class[] $r16, $r20;
        java.lang.reflect.Method r17, r21;
        java.lang.Object[] $r22, $r24;
        java.lang.NoClassDefFoundError $r26, r27;
        java.lang.NoSuchMethodException $r28, r29;
        java.lang.Throwable $r30, r31;

        r0 := @parameter0: java.sql.SQLException;
        r1 := @parameter1: java.lang.String;
        r2 = virtualinvoke r0.<java.sql.SQLException: java.lang.String getMessage()>();
        r3 = virtualinvoke r0.<java.sql.SQLException: java.lang.String getSQLState()>();
        i0 = virtualinvoke r0.<java.sql.SQLException: int getErrorCode()>();
        $r8 = new java.lang.StringBuffer;
        $i1 = virtualinvoke r2.<java.lang.String: int length()>();
        $i2 = virtualinvoke r1.<java.lang.String: int length()>();
        $i3 = $i1 + $i2;
        specialinvoke $r8.<java.lang.StringBuffer: void <init>(int)>($i3);
        r4 = $r8;
        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);
        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);
        $r11 = virtualinvoke r4.<java.lang.StringBuffer: java.lang.String toString()>();
        r5 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String,java.lang.String,int)>($r11, r3, i0);

     label0:
        n0 = null;
        n1 = null;
        n2 = null;
        r6 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.lang.StackTraceElement");
        $r12 = newarray (int)[1];
        $r12[0] = 0;
        $r13 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>(r6, $r12);
        r7 = virtualinvoke $r13.<java.lang.Object: java.lang.Class getClass()>();
        $r14 = <com.mysql.jdbc.ConnectionImpl: java.lang.Class class$java$lang$Throwable>;
        if $r14 != null goto label1;

        $r15 = staticinvoke <com.mysql.jdbc.ConnectionImpl: java.lang.Class class$(java.lang.String)>("java.lang.Throwable");
        <com.mysql.jdbc.ConnectionImpl: java.lang.Class class$java$lang$Throwable> = $r15;
        goto label2;

     label1:
        $r15 = <com.mysql.jdbc.ConnectionImpl: java.lang.Class class$java$lang$Throwable>;

     label2:
        $r16 = newarray (java.lang.Class)[0];
        r17 = virtualinvoke $r15.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getStackTrace", $r16);
        $r18 = <com.mysql.jdbc.ConnectionImpl: java.lang.Class class$java$lang$Throwable>;
        if $r18 != null goto label3;

        $r19 = staticinvoke <com.mysql.jdbc.ConnectionImpl: java.lang.Class class$(java.lang.String)>("java.lang.Throwable");
        <com.mysql.jdbc.ConnectionImpl: java.lang.Class class$java$lang$Throwable> = $r19;
        goto label4;

     label3:
        $r19 = <com.mysql.jdbc.ConnectionImpl: java.lang.Class class$java$lang$Throwable>;

     label4:
        $r20 = newarray (java.lang.Class)[1];
        $r20[0] = r7;
        r21 = virtualinvoke $r19.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("setStackTrace", $r20);
        if r17 == null goto label5;

        if r21 == null goto label5;

        $r22 = newarray (java.lang.Object)[0];
        r23 = virtualinvoke r17.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r22);
        $r24 = newarray (java.lang.Object)[1];
        $r24[0] = r23;
        virtualinvoke r21.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r5, $r24);

     label5:
        goto label9;

     label6:
        $r26 := @caughtexception;
        r27 = $r26;
        goto label9;

     label7:
        $r28 := @caughtexception;
        r29 = $r28;
        goto label9;

     label8:
        $r30 := @caughtexception;
        r31 = $r30;

     label9:
        return r5;

        catch java.lang.NoClassDefFoundError from label0 to label5 with label6;
        catch java.lang.NoSuchMethodException from label0 to label5 with label7;
        catch java.lang.Throwable from label0 to label5 with label8;
    }

    protected static java.util.Timer getCancelTimer()
    {
        java.util.Timer $r0;

        $r0 = <com.mysql.jdbc.ConnectionImpl: java.util.Timer cancelTimer>;
        return $r0;
    }

    protected static com.mysql.jdbc.Connection getInstance(java.lang.String, int, java.util.Properties, java.lang.String, java.lang.String) throws java.sql.SQLException
    {
        java.lang.String r0, r2, r3;
        int i0;
        java.util.Properties r1;
        boolean $z0;
        com.mysql.jdbc.ConnectionImpl $r4;
        java.lang.reflect.Constructor $r5;
        java.lang.Object[] $r6;
        java.lang.Integer $r7;
        java.lang.Object $r8;
        com.mysql.jdbc.Connection $r9;

        r0 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        r1 := @parameter2: java.util.Properties;
        r2 := @parameter3: java.lang.String;
        r3 := @parameter4: java.lang.String;
        $z0 = staticinvoke <com.mysql.jdbc.Util: boolean isJdbc4()>();
        if $z0 != 0 goto label0;

        $r4 = new com.mysql.jdbc.ConnectionImpl;
        specialinvoke $r4.<com.mysql.jdbc.ConnectionImpl: void <init>(java.lang.String,int,java.util.Properties,java.lang.String,java.lang.String)>(r0, i0, r1, r2, r3);
        return $r4;

     label0:
        $r5 = <com.mysql.jdbc.ConnectionImpl: java.lang.reflect.Constructor JDBC_4_CONNECTION_CTOR>;
        $r6 = newarray (java.lang.Object)[5];
        $r6[0] = r0;
        $r7 = staticinvoke <com.mysql.jdbc.Constants: java.lang.Integer integerValueOf(int)>(i0);
        $r6[1] = $r7;
        $r6[2] = r1;
        $r6[3] = r2;
        $r6[4] = r3;
        $r8 = staticinvoke <com.mysql.jdbc.Util: java.lang.Object handleNewInstance(java.lang.reflect.Constructor,java.lang.Object[])>($r5, $r6);
        $r9 = (com.mysql.jdbc.Connection) $r8;
        return $r9;
    }

    private static synchronized int getNextRoundRobinHostIndex(java.lang.String, java.util.List)
    {
        java.lang.String r0;
        java.util.List r1;
        int i0, i1, $i2;
        double $d0, $d1, $d2;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.util.List;
        $i2 = interfaceinvoke r1.<java.util.List: int size()>();
        i0 = $i2 - 1;
        $d0 = staticinvoke <java.lang.Math: double random()>();
        $d1 = (double) i0;
        $d2 = $d0 * $d1;
        i1 = (int) $d2;
        return i1;
    }

    private static boolean nullSafeCompare(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String;
        if r0 != null goto label0;

        if r1 != null goto label0;

        return 1;

     label0:
        if r0 != null goto label1;

        if r1 == null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>(r1);
        return $z0;
    }

    protected void <init>()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        int $i0;
        java.util.HashMap $r1;
        java.lang.String[] $r2;
        com.mysql.jdbc.log.Log $r3;
        java.lang.Object $r4;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        specialinvoke r0.<com.mysql.jdbc.ConnectionPropertiesImpl: void <init>()>();
        r0.<com.mysql.jdbc.ConnectionImpl: boolean autoCommit> = 1;
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String characterSetMetadata> = null;
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String characterSetResultsOnServer> = null;
        $r1 = new java.util.HashMap;
        $i0 = staticinvoke <com.mysql.jdbc.CharsetMapping: int getNumberOfCharsetsConfigured()>();
        specialinvoke $r1.<java.util.HashMap: void <init>(int)>($i0);
        r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map charsetConverterMap> = $r1;
        r0.<com.mysql.jdbc.ConnectionImpl: long connectionCreationTimeMillis> = 0L;
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String database> = null;
        r0.<com.mysql.jdbc.ConnectionImpl: java.sql.DatabaseMetaData dbmd> = null;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean executingFailoverReconnect> = 0;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean failedOver> = 0;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean hasIsolationLevels> = 0;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean hasQuotedIdentifiers> = 0;
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String host> = null;
        r0.<com.mysql.jdbc.ConnectionImpl: java.util.List hostList> = null;
        r0.<com.mysql.jdbc.ConnectionImpl: int hostListSize> = 0;
        $r2 = <com.mysql.jdbc.CharsetMapping: java.lang.String[] INDEX_TO_CHARSET>;
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String[] indexToCharsetMapping> = $r2;
        r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io> = null;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean isClientTzUTC> = 0;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean isClosed> = 1;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean isInGlobalTx> = 0;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean isRunningOnJDK13> = 0;
        r0.<com.mysql.jdbc.ConnectionImpl: int isolationLevel> = 2;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean isServerTzUTC> = 0;
        r0.<com.mysql.jdbc.ConnectionImpl: long lastQueryFinishedTime> = 0L;
        $r3 = <com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.log.Log NULL_LOGGER>;
        r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.log.Log log> = $r3;
        r0.<com.mysql.jdbc.ConnectionImpl: long longestQueryTimeMs> = 0L;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean lowerCaseTableNames> = 0;
        r0.<com.mysql.jdbc.ConnectionImpl: long masterFailTimeMillis> = 0L;
        r0.<com.mysql.jdbc.ConnectionImpl: int maxAllowedPacket> = 65536;
        r0.<com.mysql.jdbc.ConnectionImpl: long maximumNumberTablesAccessed> = 0L;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean maxRowsChanged> = 0;
        r0.<com.mysql.jdbc.ConnectionImpl: long minimumNumberTablesAccessed> = 9223372036854775807L;
        $r4 = new java.lang.Object;
        specialinvoke $r4.<java.lang.Object: void <init>()>();
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.Object mutex> = $r4;
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String myURL> = null;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean needsPing> = 0;
        r0.<com.mysql.jdbc.ConnectionImpl: int netBufferLength> = 16384;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean noBackslashEscapes> = 0;
        r0.<com.mysql.jdbc.ConnectionImpl: long numberOfPreparedExecutes> = 0L;
        r0.<com.mysql.jdbc.ConnectionImpl: long numberOfPrepares> = 0L;
        r0.<com.mysql.jdbc.ConnectionImpl: long numberOfQueriesIssued> = 0L;
        r0.<com.mysql.jdbc.ConnectionImpl: long numberOfResultSetsCreated> = 0L;
        r0.<com.mysql.jdbc.ConnectionImpl: long[] oldHistBreakpoints> = null;
        r0.<com.mysql.jdbc.ConnectionImpl: int[] oldHistCounts> = null;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean parserKnowsUnicode> = 0;
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String password> = null;
        r0.<com.mysql.jdbc.ConnectionImpl: int port> = 3306;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean preferSlaveDuringFailover> = 0;
        r0.<com.mysql.jdbc.ConnectionImpl: java.util.Properties props> = null;
        r0.<com.mysql.jdbc.ConnectionImpl: long queriesIssuedFailedOver> = 0L;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean readInfoMsg> = 0;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean readOnly> = 0;
        r0.<com.mysql.jdbc.ConnectionImpl: java.util.TimeZone serverTimezoneTZ> = null;
        r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map serverVariables> = null;
        r0.<com.mysql.jdbc.ConnectionImpl: long shortestQueryTimeMs> = 9223372036854775807L;
        r0.<com.mysql.jdbc.ConnectionImpl: double totalQueryTimeMs> = 0.0;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean transactionsSupported> = 0;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean useAnsiQuotes> = 0;
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String user> = null;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean useServerPreparedStmts> = 0;
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String errorMessageEncoding> = "Cp1252";
        r0.<com.mysql.jdbc.ConnectionImpl: boolean hasTriedMasterFlag> = 0;
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String statementComment> = null;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean usingCachedConfig> = 0;
        return;
    }

    protected void <init>(java.lang.String, int, java.util.Properties, java.lang.String, java.lang.String) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1, r3, r4, $r24, $r27, $r29, $r34, $r38, $r39, $r41, $r43, $r44, $r45, $r46, $r47, $r55, $r67;
        int i0, $i1, $i3, $i4, $i5;
        java.util.Properties r2;
        java.lang.Class $r5, $r15, $r16;
        java.lang.NoSuchMethodException r6, $r19;
        java.lang.StringBuffer r7, $r53;
        java.sql.SQLException r8, $r49, r50;
        java.util.HashMap $r9, $r13, $r30, $r31;
        java.lang.String[] $r10;
        com.mysql.jdbc.log.Log $r11, $r25;
        java.lang.Object $r12;
        long $l2;
        java.lang.Throwable $r14;
        java.lang.Class[] $r17;
        java.util.GregorianCalendar $r20, $r21;
        java.util.Calendar $r22;
        java.util.TimeZone $r23, $r26, $r28;
        boolean $z0, $z2, $z5, $z6;
        java.util.ArrayList $r32;
        java.util.List $r33, $r37, $r40, $r42;
        java.util.StringTokenizer $r35, r36;
        java.sql.DatabaseMetaData $r48;
        java.lang.Exception $r51, r52;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        r2 := @parameter2: java.util.Properties;
        r3 := @parameter3: java.lang.String;
        r4 := @parameter4: java.lang.String;
        specialinvoke r0.<com.mysql.jdbc.ConnectionPropertiesImpl: void <init>()>();
        r0.<com.mysql.jdbc.ConnectionImpl: boolean autoCommit> = 1;
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String characterSetMetadata> = null;
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String characterSetResultsOnServer> = null;
        $r9 = new java.util.HashMap;
        $i1 = staticinvoke <com.mysql.jdbc.CharsetMapping: int getNumberOfCharsetsConfigured()>();
        specialinvoke $r9.<java.util.HashMap: void <init>(int)>($i1);
        r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map charsetConverterMap> = $r9;
        r0.<com.mysql.jdbc.ConnectionImpl: long connectionCreationTimeMillis> = 0L;
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String database> = null;
        r0.<com.mysql.jdbc.ConnectionImpl: java.sql.DatabaseMetaData dbmd> = null;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean executingFailoverReconnect> = 0;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean failedOver> = 0;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean hasIsolationLevels> = 0;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean hasQuotedIdentifiers> = 0;
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String host> = null;
        r0.<com.mysql.jdbc.ConnectionImpl: java.util.List hostList> = null;
        r0.<com.mysql.jdbc.ConnectionImpl: int hostListSize> = 0;
        $r10 = <com.mysql.jdbc.CharsetMapping: java.lang.String[] INDEX_TO_CHARSET>;
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String[] indexToCharsetMapping> = $r10;
        r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io> = null;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean isClientTzUTC> = 0;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean isClosed> = 1;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean isInGlobalTx> = 0;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean isRunningOnJDK13> = 0;
        r0.<com.mysql.jdbc.ConnectionImpl: int isolationLevel> = 2;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean isServerTzUTC> = 0;
        r0.<com.mysql.jdbc.ConnectionImpl: long lastQueryFinishedTime> = 0L;
        $r11 = <com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.log.Log NULL_LOGGER>;
        r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.log.Log log> = $r11;
        r0.<com.mysql.jdbc.ConnectionImpl: long longestQueryTimeMs> = 0L;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean lowerCaseTableNames> = 0;
        r0.<com.mysql.jdbc.ConnectionImpl: long masterFailTimeMillis> = 0L;
        r0.<com.mysql.jdbc.ConnectionImpl: int maxAllowedPacket> = 65536;
        r0.<com.mysql.jdbc.ConnectionImpl: long maximumNumberTablesAccessed> = 0L;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean maxRowsChanged> = 0;
        r0.<com.mysql.jdbc.ConnectionImpl: long minimumNumberTablesAccessed> = 9223372036854775807L;
        $r12 = new java.lang.Object;
        specialinvoke $r12.<java.lang.Object: void <init>()>();
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.Object mutex> = $r12;
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String myURL> = null;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean needsPing> = 0;
        r0.<com.mysql.jdbc.ConnectionImpl: int netBufferLength> = 16384;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean noBackslashEscapes> = 0;
        r0.<com.mysql.jdbc.ConnectionImpl: long numberOfPreparedExecutes> = 0L;
        r0.<com.mysql.jdbc.ConnectionImpl: long numberOfPrepares> = 0L;
        r0.<com.mysql.jdbc.ConnectionImpl: long numberOfQueriesIssued> = 0L;
        r0.<com.mysql.jdbc.ConnectionImpl: long numberOfResultSetsCreated> = 0L;
        r0.<com.mysql.jdbc.ConnectionImpl: long[] oldHistBreakpoints> = null;
        r0.<com.mysql.jdbc.ConnectionImpl: int[] oldHistCounts> = null;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean parserKnowsUnicode> = 0;
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String password> = null;
        r0.<com.mysql.jdbc.ConnectionImpl: int port> = 3306;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean preferSlaveDuringFailover> = 0;
        r0.<com.mysql.jdbc.ConnectionImpl: java.util.Properties props> = null;
        r0.<com.mysql.jdbc.ConnectionImpl: long queriesIssuedFailedOver> = 0L;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean readInfoMsg> = 0;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean readOnly> = 0;
        r0.<com.mysql.jdbc.ConnectionImpl: java.util.TimeZone serverTimezoneTZ> = null;
        r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map serverVariables> = null;
        r0.<com.mysql.jdbc.ConnectionImpl: long shortestQueryTimeMs> = 9223372036854775807L;
        r0.<com.mysql.jdbc.ConnectionImpl: double totalQueryTimeMs> = 0.0;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean transactionsSupported> = 0;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean useAnsiQuotes> = 0;
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String user> = null;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean useServerPreparedStmts> = 0;
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String errorMessageEncoding> = "Cp1252";
        r0.<com.mysql.jdbc.ConnectionImpl: boolean hasTriedMasterFlag> = 0;
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String statementComment> = null;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean usingCachedConfig> = 0;
        $r13 = new java.util.HashMap;
        specialinvoke $r13.<java.util.HashMap: void <init>()>();
        r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map charsetToNumBytesMap> = $r13;
        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        r0.<com.mysql.jdbc.ConnectionImpl: long connectionCreationTimeMillis> = $l2;
        $r14 = new java.lang.Throwable;
        specialinvoke $r14.<java.lang.Throwable: void <init>()>();
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.Throwable pointOfOrigin> = $r14;
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String origHostToConnectTo> = r1;
        r0.<com.mysql.jdbc.ConnectionImpl: int origPortToConnectTo> = i0;
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String origDatabaseToConnectTo> = r3;

     label0:
        $r15 = <com.mysql.jdbc.ConnectionImpl: java.lang.Class class$java$sql$Blob>;
        if $r15 != null goto label1;

        $r16 = staticinvoke <com.mysql.jdbc.ConnectionImpl: java.lang.Class class$(java.lang.String)>("java.sql.Blob");
        <com.mysql.jdbc.ConnectionImpl: java.lang.Class class$java$sql$Blob> = $r16;
        goto label2;

     label1:
        $r16 = <com.mysql.jdbc.ConnectionImpl: java.lang.Class class$java$sql$Blob>;

     label2:
        $r17 = newarray (java.lang.Class)[1];
        $r5 = <java.lang.Long: java.lang.Class TYPE>;
        $r17[0] = $r5;
        virtualinvoke $r16.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("truncate", $r17);
        r0.<com.mysql.jdbc.ConnectionImpl: boolean isRunningOnJDK13> = 0;

     label3:
        goto label5;

     label4:
        $r19 := @caughtexception;
        r6 = $r19;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean isRunningOnJDK13> = 1;

     label5:
        $r20 = new java.util.GregorianCalendar;
        specialinvoke $r20.<java.util.GregorianCalendar: void <init>()>();
        r0.<com.mysql.jdbc.ConnectionImpl: java.util.Calendar sessionCalendar> = $r20;
        $r21 = new java.util.GregorianCalendar;
        specialinvoke $r21.<java.util.GregorianCalendar: void <init>()>();
        r0.<com.mysql.jdbc.ConnectionImpl: java.util.Calendar utcCalendar> = $r21;
        $r22 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Calendar utcCalendar>;
        $r23 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");
        virtualinvoke $r22.<java.util.Calendar: void setTimeZone(java.util.TimeZone)>($r23);
        $r24 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getLogger()>();
        $r25 = staticinvoke <com.mysql.jdbc.log.LogFactory: com.mysql.jdbc.log.Log getLogger(java.lang.String,java.lang.String)>($r24, "MySQL");
        r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.log.Log log> = $r25;
        $r26 = staticinvoke <com.mysql.jdbc.Util: java.util.TimeZone getDefaultTimeZone()>();
        r0.<com.mysql.jdbc.ConnectionImpl: java.util.TimeZone defaultTimeZone> = $r26;
        $r27 = "GMT";
        $r28 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.TimeZone defaultTimeZone>;
        $r29 = virtualinvoke $r28.<java.util.TimeZone: java.lang.String getID()>();
        $z0 = virtualinvoke $r27.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r29);
        if $z0 == 0 goto label6;

        r0.<com.mysql.jdbc.ConnectionImpl: boolean isClientTzUTC> = 1;
        goto label7;

     label6:
        r0.<com.mysql.jdbc.ConnectionImpl: boolean isClientTzUTC> = 0;

     label7:
        $r30 = new java.util.HashMap;
        specialinvoke $r30.<java.util.HashMap: void <init>()>();
        r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map openStatements> = $r30;
        $r31 = new java.util.HashMap;
        specialinvoke $r31.<java.util.HashMap: void <init>()>();
        r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map serverVariables> = $r31;
        $r32 = new java.util.ArrayList;
        specialinvoke $r32.<java.util.ArrayList: void <init>()>();
        r0.<com.mysql.jdbc.ConnectionImpl: java.util.List hostList> = $r32;
        if r1 != null goto label8;

        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String host> = "localhost";
        $r33 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.List hostList>;
        $r34 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String host>;
        interfaceinvoke $r33.<java.util.List: boolean add(java.lang.Object)>($r34);
        goto label12;

     label8:
        $i3 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(44);
        if $i3 == -1 goto label11;

        $r35 = new java.util.StringTokenizer;
        specialinvoke $r35.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>(r1, ",", 0);
        r36 = $r35;

     label9:
        $z2 = virtualinvoke r36.<java.util.StringTokenizer: boolean hasMoreTokens()>();
        if $z2 == 0 goto label10;

        $r37 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.List hostList>;
        $r38 = virtualinvoke r36.<java.util.StringTokenizer: java.lang.String nextToken()>();
        $r39 = virtualinvoke $r38.<java.lang.String: java.lang.String trim()>();
        interfaceinvoke $r37.<java.util.List: boolean add(java.lang.Object)>($r39);
        goto label9;

     label10:
        goto label12;

     label11:
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String host> = r1;
        $r40 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.List hostList>;
        $r41 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String host>;
        interfaceinvoke $r40.<java.util.List: boolean add(java.lang.Object)>($r41);

     label12:
        $r42 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.List hostList>;
        $i4 = interfaceinvoke $r42.<java.util.List: int size()>();
        r0.<com.mysql.jdbc.ConnectionImpl: int hostListSize> = $i4;
        r0.<com.mysql.jdbc.ConnectionImpl: int port> = i0;
        if r3 != null goto label13;

        r3 = "";

     label13:
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String database> = r3;
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String myURL> = r4;
        $r43 = virtualinvoke r2.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("user");
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String user> = $r43;
        $r44 = virtualinvoke r2.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("password");
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String password> = $r44;
        $r45 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String user>;
        if $r45 == null goto label14;

        $r46 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String user>;
        $z5 = virtualinvoke $r46.<java.lang.String: boolean equals(java.lang.Object)>("");
        if $z5 == 0 goto label15;

     label14:
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String user> = "";

     label15:
        $r47 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String password>;
        if $r47 != null goto label16;

        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String password> = "";

     label16:
        r0.<com.mysql.jdbc.ConnectionImpl: java.util.Properties props> = r2;
        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void initializeDriverProperties(java.util.Properties)>(r2);

     label17:
        $r48 = specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.sql.DatabaseMetaData getMetaData(boolean,boolean)>(0, 0);
        r0.<com.mysql.jdbc.ConnectionImpl: java.sql.DatabaseMetaData dbmd> = $r48;
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void createNewIO(boolean)>(0);

     label18:
        goto label23;

     label19:
        $r49 := @caughtexception;
        r50 = $r49;
        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void cleanup(java.lang.Throwable)>(r50);
        throw r50;

     label20:
        $r51 := @caughtexception;
        r52 = $r51;
        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void cleanup(java.lang.Throwable)>(r52);
        $r53 = new java.lang.StringBuffer;
        specialinvoke $r53.<java.lang.StringBuffer: void <init>(int)>(128);
        r7 = $r53;
        $z6 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getParanoid()>();
        if $z6 == 0 goto label21;

        virtualinvoke r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot connect to MySQL server on ");
        $r55 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String host>;
        virtualinvoke r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r55);
        virtualinvoke r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");
        $i5 = r0.<com.mysql.jdbc.ConnectionImpl: int port>;
        virtualinvoke r7.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i5);
        virtualinvoke r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".\n\n");
        virtualinvoke r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Make sure that there is a MySQL server ");
        virtualinvoke r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("running on the machine/port you are trying ");
        virtualinvoke r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("to connect to and that the machine this software is running on ");
        virtualinvoke r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("is able to connect to this host/port (i.e. not firewalled). ");
        virtualinvoke r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Also make sure that the server has not been started with the --skip-networking ");
        virtualinvoke r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("flag.\n\n");
        goto label22;

     label21:
        virtualinvoke r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unable to connect to database.");

     label22:
        $r67 = virtualinvoke r7.<java.lang.StringBuffer: java.lang.String toString()>();
        r8 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String,java.lang.String)>($r67, "08S01");
        virtualinvoke r8.<java.sql.SQLException: java.lang.Throwable initCause(java.lang.Throwable)>(r52);
        throw r8;

     label23:
        return;

        catch java.lang.NoSuchMethodException from label0 to label3 with label4;
        catch java.sql.SQLException from label17 to label18 with label19;
        catch java.lang.Exception from label17 to label18 with label20;
    }

    private void addToHistogram(int[], long[], long, int, long, long)
    {
        com.mysql.jdbc.ConnectionImpl r0;
        int[] r1;
        long[] r2;
        long l0, l2, l3, $l5;
        int i1, i4, $i8, $i9;
        byte $b6;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: int[];
        r2 := @parameter1: long[];
        l0 := @parameter2: long;
        i1 := @parameter3: int;
        l2 := @parameter4: long;
        l3 := @parameter5: long;
        if r1 != null goto label0;

        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void createInitialHistogram(long[],long,long)>(r2, l2, l3);
        goto label3;

     label0:
        i4 = 0;

     label1:
        if i4 >= 20 goto label3;

        $l5 = r2[i4];
        $b6 = $l5 cmp l0;
        if $b6 < 0 goto label2;

        $i8 = r1[i4];
        $i9 = $i8 + i1;
        r1[i4] = $i9;
        goto label3;

     label2:
        i4 = i4 + 1;
        goto label1;

     label3:
        return;
    }

    private void addToPerformanceHistogram(long, int)
    {
        com.mysql.jdbc.ConnectionImpl r0;
        long l0, $l4, $l6, $l7;
        int i1;
        int[] $r2;
        long[] $r3;
        byte $b5;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        l0 := @parameter0: long;
        i1 := @parameter1: int;
        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void checkAndCreatePerformanceHistogram()>();
        $r2 = r0.<com.mysql.jdbc.ConnectionImpl: int[] perfMetricsHistCounts>;
        $r3 = r0.<com.mysql.jdbc.ConnectionImpl: long[] perfMetricsHistBreakpoints>;
        $l4 = r0.<com.mysql.jdbc.ConnectionImpl: long shortestQueryTimeMs>;
        $b5 = $l4 cmp 9223372036854775807L;
        if $b5 != 0 goto label0;

        $l6 = 0L;
        goto label1;

     label0:
        $l6 = r0.<com.mysql.jdbc.ConnectionImpl: long shortestQueryTimeMs>;

     label1:
        $l7 = r0.<com.mysql.jdbc.ConnectionImpl: long longestQueryTimeMs>;
        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void addToHistogram(int[],long[],long,int,long,long)>($r2, $r3, l0, i1, $l6, $l7);
        return;
    }

    private void addToTablesAccessedHistogram(long, int)
    {
        com.mysql.jdbc.ConnectionImpl r0;
        long l0, $l4, $l6, $l7;
        int i1;
        int[] $r2;
        long[] $r3;
        byte $b5;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        l0 := @parameter0: long;
        i1 := @parameter1: int;
        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void checkAndCreateTablesAccessedHistogram()>();
        $r2 = r0.<com.mysql.jdbc.ConnectionImpl: int[] numTablesMetricsHistCounts>;
        $r3 = r0.<com.mysql.jdbc.ConnectionImpl: long[] numTablesMetricsHistBreakpoints>;
        $l4 = r0.<com.mysql.jdbc.ConnectionImpl: long minimumNumberTablesAccessed>;
        $b5 = $l4 cmp 9223372036854775807L;
        if $b5 != 0 goto label0;

        $l6 = 0L;
        goto label1;

     label0:
        $l6 = r0.<com.mysql.jdbc.ConnectionImpl: long minimumNumberTablesAccessed>;

     label1:
        $l7 = r0.<com.mysql.jdbc.ConnectionImpl: long maximumNumberTablesAccessed>;
        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void addToHistogram(int[],long[],long,int,long,long)>($r2, $r3, l0, i1, $l6, $l7);
        return;
    }

    private void buildCollationMapping() throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.util.TreeMap r1, $r17;
        java.util.Map r2, $r10, $r11, $r19, r20, $r21;
        java.lang.Throwable r3, r6, r8, r9, $r14, $r24, $r45, $r49, $r50, r51, $r52, r53, $r54, r55;
        java.lang.String r4, r7, $r12, $r22, $r33, $r42;
        java.lang.Integer r5, $r26, $r41;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r13, $r25, $r36, $r38, $r40;
        java.sql.Statement r15;
        java.sql.ResultSet r16;
        int $i0, i1, $i2, $i3, i4, $i5, $i6;
        java.lang.String[] $r27, $r28, $r29, $r30, $r31, $r32, $r39, $r48;
        java.util.Set $r34;
        java.util.Iterator r35;
        java.util.Map$Entry r37;
        java.sql.SQLException $r43, r44, $r46, $r47;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $z0 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean versionMeetsMinimum(int,int,int)>(4, 1, 0);
        if $z0 == 0 goto label26;

        r1 = null;
        $z1 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getCacheServerConfiguration()>();
        if $z1 == 0 goto label5;

        $r10 = <com.mysql.jdbc.ConnectionImpl: java.util.Map serverConfigByUrl>;
        r2 = $r10;
        entermonitor $r10;

     label0:
        $r11 = <com.mysql.jdbc.ConnectionImpl: java.util.Map serverCollationByUrl>;
        $r12 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getURL()>();
        $r13 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>($r12);
        r1 = (java.util.TreeMap) $r13;
        exitmonitor r2;

     label1:
        goto label5;

     label2:
        $r14 := @caughtexception;

     label3:
        r3 = $r14;
        exitmonitor r2;

     label4:
        throw r3;

     label5:
        r15 = null;
        r16 = null;

     label6:
        if r1 != null goto label14;

        $r17 = new java.util.TreeMap;
        specialinvoke $r17.<java.util.TreeMap: void <init>()>();
        r1 = $r17;
        r15 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.sql.Statement getMetadataSafeStatement()>();
        r16 = interfaceinvoke r15.<java.sql.Statement: java.sql.ResultSet executeQuery(java.lang.String)>("SHOW COLLATION");

     label7:
        $z2 = interfaceinvoke r16.<java.sql.ResultSet: boolean next()>();
        if $z2 == 0 goto label8;

        r4 = interfaceinvoke r16.<java.sql.ResultSet: java.lang.String getString(int)>(2);
        $i0 = interfaceinvoke r16.<java.sql.ResultSet: int getInt(int)>(3);
        r5 = staticinvoke <com.mysql.jdbc.Constants: java.lang.Integer integerValueOf(int)>($i0);
        virtualinvoke r1.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r4);
        goto label7;

     label8:
        $z3 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getCacheServerConfiguration()>();
        if $z3 == 0 goto label14;

        $r19 = <com.mysql.jdbc.ConnectionImpl: java.util.Map serverConfigByUrl>;
        r20 = $r19;
        entermonitor $r19;

     label9:
        $r21 = <com.mysql.jdbc.ConnectionImpl: java.util.Map serverCollationByUrl>;
        $r22 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getURL()>();
        interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r22, r1);
        exitmonitor r20;

     label10:
        goto label14;

     label11:
        $r24 := @caughtexception;

     label12:
        r6 = $r24;
        exitmonitor r20;

     label13:
        throw r6;

     label14:
        $r25 = virtualinvoke r1.<java.util.TreeMap: java.lang.Object lastKey()>();
        $r26 = (java.lang.Integer) $r25;
        i1 = virtualinvoke $r26.<java.lang.Integer: int intValue()>();
        $r27 = <com.mysql.jdbc.CharsetMapping: java.lang.String[] INDEX_TO_CHARSET>;
        $i2 = lengthof $r27;
        if $i2 <= i1 goto label15;

        $r28 = <com.mysql.jdbc.CharsetMapping: java.lang.String[] INDEX_TO_CHARSET>;
        i1 = lengthof $r28;

     label15:
        $i3 = i1 + 1;
        $r29 = newarray (java.lang.String)[$i3];
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String[] indexToCharsetMapping> = $r29;
        i4 = 0;

     label16:
        $r30 = <com.mysql.jdbc.CharsetMapping: java.lang.String[] INDEX_TO_CHARSET>;
        $i5 = lengthof $r30;
        if i4 >= $i5 goto label17;

        $r31 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String[] indexToCharsetMapping>;
        $r32 = <com.mysql.jdbc.CharsetMapping: java.lang.String[] INDEX_TO_CHARSET>;
        $r33 = $r32[i4];
        $r31[i4] = $r33;
        i4 = i4 + 1;
        goto label16;

     label17:
        $r34 = virtualinvoke r1.<java.util.TreeMap: java.util.Set entrySet()>();
        r35 = interfaceinvoke $r34.<java.util.Set: java.util.Iterator iterator()>();

     label18:
        $z4 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>();
        if $z4 == 0 goto label19;

        $r36 = interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>();
        r37 = (java.util.Map$Entry) $r36;
        $r38 = interfaceinvoke r37.<java.util.Map$Entry: java.lang.Object getValue()>();
        r7 = (java.lang.String) $r38;
        $r39 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String[] indexToCharsetMapping>;
        $r40 = interfaceinvoke r37.<java.util.Map$Entry: java.lang.Object getKey()>();
        $r41 = (java.lang.Integer) $r40;
        $i6 = virtualinvoke $r41.<java.lang.Integer: int intValue()>();
        $r42 = staticinvoke <com.mysql.jdbc.CharsetMapping: java.lang.String getJavaEncodingForMysqlEncoding(java.lang.String,com.mysql.jdbc.Connection)>(r7, r0);
        $r39[$i6] = $r42;
        goto label18;

     label19:
        goto label28;

     label20:
        goto label25;

     label21:
        $r43 := @caughtexception;

     label22:
        r44 = $r43;
        throw r44;

     label23:
        $r45 := @caughtexception;
        r8 = $r45;
        goto label37;

     label24:
        throw r8;

     label25:
        goto label27;

     label26:
        $r48 = <com.mysql.jdbc.CharsetMapping: java.lang.String[] INDEX_TO_CHARSET>;
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String[] indexToCharsetMapping> = $r48;

     label27:
        return;

     label28:
        if r16 == null goto label32;

     label29:
        interfaceinvoke r16.<java.sql.ResultSet: void close()>();

     label30:
        goto label32;

     label31:
        $r49 := @caughtexception;
        r9 = $r49;

     label32:
        if r15 == null goto label36;

     label33:
        interfaceinvoke r15.<java.sql.Statement: void close()>();

     label34:
        goto label36;

     label35:
        $r50 := @caughtexception;
        r51 = $r50;

     label36:
        goto label20;

     label37:
        if r16 == null goto label41;

     label38:
        interfaceinvoke r16.<java.sql.ResultSet: void close()>();

     label39:
        goto label41;

     label40:
        $r52 := @caughtexception;
        r53 = $r52;

     label41:
        if r15 == null goto label45;

     label42:
        interfaceinvoke r15.<java.sql.Statement: void close()>();

     label43:
        goto label45;

     label44:
        $r54 := @caughtexception;
        r55 = $r54;

     label45:
        goto label24;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
        catch java.lang.Throwable from label9 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.sql.SQLException from label6 to label19 with label21;
        catch java.lang.Throwable from label6 to label20 with label23;
        catch java.lang.Throwable from label22 to label24 with label23;
        catch java.lang.Throwable from label29 to label30 with label31;
        catch java.lang.Throwable from label33 to label34 with label35;
        catch java.lang.Throwable from label38 to label39 with label40;
        catch java.lang.Throwable from label42 to label43 with label44;
    }

    private boolean canHandleAsServerPreparedStatement(java.lang.String) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1;
        com.mysql.jdbc.util.LRUCache r2, $r5, $r6, $r8;
        java.lang.Boolean r3, $r10;
        boolean z0, $z1, $z2, $z3, $z5;
        java.lang.Throwable r4, $r12;
        int $i0, $i1, $i2;
        java.lang.Object $r7;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.lang.String;
        if r1 == null goto label0;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i0 != 0 goto label1;

     label0:
        return 1;

     label1:
        $z1 = r0.<com.mysql.jdbc.ConnectionImpl: boolean useServerPreparedStmts>;
        if $z1 != 0 goto label2;

        return 0;

     label2:
        $z2 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getCachePreparedStatements()>();
        if $z2 == 0 goto label13;

        $r5 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.util.LRUCache serverSideStatementCheckCache>;
        r2 = $r5;
        entermonitor $r5;

     label3:
        $r6 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.util.LRUCache serverSideStatementCheckCache>;
        $r7 = virtualinvoke $r6.<com.mysql.jdbc.util.LRUCache: java.lang.Object get(java.lang.Object)>(r1);
        r3 = (java.lang.Boolean) $r7;
        if r3 == null goto label5;

        $z3 = virtualinvoke r3.<java.lang.Boolean: boolean booleanValue()>();
        exitmonitor r2;

     label4:
        return $z3;

     label5:
        z0 = specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean canHandleAsServerPreparedStatementNoCache(java.lang.String)>(r1);
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();
        $i2 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: int getPreparedStatementCacheSqlLimit()>();
        if $i1 >= $i2 goto label8;

        $r8 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.util.LRUCache serverSideStatementCheckCache>;
        if z0 == 0 goto label6;

        $r10 = <java.lang.Boolean: java.lang.Boolean TRUE>;
        goto label7;

     label6:
        $r10 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label7:
        virtualinvoke $r8.<com.mysql.jdbc.util.LRUCache: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r10);

     label8:
        exitmonitor r2;

     label9:
        return z0;

     label10:
        $r12 := @caughtexception;

     label11:
        r4 = $r12;
        exitmonitor r2;

     label12:
        throw r4;

     label13:
        $z5 = specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean canHandleAsServerPreparedStatementNoCache(java.lang.String)>(r1);
        return $z5;

        catch java.lang.Throwable from label3 to label4 with label10;
        catch java.lang.Throwable from label5 to label9 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private boolean canHandleAsServerPreparedStatementNoCache(java.lang.String) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        int i0, i1, i2, i4;
        char c3, c5, $c6;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.lang.String;
        $z3 = staticinvoke <com.mysql.jdbc.StringUtils: boolean startsWithIgnoreCaseAndNonAlphaNumeric(java.lang.String,java.lang.String)>(r1, "CALL");
        if $z3 == 0 goto label0;

        return 0;

     label0:
        z0 = 1;
        $z4 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean versionMeetsMinimum(int,int,int)>(5, 0, 7);
        if $z4 != 0 goto label15;

        $z5 = staticinvoke <com.mysql.jdbc.StringUtils: boolean startsWithIgnoreCaseAndNonAlphaNumeric(java.lang.String,java.lang.String)>(r1, "SELECT");
        if $z5 != 0 goto label1;

        $z6 = staticinvoke <com.mysql.jdbc.StringUtils: boolean startsWithIgnoreCaseAndNonAlphaNumeric(java.lang.String,java.lang.String)>(r1, "DELETE");
        if $z6 != 0 goto label1;

        $z7 = staticinvoke <com.mysql.jdbc.StringUtils: boolean startsWithIgnoreCaseAndNonAlphaNumeric(java.lang.String,java.lang.String)>(r1, "INSERT");
        if $z7 != 0 goto label1;

        $z8 = staticinvoke <com.mysql.jdbc.StringUtils: boolean startsWithIgnoreCaseAndNonAlphaNumeric(java.lang.String,java.lang.String)>(r1, "UPDATE");
        if $z8 != 0 goto label1;

        $z9 = staticinvoke <com.mysql.jdbc.StringUtils: boolean startsWithIgnoreCaseAndNonAlphaNumeric(java.lang.String,java.lang.String)>(r1, "REPLACE");
        if $z9 == 0 goto label15;

     label1:
        i0 = 0;
        i1 = virtualinvoke r1.<java.lang.String: int length()>();
        i2 = i1 - 7;
        $z10 = r0.<com.mysql.jdbc.ConnectionImpl: boolean noBackslashEscapes>;
        if $z10 != 0 goto label2;

        $z11 = 1;
        goto label3;

     label2:
        $z11 = 0;

     label3:
        z1 = $z11;
        $z12 = r0.<com.mysql.jdbc.ConnectionImpl: boolean useAnsiQuotes>;
        if $z12 == 0 goto label4;

        $c6 = 34;
        goto label5;

     label4:
        $c6 = 39;

     label5:
        c3 = $c6;
        z2 = 0;

     label6:
        if i0 >= i2 goto label12;

        i4 = staticinvoke <com.mysql.jdbc.StringUtils: int indexOfIgnoreCaseRespectQuotes(int,java.lang.String,java.lang.String,char,boolean)>(i0, r1, "LIMIT ", c3, z1);
        if i4 != -1 goto label7;

        goto label12;

     label7:
        i0 = i4 + 7;

     label8:
        if i0 >= i1 goto label11;

        c5 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i0);
        $z13 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c5);
        if $z13 != 0 goto label9;

        $z14 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(c5);
        if $z14 != 0 goto label9;

        if c5 == 44 goto label9;

        if c5 == 63 goto label9;

        goto label11;

     label9:
        if c5 != 63 goto label10;

        z2 = 1;
        goto label11;

     label10:
        i0 = i0 + 1;
        goto label8;

     label11:
        goto label6;

     label12:
        if z2 != 0 goto label13;

        $z15 = 1;
        goto label14;

     label13:
        $z15 = 0;

     label14:
        z0 = $z15;
        goto label18;

     label15:
        $z16 = staticinvoke <com.mysql.jdbc.StringUtils: boolean startsWithIgnoreCaseAndWs(java.lang.String,java.lang.String)>(r1, "CREATE TABLE");
        if $z16 == 0 goto label16;

        z0 = 0;
        goto label18;

     label16:
        $z17 = staticinvoke <com.mysql.jdbc.StringUtils: boolean startsWithIgnoreCaseAndWs(java.lang.String,java.lang.String)>(r1, "DO");
        if $z17 == 0 goto label17;

        z0 = 0;
        goto label18;

     label17:
        $z18 = staticinvoke <com.mysql.jdbc.StringUtils: boolean startsWithIgnoreCaseAndWs(java.lang.String,java.lang.String)>(r1, "SET");
        if $z18 == 0 goto label18;

        z0 = 0;

     label18:
        return z0;
    }

    public void changeUser(java.lang.String, java.lang.String) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1, r2, $r4;
        boolean $z0, $z1;
        com.mysql.jdbc.MysqlIO $r3;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        if r1 == null goto label0;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("");
        if $z0 == 0 goto label1;

     label0:
        r1 = "";

     label1:
        if r2 != null goto label2;

        r2 = "";

     label2:
        $r3 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        $r4 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String database>;
        virtualinvoke $r3.<com.mysql.jdbc.MysqlIO: void changeUser(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, $r4);
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String user> = r1;
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String password> = r2;
        $z1 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean versionMeetsMinimum(int,int,int)>(4, 1, 0);
        if $z1 == 0 goto label3;

        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean configureClientCharacterSet(boolean)>(1);

     label3:
        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setupServerForTruncationChecks()>();
        return;
    }

    private boolean characterSetNamesMatches(java.lang.String)
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1, $r4, $r7;
        java.util.Map $r2, $r5;
        java.lang.Object $r3, $r6;
        boolean $z0, $z1, $z2;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.lang.String;
        if r1 == null goto label0;

        $r2 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map serverVariables>;
        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("character_set_client");
        $r4 = (java.lang.String) $r3;
        $z0 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r4);
        if $z0 == 0 goto label0;

        $r5 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map serverVariables>;
        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>("character_set_connection");
        $r7 = (java.lang.String) $r6;
        $z1 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r7);
        if $z1 == 0 goto label0;

        $z2 = 1;
        goto label1;

     label0:
        $z2 = 0;

     label1:
        return $z2;
    }

    private void checkAndCreatePerformanceHistogram()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        int[] $r1, $r2;
        long[] $r3, $r4;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $r1 = r0.<com.mysql.jdbc.ConnectionImpl: int[] perfMetricsHistCounts>;
        if $r1 != null goto label0;

        $r2 = newarray (int)[20];
        r0.<com.mysql.jdbc.ConnectionImpl: int[] perfMetricsHistCounts> = $r2;

     label0:
        $r3 = r0.<com.mysql.jdbc.ConnectionImpl: long[] perfMetricsHistBreakpoints>;
        if $r3 != null goto label1;

        $r4 = newarray (long)[20];
        r0.<com.mysql.jdbc.ConnectionImpl: long[] perfMetricsHistBreakpoints> = $r4;

     label1:
        return;
    }

    private void checkAndCreateTablesAccessedHistogram()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        int[] $r1, $r2;
        long[] $r3, $r4;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $r1 = r0.<com.mysql.jdbc.ConnectionImpl: int[] numTablesMetricsHistCounts>;
        if $r1 != null goto label0;

        $r2 = newarray (int)[20];
        r0.<com.mysql.jdbc.ConnectionImpl: int[] numTablesMetricsHistCounts> = $r2;

     label0:
        $r3 = r0.<com.mysql.jdbc.ConnectionImpl: long[] numTablesMetricsHistBreakpoints>;
        if $r3 != null goto label1;

        $r4 = newarray (long)[20];
        r0.<com.mysql.jdbc.ConnectionImpl: long[] numTablesMetricsHistBreakpoints> = $r4;

     label1:
        return;
    }

    protected void checkClosed() throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.StringBuffer r1, $r2;
        boolean $z0;
        java.lang.Throwable $r3, $r4, $r6, $r8, $r11, $r12, $r16;
        java.lang.String $r9, $r17, $r19;
        java.sql.SQLException $r20;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $z0 = r0.<com.mysql.jdbc.ConnectionImpl: boolean isClosed>;
        if $z0 == 0 goto label6;

        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>(java.lang.String)>("No operations allowed after connection closed.");
        r1 = $r2;
        $r3 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.Throwable forcedClosedLocation>;
        if $r3 != null goto label0;

        $r4 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.Throwable forceClosedReason>;
        if $r4 == null goto label1;

     label0:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Connection was implicitly closed ");

     label1:
        $r6 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.Throwable forcedClosedLocation>;
        if $r6 == null goto label2;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\n at (stack trace):\n");
        $r8 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.Throwable forcedClosedLocation>;
        $r9 = staticinvoke <com.mysql.jdbc.Util: java.lang.String stackTraceToString(java.lang.Throwable)>($r8);
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

     label2:
        $r11 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.Throwable forceClosedReason>;
        if $r11 == null goto label5;

        $r12 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.Throwable forcedClosedLocation>;
        if $r12 == null goto label3;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\nDue ");
        goto label4;

     label3:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("due ");

     label4:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("to underlying exception/error:\n");
        $r16 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.Throwable forceClosedReason>;
        $r17 = staticinvoke <com.mysql.jdbc.Util: java.lang.String stackTraceToString(java.lang.Throwable)>($r16);
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

     label5:
        $r19 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();
        $r20 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String,java.lang.String)>($r19, "08003");
        throw $r20;

     label6:
        return;
    }

    private void checkServerEncoding() throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1, r2, $r4, $r10, $r12, $r18, $r20, $r26, $r33;
        com.mysql.jdbc.SingleByteCharsetConverter r3;
        boolean $z0, $z1, $z2;
        java.util.Map $r5, $r7;
        java.lang.Object $r6, $r8;
        java.util.Locale $r9;
        char $c0, $c1, $c2;
        char[] r11;
        java.lang.StringBuffer $r13, $r14, $r15, $r16, $r17, $r24, $r25, $r27, $r28, $r29, $r30, $r31, $r32;
        java.sql.SQLException $r19, $r34;
        java.io.UnsupportedEncodingException $r22, r23;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $z0 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getUseUnicode()>();
        if $z0 == 0 goto label0;

        $r4 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getEncoding()>();
        if $r4 == null goto label0;

        return;

     label0:
        $r5 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map serverVariables>;
        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>("character_set");
        r1 = (java.lang.String) $r6;
        if r1 != null goto label1;

        $r7 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map serverVariables>;
        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>("character_set_server");
        r1 = (java.lang.String) $r8;

     label1:
        r2 = null;
        if r1 == null goto label2;

        $r9 = <java.util.Locale: java.util.Locale ENGLISH>;
        $r10 = virtualinvoke r1.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r9);
        r2 = staticinvoke <com.mysql.jdbc.CharsetMapping: java.lang.String getJavaEncodingForMysqlEncoding(java.lang.String,com.mysql.jdbc.Connection)>($r10, r0);

     label2:
        $z1 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getUseUnicode()>();
        if $z1 != 0 goto label3;

        if r2 == null goto label3;

        r3 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.SingleByteCharsetConverter getCharsetConverter(java.lang.String)>(r2);
        if r3 == null goto label3;

        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setUseUnicode(boolean)>(1);
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setEncoding(java.lang.String)>(r2);
        return;

     label3:
        if r1 == null goto label8;

        if r2 != null goto label4;

        $c0 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);
        $z2 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>($c0);
        if $z2 == 0 goto label4;

        r11 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();
        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);
        $c2 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c1);
        r11[0] = $c2;
        $r12 = new java.lang.String;
        specialinvoke $r12.<java.lang.String: void <init>(char[])>(r11);
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setEncoding(java.lang.String)>($r12);

     label4:
        if r2 != null goto label5;

        $r13 = new java.lang.StringBuffer;
        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();
        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown character encoding on server \'");
        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);
        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\', use \'characterEncoding=\' property ");
        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" to provide correct mapping");
        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();
        $r19 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String,java.lang.String)>($r18, "01S00");
        throw $r19;

     label5:
        $r20 = "abc";
        virtualinvoke $r20.<java.lang.String: byte[] getBytes(java.lang.String)>(r2);
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setEncoding(java.lang.String)>(r2);
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setUseUnicode(boolean)>(1);

     label6:
        goto label8;

     label7:
        $r22 := @caughtexception;
        r23 = $r22;
        $r24 = new java.lang.StringBuffer;
        specialinvoke $r24.<java.lang.StringBuffer: void <init>()>();
        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The driver can not map the character encoding \'");
        $r26 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getEncoding()>();
        $r27 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26);
        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' that your server is using ");
        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("to a character encoding your JVM understands. You ");
        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("can specify this mapping manually by adding \"useUnicode=true\" ");
        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("as well as \"characterEncoding=[an_encoding_your_jvm_understands]\" ");
        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("to your JDBC URL.");
        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>();
        $r34 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String,java.lang.String)>($r33, "0S100");
        throw $r34;

     label8:
        return;

        catch java.io.UnsupportedEncodingException from label5 to label6 with label7;
    }

    private void checkTransactionIsolationLevel() throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        null_type n0;
        java.lang.String r1, r3;
        java.lang.Integer r2;
        boolean $z0;
        java.util.Map $r4, $r6;
        java.lang.Object $r5, $r7;
        int $i0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        n0 = null;
        $z0 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean versionMeetsMinimum(int,int,int)>(4, 0, 3);
        if $z0 == 0 goto label0;

        r3 = "tx_isolation";
        goto label1;

     label0:
        r3 = "transaction_isolation";

     label1:
        $r4 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map serverVariables>;
        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);
        r1 = (java.lang.String) $r5;
        if r1 == null goto label2;

        $r6 = <com.mysql.jdbc.ConnectionImpl: java.util.Map mapTransIsolationNameToValue>;
        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);
        r2 = (java.lang.Integer) $r7;
        if r2 == null goto label2;

        $i0 = virtualinvoke r2.<java.lang.Integer: int intValue()>();
        r0.<com.mysql.jdbc.ConnectionImpl: int isolationLevel> = $i0;

     label2:
        return;
    }

    protected void abortInternal() throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.Throwable r1, $r4;
        com.mysql.jdbc.MysqlIO $r2, $r3;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $r2 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        if $r2 == null goto label4;

     label0:
        $r3 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        virtualinvoke $r3.<com.mysql.jdbc.MysqlIO: void forceClose()>();

     label1:
        goto label3;

     label2:
        $r4 := @caughtexception;
        r1 = $r4;

     label3:
        r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io> = null;

     label4:
        r0.<com.mysql.jdbc.ConnectionImpl: boolean isClosed> = 1;
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
    }

    private void cleanup(java.lang.Throwable)
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.Throwable r1;
        java.sql.SQLException r2, $r6;
        com.mysql.jdbc.MysqlIO $r3, $r4, $r5;
        boolean $z0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.lang.Throwable;

     label0:
        $r3 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        if $r3 == null goto label1;

        $z0 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean isClosed()>();
        if $z0 != 0 goto label1;

        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void realClose(boolean,boolean,boolean,java.lang.Throwable)>(0, 0, 0, r1);
        goto label2;

     label1:
        $r4 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        if $r4 == null goto label2;

        $r5 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        virtualinvoke $r5.<com.mysql.jdbc.MysqlIO: void forceClose()>();

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;
        r2 = $r6;

     label4:
        r0.<com.mysql.jdbc.ConnectionImpl: boolean isClosed> = 1;
        return;

        catch java.sql.SQLException from label0 to label2 with label3;
    }

    public void clearHasTriedMaster()
    {
        com.mysql.jdbc.ConnectionImpl r0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean hasTriedMasterFlag> = 0;
        return;
    }

    public void clearWarnings() throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        return;
    }

    public java.sql.PreparedStatement clientPrepareStatement(java.lang.String) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1;
        java.sql.PreparedStatement $r2;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.lang.String;
        $r2 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.sql.PreparedStatement clientPrepareStatement(java.lang.String,int,int)>(r1, 1005, 1007);
        return $r2;
    }

    public java.sql.PreparedStatement clientPrepareStatement(java.lang.String, int) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1;
        int i0;
        java.sql.PreparedStatement r2;
        com.mysql.jdbc.PreparedStatement $r3;
        boolean $z0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        r2 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.sql.PreparedStatement clientPrepareStatement(java.lang.String)>(r1);
        $r3 = (com.mysql.jdbc.PreparedStatement) r2;
        if i0 != 1 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        virtualinvoke $r3.<com.mysql.jdbc.PreparedStatement: void setRetrieveGeneratedKeys(boolean)>($z0);
        return r2;
    }

    public java.sql.PreparedStatement clientPrepareStatement(java.lang.String, int, int) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1;
        int i0, i1;
        java.sql.PreparedStatement $r2;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $r2 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.sql.PreparedStatement clientPrepareStatement(java.lang.String,int,int,boolean)>(r1, i0, i1, 1);
        return $r2;
    }

    protected java.sql.PreparedStatement clientPrepareStatement(java.lang.String, int, int, boolean) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1, r2, r7, r8, $r11, $r15, $r29, $r31;
        int i0, i1, $i3, $i4, $i5, $i6;
        boolean z0, $z1, $z2, $z3;
        null_type n0;
        java.util.Map r3, $r12, $r13, $r17, $r18, $r21, $r23, $r25;
        com.mysql.jdbc.PreparedStatement$ParseInfo r4, r5, r9, $r26;
        java.util.Iterator r6;
        long l2, $l7, $l9;
        java.lang.Throwable r10, $r30;
        java.lang.Object $r14, $r20, $r22;
        com.mysql.jdbc.PreparedStatement r16, $r28;
        java.util.Set $r19;
        byte $b8;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        z0 := @parameter3: boolean;
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void checkClosed()>();
        if z0 == 0 goto label0;

        $z1 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getProcessEscapeCodesForPrepStmts()>();
        if $z1 == 0 goto label0;

        $r11 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String nativeSQL(java.lang.String)>(r1);
        goto label1;

     label0:
        $r11 = r1;

     label1:
        r2 = $r11;
        n0 = null;
        $z2 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getCachePreparedStatements()>();
        if $z2 == 0 goto label14;

        $r12 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map cachedPreparedStatementParams>;
        r3 = $r12;
        entermonitor $r12;

     label2:
        $r13 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map cachedPreparedStatementParams>;
        $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);
        r4 = (com.mysql.jdbc.PreparedStatement$ParseInfo) $r14;
        if r4 != null goto label8;

        $r15 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String database>;
        r16 = staticinvoke <com.mysql.jdbc.PreparedStatement: com.mysql.jdbc.PreparedStatement getInstance(com.mysql.jdbc.ConnectionImpl,java.lang.String,java.lang.String)>(r0, r2, $r15);
        r5 = virtualinvoke r16.<com.mysql.jdbc.PreparedStatement: com.mysql.jdbc.PreparedStatement$ParseInfo getParseInfo()>();
        $i3 = r5.<com.mysql.jdbc.PreparedStatement$ParseInfo: int statementLength>;
        $i4 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: int getPreparedStatementCacheSqlLimit()>();
        if $i3 >= $i4 goto label7;

        $r17 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map cachedPreparedStatementParams>;
        $i5 = interfaceinvoke $r17.<java.util.Map: int size()>();
        $i6 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: int getPreparedStatementCacheSize()>();
        if $i5 < $i6 goto label6;

        $r18 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map cachedPreparedStatementParams>;
        $r19 = interfaceinvoke $r18.<java.util.Map: java.util.Set keySet()>();
        r6 = interfaceinvoke $r19.<java.util.Set: java.util.Iterator iterator()>();
        l2 = 9223372036854775807L;
        r7 = null;

     label3:
        $z3 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();
        if $z3 == 0 goto label5;

        $r20 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();
        r8 = (java.lang.String) $r20;
        $r21 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map cachedPreparedStatementParams>;
        $r22 = interfaceinvoke $r21.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8);
        r9 = (com.mysql.jdbc.PreparedStatement$ParseInfo) $r22;
        $l7 = r9.<com.mysql.jdbc.PreparedStatement$ParseInfo: long lastUsed>;
        $b8 = $l7 cmp l2;
        if $b8 >= 0 goto label4;

        l2 = r9.<com.mysql.jdbc.PreparedStatement$ParseInfo: long lastUsed>;
        r7 = r8;

     label4:
        goto label3;

     label5:
        if r7 == null goto label6;

        $r23 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map cachedPreparedStatementParams>;
        interfaceinvoke $r23.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r7);

     label6:
        $r25 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map cachedPreparedStatementParams>;
        $r26 = virtualinvoke r16.<com.mysql.jdbc.PreparedStatement: com.mysql.jdbc.PreparedStatement$ParseInfo getParseInfo()>();
        interfaceinvoke $r25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r26);

     label7:
        goto label9;

     label8:
        $l9 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        r4.<com.mysql.jdbc.PreparedStatement$ParseInfo: long lastUsed> = $l9;
        $r28 = new com.mysql.jdbc.PreparedStatement;
        $r29 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String database>;
        specialinvoke $r28.<com.mysql.jdbc.PreparedStatement: void <init>(com.mysql.jdbc.ConnectionImpl,java.lang.String,java.lang.String,com.mysql.jdbc.PreparedStatement$ParseInfo)>(r0, r2, $r29, r4);
        r16 = $r28;

     label9:
        exitmonitor r3;

     label10:
        goto label15;

     label11:
        $r30 := @caughtexception;

     label12:
        r10 = $r30;
        exitmonitor r3;

     label13:
        throw r10;

     label14:
        $r31 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String database>;
        r16 = staticinvoke <com.mysql.jdbc.PreparedStatement: com.mysql.jdbc.PreparedStatement getInstance(com.mysql.jdbc.ConnectionImpl,java.lang.String,java.lang.String)>(r0, r2, $r31);

     label15:
        virtualinvoke r16.<com.mysql.jdbc.PreparedStatement: void setResultSetType(int)>(i0);
        virtualinvoke r16.<com.mysql.jdbc.PreparedStatement: void setResultSetConcurrency(int)>(i1);
        return r16;

        catch java.lang.Throwable from label2 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public java.sql.PreparedStatement clientPrepareStatement(java.lang.String, int[]) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1;
        int[] r2;
        com.mysql.jdbc.PreparedStatement r3;
        java.sql.PreparedStatement $r4;
        int $i0;
        boolean $z0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: int[];
        $r4 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.sql.PreparedStatement clientPrepareStatement(java.lang.String)>(r1);
        r3 = (com.mysql.jdbc.PreparedStatement) $r4;
        if r2 == null goto label0;

        $i0 = lengthof r2;
        if $i0 <= 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        virtualinvoke r3.<com.mysql.jdbc.PreparedStatement: void setRetrieveGeneratedKeys(boolean)>($z0);
        return r3;
    }

    public java.sql.PreparedStatement clientPrepareStatement(java.lang.String, java.lang.String[]) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1;
        java.lang.String[] r2;
        com.mysql.jdbc.PreparedStatement r3;
        java.sql.PreparedStatement $r4;
        int $i0;
        boolean $z0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String[];
        $r4 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.sql.PreparedStatement clientPrepareStatement(java.lang.String)>(r1);
        r3 = (com.mysql.jdbc.PreparedStatement) $r4;
        if r2 == null goto label0;

        $i0 = lengthof r2;
        if $i0 <= 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        virtualinvoke r3.<com.mysql.jdbc.PreparedStatement: void setRetrieveGeneratedKeys(boolean)>($z0);
        return r3;
    }

    public java.sql.PreparedStatement clientPrepareStatement(java.lang.String, int, int, int) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1;
        int i0, i1, i2;
        java.sql.PreparedStatement $r2;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        $r2 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.sql.PreparedStatement clientPrepareStatement(java.lang.String,int,int,boolean)>(r1, i0, i1, 1);
        return $r2;
    }

    public synchronized void close() throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.util.List $r1, $r3;
        com.mysql.jdbc.ConnectionImpl$1 $r2;
        java.util.Iterator $r4;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $r1 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.List connectionLifecycleInterceptors>;
        if $r1 == null goto label0;

        $r2 = new com.mysql.jdbc.ConnectionImpl$1;
        $r3 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.List connectionLifecycleInterceptors>;
        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();
        specialinvoke $r2.<com.mysql.jdbc.ConnectionImpl$1: void <init>(com.mysql.jdbc.ConnectionImpl,java.util.Iterator)>(r0, $r4);
        virtualinvoke $r2.<com.mysql.jdbc.ConnectionImpl$1: void doForAll()>();

     label0:
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void realClose(boolean,boolean,boolean,java.lang.Throwable)>(1, 1, 0, null);
        return;
    }

    private void closeAllOpenStatements() throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.sql.SQLException r1, r5, $r12;
        java.util.ArrayList r2, $r7;
        java.util.Iterator r3;
        int i0, i1;
        com.mysql.jdbc.StatementImpl r4;
        java.util.Map $r6, $r8;
        java.util.Set $r9;
        boolean $z0;
        java.lang.Object $r10, $r11;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 = null;
        $r6 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map openStatements>;
        if $r6 == null goto label8;

        $r7 = new java.util.ArrayList;
        specialinvoke $r7.<java.util.ArrayList: void <init>()>();
        r2 = $r7;
        $r8 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map openStatements>;
        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set keySet()>();
        r3 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label1;

        $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r10);
        goto label0;

     label1:
        i1 = interfaceinvoke r2.<java.util.List: int size()>();
        i0 = 0;

     label2:
        if i0 >= i1 goto label7;

        $r11 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i0);
        r4 = (com.mysql.jdbc.StatementImpl) $r11;

     label3:
        virtualinvoke r4.<com.mysql.jdbc.StatementImpl: void realClose(boolean,boolean)>(0, 1);

     label4:
        goto label6;

     label5:
        $r12 := @caughtexception;
        r5 = $r12;
        r1 = r5;

     label6:
        i0 = i0 + 1;
        goto label2;

     label7:
        if r1 == null goto label8;

        throw r1;

     label8:
        return;

        catch java.sql.SQLException from label3 to label4 with label5;
    }

    private void closeStatement(java.sql.Statement)
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.sql.Statement r1;
        java.sql.SQLException r2, $r3;
        null_type n0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.sql.Statement;
        if r1 == null goto label4;

     label0:
        interfaceinvoke r1.<java.sql.Statement: void close()>();

     label1:
        goto label3;

     label2:
        $r3 := @caughtexception;
        r2 = $r3;

     label3:
        n0 = null;

     label4:
        return;

        catch java.sql.SQLException from label0 to label1 with label2;
    }

    public void commit() throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.Object r1, $r5;
        com.mysql.jdbc.ConnectionImpl$2 r2, $r7;
        java.lang.Throwable r3, r4, $r19, $r20;
        java.util.List $r6, $r8;
        java.util.Iterator $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        java.sql.SQLException $r10, $r14, r15, $r18;
        com.mysql.jdbc.MysqlIO $r11;
        java.lang.String $r12, $r16, $r17;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $r5 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.Object getMutex()>();
        r1 = $r5;
        entermonitor $r5;

     label0:
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void checkClosed()>();

     label1:
        $r6 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.List connectionLifecycleInterceptors>;
        if $r6 == null goto label4;

        $r7 = new com.mysql.jdbc.ConnectionImpl$2;
        $r8 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.List connectionLifecycleInterceptors>;
        $r9 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();
        specialinvoke $r7.<com.mysql.jdbc.ConnectionImpl$2: void <init>(com.mysql.jdbc.ConnectionImpl,java.util.Iterator)>(r0, $r9);
        r2 = $r7;
        virtualinvoke r2.<com.mysql.jdbc.IterateBlock: void doForAll()>();
        $z0 = virtualinvoke r2.<com.mysql.jdbc.IterateBlock: boolean fullIteration()>();
        if $z0 != 0 goto label4;

     label2:
        $z1 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getReconnectAtTxEnd()>();
        r0.<com.mysql.jdbc.ConnectionImpl: boolean needsPing> = $z1;
        exitmonitor r1;

     label3:
        return;

     label4:
        $z2 = r0.<com.mysql.jdbc.ConnectionImpl: boolean autoCommit>;
        if $z2 == 0 goto label5;

        $z3 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getRelaxAutoCommit()>();
        if $z3 != 0 goto label5;

        $r10 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String)>("Can\'t call commit when autocommit=true");
        throw $r10;

     label5:
        $z4 = r0.<com.mysql.jdbc.ConnectionImpl: boolean transactionsSupported>;
        if $z4 == 0 goto label9;

        $z5 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getUseLocalSessionState()>();
        if $z5 == 0 goto label8;

        $z6 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean versionMeetsMinimum(int,int,int)>(5, 0, 0);
        if $z6 == 0 goto label8;

        $r11 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        $z7 = virtualinvoke $r11.<com.mysql.jdbc.MysqlIO: boolean inTransactionOnServer()>();
        if $z7 != 0 goto label8;

     label6:
        $z8 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getReconnectAtTxEnd()>();
        r0.<com.mysql.jdbc.ConnectionImpl: boolean needsPing> = $z8;
        exitmonitor r1;

     label7:
        return;

     label8:
        $r12 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String database>;
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.ResultSetInternalMethods execSQL(com.mysql.jdbc.StatementImpl,java.lang.String,int,com.mysql.jdbc.Buffer,int,int,boolean,java.lang.String,com.mysql.jdbc.Field[],boolean)>(null, "commit", -1, null, 1003, 1007, 0, $r12, null, 0);

     label9:
        $z9 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getReconnectAtTxEnd()>();
        r0.<com.mysql.jdbc.ConnectionImpl: boolean needsPing> = $z9;
        goto label15;

     label10:
        $r14 := @caughtexception;

     label11:
        r15 = $r14;
        $r16 = "08S01";
        $r17 = virtualinvoke r15.<java.sql.SQLException: java.lang.String getSQLState()>();
        $z10 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r17);
        if $z10 == 0 goto label12;

        $r18 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String,java.lang.String)>("Communications link failure during commit(). Transaction resolution unknown.", "08007");
        throw $r18;

     label12:
        throw r15;

     label13:
        $r19 := @caughtexception;
        r3 = $r19;

     label14:
        $z11 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getReconnectAtTxEnd()>();
        r0.<com.mysql.jdbc.ConnectionImpl: boolean needsPing> = $z11;
        throw r3;

     label15:
        exitmonitor r1;

     label16:
        return;

     label17:
        $r20 := @caughtexception;

     label18:
        r4 = $r20;
        exitmonitor r1;

     label19:
        throw r4;

        catch java.sql.SQLException from label1 to label2 with label10;
        catch java.sql.SQLException from label4 to label6 with label10;
        catch java.sql.SQLException from label8 to label9 with label10;
        catch java.lang.Throwable from label1 to label2 with label13;
        catch java.lang.Throwable from label4 to label6 with label13;
        catch java.lang.Throwable from label8 to label9 with label13;
        catch java.lang.Throwable from label11 to label14 with label13;
        catch java.lang.Throwable from label0 to label3 with label17;
        catch java.lang.Throwable from label4 to label7 with label17;
        catch java.lang.Throwable from label8 to label16 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    private void configureCharsetProperties() throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1, r2, r3, $r4, $r5, $r9, $r10, $r15, $r17, $r23, $r26;
        java.io.UnsupportedEncodingException $r7, r8, $r19, r20;
        java.lang.StringBuffer $r11, $r12, $r13, $r14, $r21, $r22, $r24, $r25;
        java.sql.SQLException $r16, $r27;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $r4 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getEncoding()>();
        if $r4 == null goto label6;

     label0:
        r1 = "abc";
        $r5 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getEncoding()>();
        virtualinvoke r1.<java.lang.String: byte[] getBytes(java.lang.String)>($r5);

     label1:
        goto label6;

     label2:
        $r7 := @caughtexception;
        r8 = $r7;
        r2 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getEncoding()>();
        $r9 = staticinvoke <com.mysql.jdbc.CharsetMapping: java.lang.String getJavaEncodingForMysqlEncoding(java.lang.String,com.mysql.jdbc.Connection)>(r2, r0);
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setEncoding(java.lang.String)>($r9);
        $r10 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getEncoding()>();
        if $r10 != null goto label3;

        $r11 = new java.lang.StringBuffer;
        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();
        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Java does not support the MySQL character encoding  encoding \'");
        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);
        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'.");
        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();
        $r16 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String,java.lang.String)>($r15, "01S00");
        throw $r16;

     label3:
        r3 = "abc";
        $r17 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getEncoding()>();
        virtualinvoke r3.<java.lang.String: byte[] getBytes(java.lang.String)>($r17);

     label4:
        goto label6;

     label5:
        $r19 := @caughtexception;
        r20 = $r19;
        $r21 = new java.lang.StringBuffer;
        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();
        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unsupported character encoding \'");
        $r23 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getEncoding()>();
        $r24 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r23);
        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'.");
        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();
        $r27 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String,java.lang.String)>($r26, "01S00");
        throw $r27;

     label6:
        return;

        catch java.io.UnsupportedEncodingException from label0 to label1 with label2;
        catch java.io.UnsupportedEncodingException from label3 to label4 with label5;
    }

    private boolean configureClientCharacterSet(boolean) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21;
        java.lang.String r1, r2, r3, $r8, $r11, $r19, $r21, $r29, $r31, $r32, $r35, r36, $r40, $r41, $r43, $r44, $r46, r47, $r51, $r52, r54, $r58, $r59, $r60, $r66, $r67, r68, $r70, $r73, $r75, $r78, $r79, $r85, $r87, $r88, $r91, $r93, $r94;
        null_type n0;
        java.lang.StringBuffer r4, $r14, $r15, $r17, $r18, $r24, $r25, $r27, $r28, $r37, $r38, $r39, $r48, $r49, $r50, $r74, $r76, $r86, r89, $r90;
        java.lang.Throwable r5, $r96;
        java.util.Properties $r6, $r7, $r10;
        com.mysql.jdbc.MysqlIO $r9, $r13, $r16, $r26;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.String[] $r12;
        java.sql.SQLException $r20, $r30;
        java.lang.ArrayIndexOutOfBoundsException $r22, r23;
        java.util.Locale $r34, $r45, $r69;
        java.util.Map $r55, $r56, $r62, $r64, $r71, $r81, $r83;
        java.lang.Object $r57, $r72;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        z0 := @parameter0: boolean;
        r1 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getEncoding()>();
        z1 = 0;

     label0:
        $z3 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean versionMeetsMinimum(int,int,int)>(4, 1, 0);
        if $z3 == 0 goto label35;

        z1 = 1;
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setUseUnicode(boolean)>(1);
        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void configureCharsetProperties()>();
        r1 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getEncoding()>();

     label1:
        $r6 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Properties props>;
        if $r6 == null goto label2;

        $r7 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Properties props>;
        $r8 = virtualinvoke $r7.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("com.mysql.jdbc.faultInjection.serverCharsetIndex");
        if $r8 == null goto label2;

        $r9 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        $r10 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Properties props>;
        $r11 = virtualinvoke $r10.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("com.mysql.jdbc.faultInjection.serverCharsetIndex");
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r11);
        $r9.<com.mysql.jdbc.MysqlIO: int serverCharsetIndex> = $i0;

     label2:
        $r12 = <com.mysql.jdbc.CharsetMapping: java.lang.String[] INDEX_TO_CHARSET>;
        $r13 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        $i1 = $r13.<com.mysql.jdbc.MysqlIO: int serverCharsetIndex>;
        r2 = $r12[$i1];
        if r2 == null goto label3;

        $i2 = virtualinvoke r2.<java.lang.String: int length()>();
        if $i2 != 0 goto label5;

     label3:
        if r1 == null goto label4;

        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setEncoding(java.lang.String)>(r1);
        goto label5;

     label4:
        $r14 = new java.lang.StringBuffer;
        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();
        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown initial character set index \'");
        $r16 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        $i3 = $r16.<com.mysql.jdbc.MysqlIO: int serverCharsetIndex>;
        $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);
        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' received from server. Initial client character set can be forced via the \'characterEncoding\' property.");
        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();
        $r20 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String,java.lang.String)>($r19, "S1000");
        throw $r20;

     label5:
        $z4 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean versionMeetsMinimum(int,int,int)>(4, 1, 0);
        if $z4 == 0 goto label6;

        $r21 = "ISO8859_1";
        $z5 = virtualinvoke $r21.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);
        if $z5 == 0 goto label6;

        r2 = "Cp1252";

     label6:
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setEncoding(java.lang.String)>(r2);

     label7:
        goto label10;

     label8:
        $r22 := @caughtexception;
        r23 = $r22;
        if r1 == null goto label9;

        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setEncoding(java.lang.String)>(r1);
        goto label10;

     label9:
        $r24 = new java.lang.StringBuffer;
        specialinvoke $r24.<java.lang.StringBuffer: void <init>()>();
        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown initial character set index \'");
        $r26 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        $i4 = $r26.<com.mysql.jdbc.MysqlIO: int serverCharsetIndex>;
        $r27 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4);
        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' received from server. Initial client character set can be forced via the \'characterEncoding\' property.");
        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.String toString()>();
        $r30 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String,java.lang.String)>($r29, "S1000");
        throw $r30;

     label10:
        $r31 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getEncoding()>();
        if $r31 != null goto label11;

        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setEncoding(java.lang.String)>("ISO8859_1");

     label11:
        $z6 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getUseUnicode()>();
        if $z6 == 0 goto label21;

        if r1 == null goto label18;

        $z7 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("UTF-8");
        if $z7 != 0 goto label12;

        $z8 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("UTF8");
        if $z8 == 0 goto label15;

     label12:
        $z9 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getUseOldUTF8Behavior()>();
        if $z9 != 0 goto label14;

        if z0 != 0 goto label13;

        $z10 = specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean characterSetNamesMatches(java.lang.String)>("utf8");
        if $z10 != 0 goto label14;

     label13:
        $r32 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String database>;
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.ResultSetInternalMethods execSQL(com.mysql.jdbc.StatementImpl,java.lang.String,int,com.mysql.jdbc.Buffer,int,int,boolean,java.lang.String,com.mysql.jdbc.Field[],boolean)>(null, "SET NAMES utf8", -1, null, 1003, 1007, 0, $r32, null, 0);

     label14:
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setEncoding(java.lang.String)>(r1);
        goto label21;

     label15:
        $r34 = <java.util.Locale: java.util.Locale ENGLISH>;
        $r35 = virtualinvoke r1.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r34);
        r36 = staticinvoke <com.mysql.jdbc.CharsetMapping: java.lang.String getMysqlEncodingForJavaEncoding(java.lang.String,com.mysql.jdbc.Connection)>($r35, r0);
        if r36 == null goto label17;

        if z0 != 0 goto label16;

        $z11 = specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean characterSetNamesMatches(java.lang.String)>(r36);
        if $z11 != 0 goto label17;

     label16:
        $r37 = new java.lang.StringBuffer;
        specialinvoke $r37.<java.lang.StringBuffer: void <init>()>();
        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("SET NAMES ");
        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r36);
        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.String toString()>();
        $r41 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String database>;
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.ResultSetInternalMethods execSQL(com.mysql.jdbc.StatementImpl,java.lang.String,int,com.mysql.jdbc.Buffer,int,int,boolean,java.lang.String,com.mysql.jdbc.Field[],boolean)>(null, $r40, -1, null, 1003, 1007, 0, $r41, null, 0);

     label17:
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setEncoding(java.lang.String)>(r1);
        goto label21;

     label18:
        $r43 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getEncoding()>();
        if $r43 == null goto label21;

        $r44 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getEncoding()>();
        $r45 = <java.util.Locale: java.util.Locale ENGLISH>;
        $r46 = virtualinvoke $r44.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r45);
        r47 = staticinvoke <com.mysql.jdbc.CharsetMapping: java.lang.String getMysqlEncodingForJavaEncoding(java.lang.String,com.mysql.jdbc.Connection)>($r46, r0);
        if z0 != 0 goto label19;

        $z12 = specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean characterSetNamesMatches(java.lang.String)>(r47);
        if $z12 != 0 goto label20;

     label19:
        $r48 = new java.lang.StringBuffer;
        specialinvoke $r48.<java.lang.StringBuffer: void <init>()>();
        $r49 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("SET NAMES ");
        $r50 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r47);
        $r51 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.String toString()>();
        $r52 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String database>;
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.ResultSetInternalMethods execSQL(com.mysql.jdbc.StatementImpl,java.lang.String,int,com.mysql.jdbc.Buffer,int,int,boolean,java.lang.String,com.mysql.jdbc.Field[],boolean)>(null, $r51, -1, null, 1003, 1007, 0, $r52, null, 0);

     label20:
        r1 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getEncoding()>();

     label21:
        r54 = null;
        z2 = 0;
        $r55 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map serverVariables>;
        if $r55 == null goto label25;

        $r56 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map serverVariables>;
        $r57 = interfaceinvoke $r56.<java.util.Map: java.lang.Object get(java.lang.Object)>("character_set_results");
        r54 = (java.lang.String) $r57;
        if r54 == null goto label22;

        $r58 = "NULL";
        $z13 = virtualinvoke $r58.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r54);
        if $z13 != 0 goto label22;

        $i5 = virtualinvoke r54.<java.lang.String: int length()>();
        if $i5 != 0 goto label23;

     label22:
        $z14 = 1;
        goto label24;

     label23:
        $z14 = 0;

     label24:
        z2 = $z14;

     label25:
        $r59 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getCharacterSetResults()>();
        if $r59 != null goto label27;

        if z2 != 0 goto label26;

        $r60 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String database>;
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.ResultSetInternalMethods execSQL(com.mysql.jdbc.StatementImpl,java.lang.String,int,com.mysql.jdbc.Buffer,int,int,boolean,java.lang.String,com.mysql.jdbc.Field[],boolean)>(null, "SET character_set_results = NULL", -1, null, 1003, 1007, 0, $r60, null, 0);
        $z15 = r0.<com.mysql.jdbc.ConnectionImpl: boolean usingCachedConfig>;
        if $z15 != 0 goto label33;

        $r62 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map serverVariables>;
        interfaceinvoke $r62.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("jdbc.local.character_set_results", null);
        goto label33;

     label26:
        $z16 = r0.<com.mysql.jdbc.ConnectionImpl: boolean usingCachedConfig>;
        if $z16 != 0 goto label33;

        $r64 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map serverVariables>;
        interfaceinvoke $r64.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("jdbc.local.character_set_results", r54);
        goto label33;

     label27:
        r3 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getCharacterSetResults()>();
        n0 = null;
        $r66 = "UTF-8";
        $z17 = virtualinvoke $r66.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r3);
        if $z17 != 0 goto label28;

        $r67 = "UTF8";
        $z18 = virtualinvoke $r67.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r3);
        if $z18 == 0 goto label29;

     label28:
        r68 = "utf8";
        goto label30;

     label29:
        $r69 = <java.util.Locale: java.util.Locale ENGLISH>;
        $r70 = virtualinvoke r3.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r69);
        r68 = staticinvoke <com.mysql.jdbc.CharsetMapping: java.lang.String getMysqlEncodingForJavaEncoding(java.lang.String,com.mysql.jdbc.Connection)>($r70, r0);

     label30:
        $r71 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map serverVariables>;
        $r72 = interfaceinvoke $r71.<java.util.Map: java.lang.Object get(java.lang.Object)>("character_set_results");
        $r73 = (java.lang.String) $r72;
        $z19 = virtualinvoke r68.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r73);
        if $z19 != 0 goto label32;

        $r74 = new java.lang.StringBuffer;
        $r75 = "SET character_set_results = ";
        $i6 = virtualinvoke $r75.<java.lang.String: int length()>();
        $i7 = virtualinvoke r68.<java.lang.String: int length()>();
        $i8 = $i6 + $i7;
        specialinvoke $r74.<java.lang.StringBuffer: void <init>(int)>($i8);
        r4 = $r74;
        $r76 = virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("SET character_set_results = ");
        virtualinvoke $r76.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r68);
        $r78 = virtualinvoke r4.<java.lang.StringBuffer: java.lang.String toString()>();
        $r79 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String database>;
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.ResultSetInternalMethods execSQL(com.mysql.jdbc.StatementImpl,java.lang.String,int,com.mysql.jdbc.Buffer,int,int,boolean,java.lang.String,com.mysql.jdbc.Field[],boolean)>(null, $r78, -1, null, 1003, 1007, 0, $r79, null, 0);
        $z20 = r0.<com.mysql.jdbc.ConnectionImpl: boolean usingCachedConfig>;
        if $z20 != 0 goto label31;

        $r81 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map serverVariables>;
        interfaceinvoke $r81.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("jdbc.local.character_set_results", r68);

     label31:
        goto label33;

     label32:
        $z21 = r0.<com.mysql.jdbc.ConnectionImpl: boolean usingCachedConfig>;
        if $z21 != 0 goto label33;

        $r83 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map serverVariables>;
        interfaceinvoke $r83.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("jdbc.local.character_set_results", r54);

     label33:
        $r85 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getConnectionCollation()>();
        if $r85 == null goto label34;

        $r86 = new java.lang.StringBuffer;
        $r87 = "SET collation_connection = ";
        $i9 = virtualinvoke $r87.<java.lang.String: int length()>();
        $r88 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getConnectionCollation()>();
        $i10 = virtualinvoke $r88.<java.lang.String: int length()>();
        $i11 = $i9 + $i10;
        specialinvoke $r86.<java.lang.StringBuffer: void <init>(int)>($i11);
        r89 = $r86;
        $r90 = virtualinvoke r89.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("SET collation_connection = ");
        $r91 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getConnectionCollation()>();
        virtualinvoke $r90.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r91);
        $r93 = virtualinvoke r89.<java.lang.StringBuffer: java.lang.String toString()>();
        $r94 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String database>;
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.ResultSetInternalMethods execSQL(com.mysql.jdbc.StatementImpl,java.lang.String,int,com.mysql.jdbc.Buffer,int,int,boolean,java.lang.String,com.mysql.jdbc.Field[],boolean)>(null, $r93, -1, null, 1003, 1007, 0, $r94, null, 0);

     label34:
        goto label36;

     label35:
        r1 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getEncoding()>();

     label36:
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setEncoding(java.lang.String)>(r1);
        goto label40;

     label37:
        $r96 := @caughtexception;

     label38:
        r5 = $r96;

     label39:
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setEncoding(java.lang.String)>(r1);
        throw r5;

     label40:
        return z1;

        catch java.lang.ArrayIndexOutOfBoundsException from label1 to label7 with label8;
        catch java.lang.Throwable from label0 to label36 with label37;
        catch java.lang.Throwable from label38 to label39 with label37;
    }

    private void configureTimezone() throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1, r2, $r8, $r16, $r19, $r23, $r28, $r30, $r32;
        java.lang.IllegalArgumentException r3, $r18;
        java.util.Map $r4, $r6, $r9;
        java.lang.Object $r5, $r7, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.StringBuffer $r11, $r12, $r13, $r14, $r15, $r24, $r25, $r26, $r27;
        java.sql.SQLException $r17, $r20, $r29;
        int $i0;
        java.util.TimeZone $r21, $r22, $r31;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $r4 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map serverVariables>;
        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>("timezone");
        r1 = (java.lang.String) $r5;
        if r1 != null goto label0;

        $r6 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map serverVariables>;
        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>("time_zone");
        r1 = (java.lang.String) $r7;
        $r8 = "SYSTEM";
        $z0 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);
        if $z0 == 0 goto label0;

        $r9 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map serverVariables>;
        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>("system_time_zone");
        r1 = (java.lang.String) $r10;

     label0:
        r2 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getServerTimezone()>();
        $z1 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getUseTimezone()>();
        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getUseLegacyDatetimeCode()>();
        if $z2 != 0 goto label5;

     label1:
        if r1 == null goto label5;

        if r2 == null goto label2;

        $z3 = staticinvoke <com.mysql.jdbc.StringUtils: boolean isEmptyOrWhitespaceOnly(java.lang.String)>(r2);
        if $z3 == 0 goto label6;

     label2:
        r2 = staticinvoke <com.mysql.jdbc.TimeUtil: java.lang.String getCanoncialTimezone(java.lang.String)>(r1);
        if r2 != null goto label3;

        $r11 = new java.lang.StringBuffer;
        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();
        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can\'t map timezone \'");
        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);
        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' to ");
        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" canonical timezone.");
        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();
        $r17 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String,java.lang.String)>($r16, "S1009");
        throw $r17;

     label3:
        goto label6;

     label4:
        $r18 := @caughtexception;
        r3 = $r18;
        $r19 = virtualinvoke r3.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();
        $r20 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String,java.lang.String)>($r19, "S1000");
        throw $r20;

     label5:
        r2 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getServerTimezone()>();

     label6:
        if r2 == null goto label9;

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();
        if $i0 <= 0 goto label9;

        $r21 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>(r2);
        r0.<com.mysql.jdbc.ConnectionImpl: java.util.TimeZone serverTimezoneTZ> = $r21;
        $z4 = virtualinvoke r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("GMT");
        if $z4 != 0 goto label7;

        $r22 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.TimeZone serverTimezoneTZ>;
        $r23 = virtualinvoke $r22.<java.util.TimeZone: java.lang.String getID()>();
        $z5 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>("GMT");
        if $z5 == 0 goto label7;

        $r24 = new java.lang.StringBuffer;
        specialinvoke $r24.<java.lang.StringBuffer: void <init>()>();
        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No timezone mapping entry for \'");
        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);
        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");
        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();
        $r29 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String,java.lang.String)>($r28, "S1009");
        throw $r29;

     label7:
        $r30 = "GMT";
        $r31 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.TimeZone serverTimezoneTZ>;
        $r32 = virtualinvoke $r31.<java.util.TimeZone: java.lang.String getID()>();
        $z6 = virtualinvoke $r30.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r32);
        if $z6 == 0 goto label8;

        r0.<com.mysql.jdbc.ConnectionImpl: boolean isServerTzUTC> = 1;
        goto label9;

     label8:
        r0.<com.mysql.jdbc.ConnectionImpl: boolean isServerTzUTC> = 0;

     label9:
        return;

        catch java.lang.IllegalArgumentException from label2 to label3 with label4;
    }

    private void createInitialHistogram(long[], long, long)
    {
        com.mysql.jdbc.ConnectionImpl r0;
        long[] r1;
        long l0, l1;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6;
        int i2;
        byte $b3;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: long[];
        l0 := @parameter1: long;
        l1 := @parameter2: long;
        $d1 = (double) l1;
        $d2 = (double) l0;
        $d3 = $d1 - $d2;
        $d4 = $d3 / 20.0;
        d0 = $d4 * 1.25;
        $b3 = d0 cmpg 1.0;
        if $b3 >= 0 goto label0;

        d0 = 1.0;

     label0:
        i2 = 0;

     label1:
        if i2 >= 20 goto label2;

        r1[i2] = l0;
        $d5 = (double) l0;
        $d6 = $d5 + d0;
        l0 = (long) $d6;
        i2 = i2 + 1;
        goto label1;

     label2:
        return;
    }

    protected void createNewIO(boolean) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        boolean z0, z1, z2, z3, $z4, $z5, $z6, $z7, z8, $z9, $z10, $z11, $z12, z13, $z14, $z15, $z16, z17, $z18, $z19, $z20, $z21, $z22, $z23, $z25;
        java.lang.Object r1, $r12, $r17, $r59, r97, $r99;
        java.util.Properties r2, $r13;
        long l0, $l8, $l13, $l14, $l23, $l26, $l27;
        java.lang.Exception r3, $r36, r37, r53, $r82, r83;
        int i1, i2, i3, i4, $i5, $i6, $i7, $i9, $i10, $i11, $i12, $i15, i16, $i17, i18, $i19, i20, $i21, $i22, $i24, $i25, $i28, $i29;
        java.lang.String r4, r6, r8, r9, $r14, $r18, $r19, $r23, $r26, $r29, $r32, $r33, $r34, r41, $r42, $r50, $r54, r60, r62, $r63, $r64, $r69, $r72, $r75, $r78, $r79, $r80, $r84, $r90, $r104, $r106, $r108, $r110;
        java.lang.String[] r5, r61;
        java.lang.NumberFormatException r7, $r20, $r65, r66;
        java.lang.Throwable r10, r11, $r101, $r102;
        java.util.List $r15, $r16, $r43, $r55, $r58, $r85;
        java.lang.StringBuffer $r21, $r22, $r24, $r25, $r67, $r68, $r70, $r71;
        java.sql.SQLException $r27, r40, $r49, r51, $r73, r91;
        com.mysql.jdbc.MysqlIO $r28, $r31, $r35, $r38, $r39, $r45, $r46, $r47, $r48, $r56, $r57, $r74, $r77, $r81, $r103, $r105, $r107, $r109;
        com.mysql.jdbc.ConnectionPropertiesImpl$MemorySizeConnectionProperty $r30, $r76;
        double d0;
        java.lang.InterruptedException $r86, r87;
        java.lang.Object[] $r88;
        java.lang.Integer $r89;
        java.util.Map $r93;
        java.util.Collection $r94;
        java.util.Iterator r95;
        java.util.Stack r96, $r98;
        com.mysql.jdbc.ServerPreparedStatement $r100;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        z0 := @parameter0: boolean;
        $r12 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.Object mutex>;
        r1 = $r12;
        entermonitor $r12;

     label0:
        $r13 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Properties props>;
        r2 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.util.Properties exposeAsProperties(java.util.Properties)>($r13);
        l0 = r0.<com.mysql.jdbc.ConnectionImpl: long queriesIssuedFailedOver>;
        r0.<com.mysql.jdbc.ConnectionImpl: long queriesIssuedFailedOver> = 0L;

     label1:
        $z4 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getHighAvailability()>();
        if $z4 != 0 goto label28;

        $z5 = r0.<com.mysql.jdbc.ConnectionImpl: boolean failedOver>;
        if $z5 != 0 goto label28;

        z1 = 0;
        r3 = null;
        i1 = 0;
        $z6 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getRoundRobinLoadBalance()>();
        if $z6 == 0 goto label2;

        $r14 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getURL()>();
        $r15 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.List hostList>;
        i1 = staticinvoke <com.mysql.jdbc.ConnectionImpl: int getNextRoundRobinHostIndex(java.lang.String,java.util.List)>($r14, $r15);

     label2:
        $i5 = r0.<com.mysql.jdbc.ConnectionImpl: int hostListSize>;
        if i1 >= $i5 goto label26;

        if i1 != 0 goto label3;

        r0.<com.mysql.jdbc.ConnectionImpl: boolean hasTriedMasterFlag> = 1;

     label3:
        $r16 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.List hostList>;
        $r17 = interfaceinvoke $r16.<java.util.List: java.lang.Object get(int)>(i1);
        r4 = (java.lang.String) $r17;
        i2 = 3306;
        r5 = staticinvoke <com.mysql.jdbc.NonRegisteringDriver: java.lang.String[] parseHostPortPair(java.lang.String)>(r4);
        r6 = r5[0];
        if r6 == null goto label4;

        $z7 = staticinvoke <com.mysql.jdbc.StringUtils: boolean isEmptyOrWhitespaceOnly(java.lang.String)>(r6);
        if $z7 == 0 goto label5;

     label4:
        r6 = "localhost";

     label5:
        $r18 = r5[1];
        if $r18 == null goto label9;

     label6:
        $r19 = r5[1];
        i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r19);

     label7:
        goto label9;

     label8:
        $r20 := @caughtexception;
        r7 = $r20;
        $r21 = new java.lang.StringBuffer;
        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();
        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal connection port value \'");
        $r23 = r5[1];
        $r24 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r23);
        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");
        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();
        $r27 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String,java.lang.String)>($r26, "01S00");
        throw $r27;

     label9:
        $r28 = new com.mysql.jdbc.MysqlIO;
        $r29 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getSocketFactoryClassName()>();
        $i6 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: int getSocketTimeout()>();
        $r30 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.ConnectionPropertiesImpl$MemorySizeConnectionProperty largeRowSizeThreshold>;
        $i7 = virtualinvoke $r30.<com.mysql.jdbc.ConnectionPropertiesImpl$MemorySizeConnectionProperty: int getValueAsInt()>();
        specialinvoke $r28.<com.mysql.jdbc.MysqlIO: void <init>(java.lang.String,int,java.util.Properties,java.lang.String,com.mysql.jdbc.ConnectionImpl,int,int)>(r6, i2, r2, $r29, r0, $i6, $i7);
        r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io> = $r28;
        $r31 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        $r32 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String user>;
        $r33 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String password>;
        $r34 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String database>;
        virtualinvoke $r31.<com.mysql.jdbc.MysqlIO: void doHandshake(java.lang.String,java.lang.String,java.lang.String)>($r32, $r33, $r34);
        $r35 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        $l8 = virtualinvoke $r35.<com.mysql.jdbc.MysqlIO: long getThreadId()>();
        r0.<com.mysql.jdbc.ConnectionImpl: long connectionId> = $l8;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean isClosed> = 0;
        z8 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getAutoCommit()>();
        i3 = r0.<com.mysql.jdbc.ConnectionImpl: int isolationLevel>;
        z2 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean isReadOnly()>();
        r8 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getCatalog()>();
        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void initializePropsFromServer()>();
        if z0 == 0 goto label11;

        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setAutoCommit(boolean)>(z8);
        $z9 = r0.<com.mysql.jdbc.ConnectionImpl: boolean hasIsolationLevels>;
        if $z9 == 0 goto label10;

        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setTransactionIsolation(int)>(i3);

     label10:
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setCatalog(java.lang.String)>(r8);

     label11:
        if i1 == 0 goto label12;

        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setFailedOverState()>();
        l0 = 0L;
        goto label14;

     label12:
        r0.<com.mysql.jdbc.ConnectionImpl: boolean failedOver> = 0;
        l0 = 0L;
        $i9 = r0.<com.mysql.jdbc.ConnectionImpl: int hostListSize>;
        if $i9 <= 1 goto label13;

        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setReadOnlyInternal(boolean)>(0);
        goto label14;

     label13:
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setReadOnlyInternal(boolean)>(z2);

     label14:
        z1 = 1;

     label15:
        goto label26;

     label16:
        $r36 := @caughtexception;
        r37 = $r36;
        $r38 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        if $r38 == null goto label17;

        $r39 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        virtualinvoke $r39.<com.mysql.jdbc.MysqlIO: void forceClose()>();

     label17:
        r3 = r37;
        z1 = 0;
        $z10 = r37 instanceof java.sql.SQLException;
        if $z10 == 0 goto label19;

        r40 = (java.sql.SQLException) r37;
        r41 = virtualinvoke r40.<java.sql.SQLException: java.lang.String getSQLState()>();
        if r41 == null goto label18;

        $z11 = virtualinvoke r41.<java.lang.String: boolean equals(java.lang.Object)>("08S01");
        if $z11 != 0 goto label19;

     label18:
        throw r40;

     label19:
        $z12 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getRoundRobinLoadBalance()>();
        if $z12 == 0 goto label20;

        $r42 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getURL()>();
        $r43 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.List hostList>;
        $i10 = staticinvoke <com.mysql.jdbc.ConnectionImpl: int getNextRoundRobinHostIndex(java.lang.String,java.util.List)>($r42, $r43);
        i1 = $i10 - 1;
        goto label25;

     label20:
        $i11 = r0.<com.mysql.jdbc.ConnectionImpl: int hostListSize>;
        $i12 = $i11 - 1;
        if $i12 != i1 goto label25;

        $r45 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        if $r45 == null goto label21;

        $r46 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        $l13 = virtualinvoke $r46.<com.mysql.jdbc.MysqlIO: long getLastPacketSentTimeMs()>();
        goto label22;

     label21:
        $l13 = 0L;

     label22:
        $r47 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        if $r47 == null goto label23;

        $r48 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        $l14 = virtualinvoke $r48.<com.mysql.jdbc.MysqlIO: long getLastPacketReceivedTimeMs()>();
        goto label24;

     label23:
        $l14 = 0L;

     label24:
        $r49 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException createCommunicationsException(com.mysql.jdbc.ConnectionImpl,long,long,java.lang.Exception)>(r0, $l13, $l14, r37);
        throw $r49;

     label25:
        i1 = i1 + 1;
        goto label2;

     label26:
        if z1 != 0 goto label27;

        $r50 = staticinvoke <com.mysql.jdbc.Messages: java.lang.String getString(java.lang.String)>("Connection.UnableToConnect");
        r51 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String,java.lang.String)>($r50, "08001");
        virtualinvoke r51.<java.sql.SQLException: java.lang.Throwable initCause(java.lang.Throwable)>(r3);
        throw r51;

     label27:
        goto label55;

     label28:
        $i15 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: int getInitialTimeout()>();
        d0 = (double) $i15;
        z13 = 0;
        r53 = null;
        i16 = 0;
        $z14 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getRoundRobinLoadBalance()>();
        if $z14 == 0 goto label29;

        $r54 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getURL()>();
        $r55 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.List hostList>;
        i16 = staticinvoke <com.mysql.jdbc.ConnectionImpl: int getNextRoundRobinHostIndex(java.lang.String,java.util.List)>($r54, $r55);

     label29:
        $i17 = r0.<com.mysql.jdbc.ConnectionImpl: int hostListSize>;
        if i16 >= $i17 goto label54;

        if z13 != 0 goto label54;

        if i16 != 0 goto label30;

        r0.<com.mysql.jdbc.ConnectionImpl: boolean hasTriedMasterFlag> = 1;

     label30:
        $z15 = r0.<com.mysql.jdbc.ConnectionImpl: boolean preferSlaveDuringFailover>;
        if $z15 == 0 goto label31;

        if i16 != 0 goto label31;

        i16 = i16 + 1;

     label31:
        i18 = 0;

     label32:
        $i19 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: int getMaxReconnects()>();
        if i18 >= $i19 goto label53;

        if z13 != 0 goto label53;

     label33:
        $r56 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        if $r56 == null goto label34;

        $r57 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        virtualinvoke $r57.<com.mysql.jdbc.MysqlIO: void forceClose()>();

     label34:
        $r58 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.List hostList>;
        $r59 = interfaceinvoke $r58.<java.util.List: java.lang.Object get(int)>(i16);
        r60 = (java.lang.String) $r59;
        i20 = 3306;
        r61 = staticinvoke <com.mysql.jdbc.NonRegisteringDriver: java.lang.String[] parseHostPortPair(java.lang.String)>(r60);
        r62 = r61[0];
        if r62 == null goto label35;

        $z16 = staticinvoke <com.mysql.jdbc.StringUtils: boolean isEmptyOrWhitespaceOnly(java.lang.String)>(r62);
        if $z16 == 0 goto label36;

     label35:
        r62 = "localhost";

     label36:
        $r63 = r61[1];
        if $r63 == null goto label40;

     label37:
        $r64 = r61[1];
        i20 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r64);

     label38:
        goto label40;

     label39:
        $r65 := @caughtexception;
        r66 = $r65;
        $r67 = new java.lang.StringBuffer;
        specialinvoke $r67.<java.lang.StringBuffer: void <init>()>();
        $r68 = virtualinvoke $r67.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal connection port value \'");
        $r69 = r61[1];
        $r70 = virtualinvoke $r68.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r69);
        $r71 = virtualinvoke $r70.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");
        $r72 = virtualinvoke $r71.<java.lang.StringBuffer: java.lang.String toString()>();
        $r73 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String,java.lang.String)>($r72, "01S00");
        throw $r73;

     label40:
        $r74 = new com.mysql.jdbc.MysqlIO;
        $r75 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getSocketFactoryClassName()>();
        $i21 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: int getSocketTimeout()>();
        $r76 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.ConnectionPropertiesImpl$MemorySizeConnectionProperty largeRowSizeThreshold>;
        $i22 = virtualinvoke $r76.<com.mysql.jdbc.ConnectionPropertiesImpl$MemorySizeConnectionProperty: int getValueAsInt()>();
        specialinvoke $r74.<com.mysql.jdbc.MysqlIO: void <init>(java.lang.String,int,java.util.Properties,java.lang.String,com.mysql.jdbc.ConnectionImpl,int,int)>(r62, i20, r2, $r75, r0, $i21, $i22);
        r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io> = $r74;
        $r77 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        $r78 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String user>;
        $r79 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String password>;
        $r80 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String database>;
        virtualinvoke $r77.<com.mysql.jdbc.MysqlIO: void doHandshake(java.lang.String,java.lang.String,java.lang.String)>($r78, $r79, $r80);
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void pingInternal(boolean)>(0);
        $r81 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        $l23 = virtualinvoke $r81.<com.mysql.jdbc.MysqlIO: long getThreadId()>();
        r0.<com.mysql.jdbc.ConnectionImpl: long connectionId> = $l23;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean isClosed> = 0;
        z17 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getAutoCommit()>();
        i4 = r0.<com.mysql.jdbc.ConnectionImpl: int isolationLevel>;
        z3 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean isReadOnly()>();
        r9 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getCatalog()>();
        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void initializePropsFromServer()>();
        if z0 == 0 goto label42;

        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setAutoCommit(boolean)>(z17);
        $z18 = r0.<com.mysql.jdbc.ConnectionImpl: boolean hasIsolationLevels>;
        if $z18 == 0 goto label41;

        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setTransactionIsolation(int)>(i4);

     label41:
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setCatalog(java.lang.String)>(r9);

     label42:
        z13 = 1;
        if i16 == 0 goto label43;

        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setFailedOverState()>();
        l0 = 0L;
        goto label45;

     label43:
        r0.<com.mysql.jdbc.ConnectionImpl: boolean failedOver> = 0;
        l0 = 0L;
        $i24 = r0.<com.mysql.jdbc.ConnectionImpl: int hostListSize>;
        if $i24 <= 1 goto label44;

        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setReadOnlyInternal(boolean)>(0);
        goto label45;

     label44:
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setReadOnlyInternal(boolean)>(z3);

     label45:
        goto label53;

     label46:
        $r82 := @caughtexception;
        r83 = $r82;
        r53 = r83;
        z13 = 0;
        $z19 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getRoundRobinLoadBalance()>();
        if $z19 == 0 goto label47;

        $r84 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getURL()>();
        $r85 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.List hostList>;
        $i25 = staticinvoke <com.mysql.jdbc.ConnectionImpl: int getNextRoundRobinHostIndex(java.lang.String,java.util.List)>($r84, $r85);
        i16 = $i25 - 1;

     label47:
        if z13 == 0 goto label48;

        goto label53;

     label48:
        if i18 <= 0 goto label52;

     label49:
        $l26 = (long) d0;
        $l27 = $l26 * 1000L;
        staticinvoke <java.lang.Thread: void sleep(long)>($l27);

     label50:
        goto label52;

     label51:
        $r86 := @caughtexception;
        r87 = $r86;

     label52:
        i18 = i18 + 1;
        goto label32;

     label53:
        i16 = i16 + 1;
        goto label29;

     label54:
        if z13 != 0 goto label55;

        $r88 = newarray (java.lang.Object)[1];
        $r89 = new java.lang.Integer;
        $i28 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: int getMaxReconnects()>();
        specialinvoke $r89.<java.lang.Integer: void <init>(int)>($i28);
        $r88[0] = $r89;
        $r90 = staticinvoke <com.mysql.jdbc.Messages: java.lang.String getString(java.lang.String,java.lang.Object[])>("Connection.UnableToConnectWithRetries", $r88);
        r91 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String,java.lang.String)>($r90, "08001");
        virtualinvoke r91.<java.sql.SQLException: java.lang.Throwable initCause(java.lang.Throwable)>(r53);
        throw r91;

     label55:
        $z20 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getParanoid()>();
        if $z20 == 0 goto label56;

        $z21 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getHighAvailability()>();
        if $z21 != 0 goto label56;

        $i29 = r0.<com.mysql.jdbc.ConnectionImpl: int hostListSize>;
        if $i29 > 1 goto label56;

        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String password> = null;
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String user> = null;

     label56:
        if z0 == 0 goto label62;

        $r93 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map openStatements>;
        $r94 = interfaceinvoke $r93.<java.util.Map: java.util.Collection values()>();
        r95 = interfaceinvoke $r94.<java.util.Collection: java.util.Iterator iterator()>();
        r96 = null;

     label57:
        $z22 = interfaceinvoke r95.<java.util.Iterator: boolean hasNext()>();
        if $z22 == 0 goto label60;

        r97 = interfaceinvoke r95.<java.util.Iterator: java.lang.Object next()>();
        $z23 = r97 instanceof com.mysql.jdbc.ServerPreparedStatement;
        if $z23 == 0 goto label59;

        if r96 != null goto label58;

        $r98 = new java.util.Stack;
        specialinvoke $r98.<java.util.Stack: void <init>()>();
        r96 = $r98;

     label58:
        virtualinvoke r96.<java.util.Stack: boolean add(java.lang.Object)>(r97);

     label59:
        goto label57;

     label60:
        if r96 == null goto label62;

     label61:
        $z25 = virtualinvoke r96.<java.util.Stack: boolean isEmpty()>();
        if $z25 != 0 goto label62;

        $r99 = virtualinvoke r96.<java.util.Stack: java.lang.Object pop()>();
        $r100 = (com.mysql.jdbc.ServerPreparedStatement) $r99;
        virtualinvoke $r100.<com.mysql.jdbc.ServerPreparedStatement: void rePrepare()>();
        goto label61;

     label62:
        goto label73;

     label63:
        goto label67;

     label64:
        $r101 := @caughtexception;

     label65:
        r10 = $r101;
        goto label75;

     label66:
        throw r10;

     label67:
        exitmonitor r1;

     label68:
        goto label72;

     label69:
        $r102 := @caughtexception;

     label70:
        r11 = $r102;
        exitmonitor r1;

     label71:
        throw r11;

     label72:
        return;

     label73:
        r0.<com.mysql.jdbc.ConnectionImpl: long queriesIssuedFailedOver> = l0;
        $r103 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        if $r103 == null goto label74;

        $r104 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getStatementInterceptors()>();
        if $r104 == null goto label74;

        $r105 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        $r106 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getStatementInterceptors()>();
        virtualinvoke $r105.<com.mysql.jdbc.MysqlIO: void initializeStatementInterceptors(java.lang.String,java.util.Properties)>($r106, r2);

     label74:
        goto label63;

     label75:
        r0.<com.mysql.jdbc.ConnectionImpl: long queriesIssuedFailedOver> = l0;
        $r107 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        if $r107 == null goto label76;

        $r108 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getStatementInterceptors()>();
        if $r108 == null goto label76;

        $r109 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        $r110 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getStatementInterceptors()>();
        virtualinvoke $r109.<com.mysql.jdbc.MysqlIO: void initializeStatementInterceptors(java.lang.String,java.util.Properties)>($r110, r2);

     label76:
        goto label66;

        catch java.lang.NumberFormatException from label6 to label7 with label8;
        catch java.lang.Exception from label3 to label15 with label16;
        catch java.lang.NumberFormatException from label37 to label38 with label39;
        catch java.lang.Exception from label33 to label45 with label46;
        catch java.lang.InterruptedException from label49 to label50 with label51;
        catch java.lang.Throwable from label1 to label63 with label64;
        catch java.lang.Throwable from label65 to label66 with label64;
        catch java.lang.Throwable from label0 to label68 with label69;
        catch java.lang.Throwable from label70 to label71 with label69;
        catch java.lang.Throwable from label73 to label75 with label69;
        catch java.lang.Throwable from label75 to label76 with label69;
    }

    private void createPreparedStatementCaches()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        int i0;
        java.util.HashMap $r1;
        boolean $z0;
        com.mysql.jdbc.util.LRUCache $r2;
        com.mysql.jdbc.ConnectionImpl$3 $r3;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        i0 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: int getPreparedStatementCacheSize()>();
        $r1 = new java.util.HashMap;
        specialinvoke $r1.<java.util.HashMap: void <init>(int)>(i0);
        r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map cachedPreparedStatementParams> = $r1;
        $z0 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getUseServerPreparedStmts()>();
        if $z0 == 0 goto label0;

        $r2 = new com.mysql.jdbc.util.LRUCache;
        specialinvoke $r2.<com.mysql.jdbc.util.LRUCache: void <init>(int)>(i0);
        r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.util.LRUCache serverSideStatementCheckCache> = $r2;
        $r3 = new com.mysql.jdbc.ConnectionImpl$3;
        specialinvoke $r3.<com.mysql.jdbc.ConnectionImpl$3: void <init>(com.mysql.jdbc.ConnectionImpl,int)>(r0, i0);
        r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.util.LRUCache serverSideStatementCache> = $r3;

     label0:
        return;
    }

    public java.sql.Statement createStatement() throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.sql.Statement $r1;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $r1 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.sql.Statement createStatement(int,int)>(1003, 1007);
        return $r1;
    }

    public java.sql.Statement createStatement(int, int) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        int i0, i1;
        com.mysql.jdbc.StatementImpl r1, $r2;
        java.lang.String $r3;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void checkClosed()>();
        $r2 = new com.mysql.jdbc.StatementImpl;
        $r3 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String database>;
        specialinvoke $r2.<com.mysql.jdbc.StatementImpl: void <init>(com.mysql.jdbc.ConnectionImpl,java.lang.String)>(r0, $r3);
        r1 = $r2;
        virtualinvoke r1.<com.mysql.jdbc.StatementImpl: void setResultSetType(int)>(i0);
        virtualinvoke r1.<com.mysql.jdbc.StatementImpl: void setResultSetConcurrency(int)>(i1);
        return r1;
    }

    public java.sql.Statement createStatement(int, int, int) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        int i0, i1, i2;
        boolean $z0;
        java.sql.SQLException $r1;
        java.sql.Statement $r2;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        $z0 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getPedantic()>();
        if $z0 == 0 goto label0;

        if i2 == 1 goto label0;

        $r1 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String,java.lang.String)>("HOLD_CUSRORS_OVER_COMMIT is only supported holdability level", "S1009");
        throw $r1;

     label0:
        $r2 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.sql.Statement createStatement(int,int)>(i0, i1);
        return $r2;
    }

    protected void dumpTestcaseQuery(java.lang.String)
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1;
        java.io.PrintStream $r2;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.lang.String;
        $r2 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>(r1);
        return;
    }

    protected com.mysql.jdbc.Connection duplicate() throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0, $r1;
        java.lang.String $r2, $r4, $r5;
        int $i0;
        java.util.Properties $r3;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $r1 = new com.mysql.jdbc.ConnectionImpl;
        $r2 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String origHostToConnectTo>;
        $i0 = r0.<com.mysql.jdbc.ConnectionImpl: int origPortToConnectTo>;
        $r3 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Properties props>;
        $r4 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String origDatabaseToConnectTo>;
        $r5 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String myURL>;
        specialinvoke $r1.<com.mysql.jdbc.ConnectionImpl: void <init>(java.lang.String,int,java.util.Properties,java.lang.String,java.lang.String)>($r2, $i0, $r3, $r4, $r5);
        return $r1;
    }

    com.mysql.jdbc.ResultSetInternalMethods execSQL(com.mysql.jdbc.StatementImpl, java.lang.String, int, com.mysql.jdbc.Buffer, int, int, boolean, java.lang.String, com.mysql.jdbc.Field[]) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        com.mysql.jdbc.StatementImpl r1;
        java.lang.String r2, r4;
        int i0, i1, i2;
        com.mysql.jdbc.Buffer r3;
        boolean z0;
        com.mysql.jdbc.Field[] r5;
        com.mysql.jdbc.ResultSetInternalMethods $r6;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: com.mysql.jdbc.StatementImpl;
        r2 := @parameter1: java.lang.String;
        i0 := @parameter2: int;
        r3 := @parameter3: com.mysql.jdbc.Buffer;
        i1 := @parameter4: int;
        i2 := @parameter5: int;
        z0 := @parameter6: boolean;
        r4 := @parameter7: java.lang.String;
        r5 := @parameter8: com.mysql.jdbc.Field[];
        $r6 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.ResultSetInternalMethods execSQL(com.mysql.jdbc.StatementImpl,java.lang.String,int,com.mysql.jdbc.Buffer,int,int,boolean,java.lang.String,com.mysql.jdbc.Field[],boolean)>(r1, r2, i0, r3, i1, i2, z0, r4, r5, 0);
        return $r6;
    }

    com.mysql.jdbc.ResultSetInternalMethods execSQL(com.mysql.jdbc.StatementImpl, java.lang.String, int, com.mysql.jdbc.Buffer, int, int, boolean, java.lang.String, com.mysql.jdbc.Field[], boolean) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        com.mysql.jdbc.StatementImpl r1;
        java.lang.String r2, r4, r7, r19, r26, $r30, r31, $r34;
        int i0, i1, i2, i4, $i6, $i7;
        com.mysql.jdbc.Buffer r3;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29;
        com.mysql.jdbc.Field[] r5;
        java.lang.Object r6, $r12, $r15;
        long l3, l5, $l8, $l9, $l10, $l11, $l12, $l13, $l14, $l15, l16, $l17, $l18, $l19, $l20, l21;
        java.lang.Throwable r8, r10, r11, $r16, $r37, $r38;
        java.lang.StringBuffer r9, $r27;
        com.mysql.jdbc.MysqlIO $r13, $r20, $r22;
        java.util.List $r14;
        java.lang.Exception $r17, r18, $r32, r33;
        com.mysql.jdbc.ResultSetInternalMethods r21, r23;
        java.sql.SQLException $r24, r25, r35;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: com.mysql.jdbc.StatementImpl;
        r2 := @parameter1: java.lang.String;
        i0 := @parameter2: int;
        r3 := @parameter3: com.mysql.jdbc.Buffer;
        i1 := @parameter4: int;
        i2 := @parameter5: int;
        z0 := @parameter6: boolean;
        r4 := @parameter7: java.lang.String;
        r5 := @parameter8: com.mysql.jdbc.Field[];
        z1 := @parameter9: boolean;
        $r12 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.Object mutex>;
        r6 = $r12;
        entermonitor $r12;

     label0:
        l3 = 0L;
        i4 = 0;
        if r3 == null goto label1;

        i4 = virtualinvoke r3.<com.mysql.jdbc.Buffer: int getPosition()>();

     label1:
        $z2 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getGatherPerformanceMetrics()>();
        if $z2 == 0 goto label2;

        l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label2:
        r0.<com.mysql.jdbc.ConnectionImpl: long lastQueryFinishedTime> = 0L;
        $z3 = r0.<com.mysql.jdbc.ConnectionImpl: boolean failedOver>;
        if $z3 == 0 goto label8;

        $z4 = r0.<com.mysql.jdbc.ConnectionImpl: boolean autoCommit>;
        if $z4 == 0 goto label8;

        if z1 != 0 goto label8;

        $z5 = specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean shouldFallBack()>();
        if $z5 == 0 goto label8;

        $z6 = r0.<com.mysql.jdbc.ConnectionImpl: boolean executingFailoverReconnect>;
        if $z6 != 0 goto label8;

     label3:
        r0.<com.mysql.jdbc.ConnectionImpl: boolean executingFailoverReconnect> = 1;
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void createNewIO(boolean)>(1);
        $r13 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        r7 = virtualinvoke $r13.<com.mysql.jdbc.MysqlIO: java.lang.String getHost()>();
        if r7 == null goto label4;

        $r14 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.List hostList>;
        $r15 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>(0);
        $z7 = virtualinvoke $r15.<java.lang.Object: boolean equals(java.lang.Object)>(r7);
        if $z7 == 0 goto label4;

        r0.<com.mysql.jdbc.ConnectionImpl: boolean failedOver> = 0;
        r0.<com.mysql.jdbc.ConnectionImpl: long queriesIssuedFailedOver> = 0L;
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setReadOnlyInternal(boolean)>(0);

     label4:
        r0.<com.mysql.jdbc.ConnectionImpl: boolean executingFailoverReconnect> = 0;
        goto label8;

     label5:
        $r16 := @caughtexception;

     label6:
        r8 = $r16;

     label7:
        r0.<com.mysql.jdbc.ConnectionImpl: boolean executingFailoverReconnect> = 0;
        throw r8;

     label8:
        $z8 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getHighAvailability()>();
        if $z8 != 0 goto label9;

        $z9 = r0.<com.mysql.jdbc.ConnectionImpl: boolean failedOver>;
        if $z9 == 0 goto label14;

     label9:
        $z10 = r0.<com.mysql.jdbc.ConnectionImpl: boolean autoCommit>;
        if $z10 != 0 goto label10;

        $z11 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getAutoReconnectForPools()>();
        if $z11 == 0 goto label14;

     label10:
        $z12 = r0.<com.mysql.jdbc.ConnectionImpl: boolean needsPing>;
        if $z12 == 0 goto label14;

        if z1 != 0 goto label14;

     label11:
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void pingInternal(boolean)>(0);
        r0.<com.mysql.jdbc.ConnectionImpl: boolean needsPing> = 0;

     label12:
        goto label14;

     label13:
        $r17 := @caughtexception;
        r18 = $r17;
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void createNewIO(boolean)>(1);

     label14:
        if r3 != null goto label18;

        r19 = null;
        $z13 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getUseUnicode()>();
        if $z13 == 0 goto label15;

        r19 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getEncoding()>();

     label15:
        $r20 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        r21 = virtualinvoke $r20.<com.mysql.jdbc.MysqlIO: com.mysql.jdbc.ResultSetInternalMethods sqlQueryDirect(com.mysql.jdbc.StatementImpl,java.lang.String,java.lang.String,com.mysql.jdbc.Buffer,int,int,int,boolean,java.lang.String,com.mysql.jdbc.Field[])>(r1, r2, r19, null, i0, i1, i2, z0, r4, r5);
        goto label35;

     label16:
        exitmonitor r6;

     label17:
        return r21;

     label18:
        $r22 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        r23 = virtualinvoke $r22.<com.mysql.jdbc.MysqlIO: com.mysql.jdbc.ResultSetInternalMethods sqlQueryDirect(com.mysql.jdbc.StatementImpl,java.lang.String,java.lang.String,com.mysql.jdbc.Buffer,int,int,int,boolean,java.lang.String,com.mysql.jdbc.Field[])>(r1, null, null, r3, i0, i1, i2, z0, r4, r5);
        goto label39;

     label19:
        exitmonitor r6;

     label20:
        return r23;

     label21:
        $r24 := @caughtexception;

     label22:
        r25 = $r24;
        $z14 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getDumpQueriesOnException()>();
        if $z14 == 0 goto label23;

        r26 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String extractSqlFromPacket(java.lang.String,com.mysql.jdbc.Buffer,int)>(r2, r3, i4);
        $r27 = new java.lang.StringBuffer;
        $i6 = virtualinvoke r26.<java.lang.String: int length()>();
        $i7 = $i6 + 32;
        specialinvoke $r27.<java.lang.StringBuffer: void <init>(int)>($i7);
        r9 = $r27;
        virtualinvoke r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\nQuery being executed when exception was thrown:\n\n");
        virtualinvoke r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r26);
        $r30 = virtualinvoke r9.<java.lang.StringBuffer: java.lang.String toString()>();
        r25 = staticinvoke <com.mysql.jdbc.ConnectionImpl: java.sql.SQLException appendMessageToException(java.sql.SQLException,java.lang.String)>(r25, $r30);

     label23:
        $z15 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getHighAvailability()>();
        if $z15 != 0 goto label24;

        $z16 = r0.<com.mysql.jdbc.ConnectionImpl: boolean failedOver>;
        if $z16 == 0 goto label25;

     label24:
        r0.<com.mysql.jdbc.ConnectionImpl: boolean needsPing> = 1;
        goto label26;

     label25:
        r31 = virtualinvoke r25.<java.sql.SQLException: java.lang.String getSQLState()>();
        if r31 == null goto label26;

        $z17 = virtualinvoke r31.<java.lang.String: boolean equals(java.lang.Object)>("08S01");
        if $z17 == 0 goto label26;

        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void cleanup(java.lang.Throwable)>(r25);

     label26:
        throw r25;

     label27:
        $r32 := @caughtexception;
        r33 = $r32;
        $z18 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getHighAvailability()>();
        if $z18 != 0 goto label28;

        $z19 = r0.<com.mysql.jdbc.ConnectionImpl: boolean failedOver>;
        if $z19 == 0 goto label29;

     label28:
        r0.<com.mysql.jdbc.ConnectionImpl: boolean needsPing> = 1;
        goto label30;

     label29:
        $z20 = r33 instanceof java.io.IOException;
        if $z20 == 0 goto label30;

        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void cleanup(java.lang.Throwable)>(r33);

     label30:
        $r34 = staticinvoke <com.mysql.jdbc.Messages: java.lang.String getString(java.lang.String)>("Connection.UnexpectedException");
        r35 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String,java.lang.String)>($r34, "S1000");
        virtualinvoke r35.<java.sql.SQLException: java.lang.Throwable initCause(java.lang.Throwable)>(r33);
        throw r35;

     label31:
        $r37 := @caughtexception;
        r10 = $r37;
        goto label43;

     label32:
        throw r10;

     label33:
        $r38 := @caughtexception;
        r11 = $r38;
        exitmonitor r6;

     label34:
        throw r11;

     label35:
        $z21 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getMaintainTimeStats()>();
        if $z21 == 0 goto label36;

        $l8 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        r0.<com.mysql.jdbc.ConnectionImpl: long lastQueryFinishedTime> = $l8;

     label36:
        $z22 = r0.<com.mysql.jdbc.ConnectionImpl: boolean failedOver>;
        if $z22 == 0 goto label37;

        $l9 = r0.<com.mysql.jdbc.ConnectionImpl: long queriesIssuedFailedOver>;
        $l10 = $l9 + 1L;
        r0.<com.mysql.jdbc.ConnectionImpl: long queriesIssuedFailedOver> = $l10;

     label37:
        $z23 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getGatherPerformanceMetrics()>();
        if $z23 == 0 goto label38;

        $l11 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        l5 = $l11 - l3;
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void registerQueryExecutionTime(long)>(l5);

     label38:
        goto label16;

     label39:
        $z24 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getMaintainTimeStats()>();
        if $z24 == 0 goto label40;

        $l12 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        r0.<com.mysql.jdbc.ConnectionImpl: long lastQueryFinishedTime> = $l12;

     label40:
        $z25 = r0.<com.mysql.jdbc.ConnectionImpl: boolean failedOver>;
        if $z25 == 0 goto label41;

        $l13 = r0.<com.mysql.jdbc.ConnectionImpl: long queriesIssuedFailedOver>;
        $l14 = $l13 + 1L;
        r0.<com.mysql.jdbc.ConnectionImpl: long queriesIssuedFailedOver> = $l14;

     label41:
        $z26 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getGatherPerformanceMetrics()>();
        if $z26 == 0 goto label42;

        $l15 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        l16 = $l15 - l3;
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void registerQueryExecutionTime(long)>(l16);

     label42:
        goto label19;

     label43:
        $z27 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getMaintainTimeStats()>();
        if $z27 == 0 goto label44;

        $l17 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        r0.<com.mysql.jdbc.ConnectionImpl: long lastQueryFinishedTime> = $l17;

     label44:
        $z28 = r0.<com.mysql.jdbc.ConnectionImpl: boolean failedOver>;
        if $z28 == 0 goto label45;

        $l18 = r0.<com.mysql.jdbc.ConnectionImpl: long queriesIssuedFailedOver>;
        $l19 = $l18 + 1L;
        r0.<com.mysql.jdbc.ConnectionImpl: long queriesIssuedFailedOver> = $l19;

     label45:
        $z29 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getGatherPerformanceMetrics()>();
        if $z29 == 0 goto label46;

        $l20 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        l21 = $l20 - l3;
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void registerQueryExecutionTime(long)>(l21);

     label46:
        goto label32;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
        catch java.lang.Exception from label11 to label12 with label13;
        catch java.sql.SQLException from label14 to label16 with label21;
        catch java.sql.SQLException from label18 to label19 with label21;
        catch java.lang.Exception from label14 to label16 with label27;
        catch java.lang.Exception from label18 to label19 with label27;
        catch java.lang.Throwable from label14 to label16 with label31;
        catch java.lang.Throwable from label18 to label19 with label31;
        catch java.lang.Throwable from label22 to label32 with label31;
        catch java.lang.Throwable from label0 to label17 with label33;
        catch java.lang.Throwable from label18 to label20 with label33;
        catch java.lang.Throwable from label22 to label34 with label33;
        catch java.lang.Throwable from label35 to label39 with label33;
        catch java.lang.Throwable from label39 to label43 with label33;
        catch java.lang.Throwable from label43 to label46 with label33;
    }

    protected java.lang.String extractSqlFromPacket(java.lang.String, com.mysql.jdbc.Buffer, int) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1, r3, $r6, $r7, $r9, $r13;
        com.mysql.jdbc.Buffer r2;
        int i0, $i1, $i2, $i3, i4, $i5, $i6;
        java.lang.StringBuffer r4, $r5, $r11, $r12, $r14;
        boolean z0;
        byte[] $r10;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: com.mysql.jdbc.Buffer;
        i0 := @parameter2: int;
        r3 = null;
        if r1 == null goto label1;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();
        $i2 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: int getMaxQuerySizeToLog()>();
        if $i1 <= $i2 goto label0;

        $r5 = new java.lang.StringBuffer;
        $i3 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: int getMaxQuerySizeToLog()>();
        $r6 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);
        specialinvoke $r5.<java.lang.StringBuffer: void <init>(java.lang.String)>($r6);
        r4 = $r5;
        $r7 = staticinvoke <com.mysql.jdbc.Messages: java.lang.String getString(java.lang.String)>("MysqlIO.25");
        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);
        r3 = virtualinvoke r4.<java.lang.StringBuffer: java.lang.String toString()>();
        goto label1;

     label0:
        r3 = r1;

     label1:
        if r3 != null goto label3;

        i4 = i0;
        z0 = 0;
        $i5 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: int getMaxQuerySizeToLog()>();
        if i0 <= $i5 goto label2;

        i4 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: int getMaxQuerySizeToLog()>();
        z0 = 1;

     label2:
        $r9 = new java.lang.String;
        $r10 = virtualinvoke r2.<com.mysql.jdbc.Buffer: byte[] getByteBuffer()>();
        $i6 = i4 - 5;
        specialinvoke $r9.<java.lang.String: void <init>(byte[],int,int)>($r10, 5, $i6);
        r3 = $r9;
        if z0 == 0 goto label3;

        $r11 = new java.lang.StringBuffer;
        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();
        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);
        $r13 = staticinvoke <com.mysql.jdbc.Messages: java.lang.String getString(java.lang.String)>("MysqlIO.25");
        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);
        r3 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

     label3:
        return r3;
    }

    protected void finalize() throws java.lang.Throwable
    {
        com.mysql.jdbc.ConnectionImpl r0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void cleanup(java.lang.Throwable)>(null);
        specialinvoke r0.<java.lang.Object: void finalize()>();
        return;
    }

    protected java.lang.StringBuffer generateConnectionCommentBlock(java.lang.StringBuffer)
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.StringBuffer r1;
        long $l0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.lang.StringBuffer;
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/* conn id ");
        $l0 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: long getId()>();
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l0);
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" */ ");
        return r1;
    }

    public int getActiveStatementCount()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.util.Map r1, $r3, $r4, $r5;
        java.lang.Throwable r2, $r6;
        int $i0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $r3 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map openStatements>;
        if $r3 == null goto label5;

        $r4 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map openStatements>;
        r1 = $r4;
        entermonitor $r4;

     label0:
        $r5 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map openStatements>;
        $i0 = interfaceinvoke $r5.<java.util.Map: int size()>();
        exitmonitor r1;

     label1:
        return $i0;

     label2:
        $r6 := @caughtexception;

     label3:
        r2 = $r6;
        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return 0;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public boolean getAutoCommit() throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        boolean $z0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $z0 = r0.<com.mysql.jdbc.ConnectionImpl: boolean autoCommit>;
        return $z0;
    }

    protected java.util.Calendar getCalendarInstanceForSessionOrNew()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        boolean $z0;
        java.util.Calendar $r1, $r2;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $z0 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getDynamicCalendars()>();
        if $z0 == 0 goto label0;

        $r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();
        return $r1;

     label0:
        $r2 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.util.Calendar getSessionLockedCalendar()>();
        return $r2;
    }

    public java.lang.String getCatalog() throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String $r1;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $r1 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String database>;
        return $r1;
    }

    protected java.lang.String getCharacterSetMetadata()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String $r1;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $r1 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String characterSetMetadata>;
        return $r1;
    }

    com.mysql.jdbc.SingleByteCharsetConverter getCharsetConverter(java.lang.String) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1;
        null_type n0, $n1;
        java.util.Map r2, $r7, $r8, $r11, $r13, $r16;
        java.lang.Object r3, $r4, $r9, $r17;
        java.io.UnsupportedEncodingException r5, $r15;
        java.lang.Throwable r6, $r19;
        boolean $z0;
        com.mysql.jdbc.SingleByteCharsetConverter r10;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.lang.String;
        if r1 != null goto label0;

        return null;

     label0:
        $z0 = r0.<com.mysql.jdbc.ConnectionImpl: boolean usePlatformCharsetConverters>;
        if $z0 == 0 goto label1;

        return null;

     label1:
        n0 = null;
        $r7 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map charsetConverterMap>;
        r2 = $r7;
        entermonitor $r7;

     label2:
        $r8 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map charsetConverterMap>;
        r3 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);
        $r9 = <com.mysql.jdbc.ConnectionImpl: java.lang.Object CHARSET_CONVERTER_NOT_AVAILABLE_MARKER>;
        if r3 != $r9 goto label4;

        $n1 = null;
        exitmonitor r2;

     label3:
        return $n1;

     label4:
        r10 = (com.mysql.jdbc.SingleByteCharsetConverter) r3;
        if r10 != null goto label9;

     label5:
        r10 = staticinvoke <com.mysql.jdbc.SingleByteCharsetConverter: com.mysql.jdbc.SingleByteCharsetConverter getInstance(java.lang.String,com.mysql.jdbc.Connection)>(r1, r0);
        if r10 != null goto label6;

        $r11 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map charsetConverterMap>;
        $r4 = <com.mysql.jdbc.ConnectionImpl: java.lang.Object CHARSET_CONVERTER_NOT_AVAILABLE_MARKER>;
        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);
        goto label7;

     label6:
        $r13 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map charsetConverterMap>;
        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r10);

     label7:
        goto label9;

     label8:
        $r15 := @caughtexception;
        r5 = $r15;
        $r16 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map charsetConverterMap>;
        $r17 = <com.mysql.jdbc.ConnectionImpl: java.lang.Object CHARSET_CONVERTER_NOT_AVAILABLE_MARKER>;
        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r17);
        r10 = null;

     label9:
        exitmonitor r2;

     label10:
        goto label14;

     label11:
        $r19 := @caughtexception;

     label12:
        r6 = $r19;
        exitmonitor r2;

     label13:
        throw r6;

     label14:
        return r10;

        catch java.io.UnsupportedEncodingException from label5 to label7 with label8;
        catch java.lang.Throwable from label2 to label3 with label11;
        catch java.lang.Throwable from label4 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    protected java.lang.String getCharsetNameForIndex(int) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        int i0;
        null_type n0;
        java.lang.ArrayIndexOutOfBoundsException r1, $r8;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r2, r4, $r5, $r6, $r7, $r13;
        java.lang.String[] $r3;
        java.lang.StringBuffer $r9, $r10, $r11, $r12;
        java.sql.SQLException $r14;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        i0 := @parameter0: int;
        n0 = null;
        $z0 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getUseOldUTF8Behavior()>();
        if $z0 == 0 goto label0;

        $r2 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getEncoding()>();
        return $r2;

     label0:
        if i0 == -1 goto label6;

     label1:
        $r3 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String[] indexToCharsetMapping>;
        r4 = $r3[i0];
        $r5 = "sjis";
        $z1 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);
        if $z1 != 0 goto label2;

        $r6 = "MS932";
        $z2 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);
        if $z2 == 0 goto label3;

     label2:
        $r7 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getEncoding()>();
        $z3 = staticinvoke <com.mysql.jdbc.CharsetMapping: boolean isAliasForSjis(java.lang.String)>($r7);
        if $z3 == 0 goto label3;

        r4 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getEncoding()>();

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;
        r1 = $r8;
        $r9 = new java.lang.StringBuffer;
        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();
        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown character set index for field \'");
        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);
        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' received from server.");
        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();
        $r14 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String,java.lang.String)>($r13, "S1000");
        throw $r14;

     label5:
        if r4 != null goto label7;

        r4 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getEncoding()>();
        goto label7;

     label6:
        r4 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getEncoding()>();

     label7:
        return r4;

        catch java.lang.ArrayIndexOutOfBoundsException from label1 to label3 with label4;
    }

    protected java.util.TimeZone getDefaultTimeZone()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.util.TimeZone $r1;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $r1 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.TimeZone defaultTimeZone>;
        return $r1;
    }

    protected java.lang.String getErrorMessageEncoding()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String $r1;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $r1 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String errorMessageEncoding>;
        return $r1;
    }

    public int getHoldability() throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        return 2;
    }

    long getId()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        long $l0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $l0 = r0.<com.mysql.jdbc.ConnectionImpl: long connectionId>;
        return $l0;
    }

    public long getIdleFor()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        long l0, l1, $l2, $l4;
        byte $b3;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $l2 = r0.<com.mysql.jdbc.ConnectionImpl: long lastQueryFinishedTime>;
        $b3 = $l2 cmp 0L;
        if $b3 != 0 goto label0;

        return 0L;

     label0:
        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        $l4 = r0.<com.mysql.jdbc.ConnectionImpl: long lastQueryFinishedTime>;
        l1 = l0 - $l4;
        return l1;
    }

    protected com.mysql.jdbc.MysqlIO getIO() throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        com.mysql.jdbc.MysqlIO $r1, $r3;
        boolean $z0;
        java.sql.SQLException $r2;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $r1 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        if $r1 == null goto label0;

        $z0 = r0.<com.mysql.jdbc.ConnectionImpl: boolean isClosed>;
        if $z0 == 0 goto label1;

     label0:
        $r2 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String,java.lang.String)>("Operation not allowed on closed connection", "08003");
        throw $r2;

     label1:
        $r3 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        return $r3;
    }

    public com.mysql.jdbc.log.Log getLog() throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        com.mysql.jdbc.log.Log $r1;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $r1 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.log.Log log>;
        return $r1;
    }

    int getMaxAllowedPacket()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        int $i0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $i0 = r0.<com.mysql.jdbc.ConnectionImpl: int maxAllowedPacket>;
        return $i0;
    }

    protected int getMaxBytesPerChar(java.lang.String) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1, r2, $r12;
        null_type n0, n1, n2, n3, n4;
        java.util.Map r3, r8, $r9, $r10, $r11;
        java.sql.Statement r4;
        java.sql.ResultSet r5;
        java.lang.Throwable r6, r7, $r15, $r16;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1;
        java.lang.Integer $r13, r18;
        java.lang.Object $r17;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.lang.String;
        r2 = staticinvoke <com.mysql.jdbc.CharsetMapping: java.lang.String getMysqlEncodingForJavaEncoding(java.lang.String,com.mysql.jdbc.Connection)>(r1, r0);
        $z0 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean versionMeetsMinimum(int,int,int)>(4, 1, 0);
        if $z0 == 0 goto label16;

        n0 = null;
        $z1 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getUseDynamicCharsetInfo()>();
        if $z1 != 0 goto label0;

        r8 = <com.mysql.jdbc.CharsetMapping: java.util.Map STATIC_CHARSET_TO_NUM_BYTES_MAP>;
        goto label14;

     label0:
        r8 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map charsetToNumBytesMap>;
        $r9 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map charsetToNumBytesMap>;
        r3 = $r9;
        entermonitor $r9;

     label1:
        $r10 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map charsetToNumBytesMap>;
        $z2 = interfaceinvoke $r10.<java.util.Map: boolean isEmpty()>();
        if $z2 == 0 goto label9;

        r4 = null;
        r5 = null;

     label2:
        r4 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.sql.Statement getMetadataSafeStatement()>();
        r5 = interfaceinvoke r4.<java.sql.Statement: java.sql.ResultSet executeQuery(java.lang.String)>("SHOW CHARACTER SET");

     label3:
        $z3 = interfaceinvoke r5.<java.sql.ResultSet: boolean next()>();
        if $z3 == 0 goto label4;

        $r11 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map charsetToNumBytesMap>;
        $r12 = interfaceinvoke r5.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("Charset");
        $i0 = interfaceinvoke r5.<java.sql.ResultSet: int getInt(java.lang.String)>("Maxlen");
        $r13 = staticinvoke <com.mysql.jdbc.Constants: java.lang.Integer integerValueOf(int)>($i0);
        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r13);
        goto label3;

     label4:
        interfaceinvoke r5.<java.sql.ResultSet: void close()>();
        r5 = null;
        interfaceinvoke r4.<java.sql.Statement: void close()>();
        r4 = null;
        goto label17;

     label5:
        goto label9;

     label6:
        $r15 := @caughtexception;

     label7:
        r6 = $r15;
        goto label20;

     label8:
        throw r6;

     label9:
        exitmonitor r3;

     label10:
        goto label14;

     label11:
        $r16 := @caughtexception;

     label12:
        r7 = $r16;
        exitmonitor r3;

     label13:
        throw r7;

     label14:
        $r17 = interfaceinvoke r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);
        r18 = (java.lang.Integer) $r17;
        if r18 == null goto label15;

        $i1 = virtualinvoke r18.<java.lang.Integer: int intValue()>();
        return $i1;

     label15:
        return 1;

     label16:
        return 1;

     label17:
        if r5 == null goto label18;

        interfaceinvoke r5.<java.sql.ResultSet: void close()>();
        n1 = null;

     label18:
        if r4 == null goto label19;

        interfaceinvoke r4.<java.sql.Statement: void close()>();
        n2 = null;

     label19:
        goto label5;

     label20:
        if r5 == null goto label21;

        interfaceinvoke r5.<java.sql.ResultSet: void close()>();
        n3 = null;

     label21:
        if r4 == null goto label22;

        interfaceinvoke r4.<java.sql.Statement: void close()>();
        n4 = null;

     label22:
        goto label8;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
        catch java.lang.Throwable from label1 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.lang.Throwable from label17 to label20 with label11;
        catch java.lang.Throwable from label20 to label22 with label11;
    }

    public java.sql.DatabaseMetaData getMetaData() throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.sql.DatabaseMetaData $r1;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $r1 = specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.sql.DatabaseMetaData getMetaData(boolean,boolean)>(1, 1);
        return $r1;
    }

    private java.sql.DatabaseMetaData getMetaData(boolean, boolean) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        boolean z0, z1;
        java.lang.String $r1;
        com.mysql.jdbc.DatabaseMetaData $r2;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        z0 := @parameter0: boolean;
        z1 := @parameter1: boolean;
        if z0 == 0 goto label0;

        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void checkClosed()>();

     label0:
        $r1 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String database>;
        $r2 = staticinvoke <com.mysql.jdbc.DatabaseMetaData: com.mysql.jdbc.DatabaseMetaData getInstance(com.mysql.jdbc.ConnectionImpl,java.lang.String,boolean)>(r0, $r1, z1);
        return $r2;
    }

    protected java.sql.Statement getMetadataSafeStatement() throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.sql.Statement r1;
        int $i0, $i1;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.sql.Statement createStatement()>();
        $i0 = interfaceinvoke r1.<java.sql.Statement: int getMaxRows()>();
        if $i0 == 0 goto label0;

        interfaceinvoke r1.<java.sql.Statement: void setMaxRows(int)>(0);

     label0:
        interfaceinvoke r1.<java.sql.Statement: void setEscapeProcessing(boolean)>(0);
        $i1 = interfaceinvoke r1.<java.sql.Statement: int getFetchSize()>();
        if $i1 == 0 goto label1;

        interfaceinvoke r1.<java.sql.Statement: void setFetchSize(int)>(0);

     label1:
        return r1;
    }

    java.lang.Object getMutex() throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        com.mysql.jdbc.MysqlIO $r1;
        java.sql.SQLException $r2;
        java.lang.Object $r3;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $r1 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        if $r1 != null goto label0;

        $r2 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String,java.lang.String)>("Connection.close() has already been called. Invalid operation in this state.", "08003");
        throw $r2;

     label0:
        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void reportMetricsIfNeeded()>();
        $r3 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.Object mutex>;
        return $r3;
    }

    int getNetBufferLength()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        int $i0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $i0 = r0.<com.mysql.jdbc.ConnectionImpl: int netBufferLength>;
        return $i0;
    }

    public java.lang.String getServerCharacterEncoding()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        com.mysql.jdbc.MysqlIO $r1;
        boolean $z0;
        java.util.Map $r2, $r5;
        java.lang.Object $r3, $r6;
        java.lang.String $r4, $r7;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $r1 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        $z0 = virtualinvoke $r1.<com.mysql.jdbc.MysqlIO: boolean versionMeetsMinimum(int,int,int)>(4, 1, 0);
        if $z0 == 0 goto label0;

        $r2 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map serverVariables>;
        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("character_set_server");
        $r4 = (java.lang.String) $r3;
        return $r4;

     label0:
        $r5 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map serverVariables>;
        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>("character_set");
        $r7 = (java.lang.String) $r6;
        return $r7;
    }

    int getServerMajorVersion()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        com.mysql.jdbc.MysqlIO $r1;
        int $i0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $r1 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        $i0 = virtualinvoke $r1.<com.mysql.jdbc.MysqlIO: int getServerMajorVersion()>();
        return $i0;
    }

    int getServerMinorVersion()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        com.mysql.jdbc.MysqlIO $r1;
        int $i0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $r1 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        $i0 = virtualinvoke $r1.<com.mysql.jdbc.MysqlIO: int getServerMinorVersion()>();
        return $i0;
    }

    int getServerSubMinorVersion()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        com.mysql.jdbc.MysqlIO $r1;
        int $i0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $r1 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        $i0 = virtualinvoke $r1.<com.mysql.jdbc.MysqlIO: int getServerSubMinorVersion()>();
        return $i0;
    }

    public java.util.TimeZone getServerTimezoneTZ()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.util.TimeZone $r1;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $r1 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.TimeZone serverTimezoneTZ>;
        return $r1;
    }

    java.lang.String getServerVariable(java.lang.String)
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1, $r5;
        java.util.Map $r2, $r3;
        java.lang.Object $r4;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.lang.String;
        $r2 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map serverVariables>;
        if $r2 == null goto label0;

        $r3 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map serverVariables>;
        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);
        $r5 = (java.lang.String) $r4;
        return $r5;

     label0:
        return null;
    }

    java.lang.String getServerVersion()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        com.mysql.jdbc.MysqlIO $r1;
        java.lang.String $r2;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $r1 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        $r2 = virtualinvoke $r1.<com.mysql.jdbc.MysqlIO: java.lang.String getServerVersion()>();
        return $r2;
    }

    protected java.util.Calendar getSessionLockedCalendar()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.util.Calendar $r1;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $r1 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Calendar sessionCalendar>;
        return $r1;
    }

    public int getTransactionIsolation() throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.sql.Statement r1;
        java.sql.ResultSet r2;
        null_type n0, n1, n2, n3, n4;
        boolean z0, $z1, $z2, $z3, $z4;
        java.lang.String r3, r7, $r14;
        java.lang.Integer r4;
        int i0, $i2;
        java.lang.Throwable r5, r6, $r17, $r20, $r21, r22, $r23, r24, $r25, r26;
        byte b1;
        java.util.Map $r8;
        java.lang.Object $r9;
        java.lang.StringBuffer $r10, $r11, $r12, $r13;
        java.sql.SQLException $r15, $r16;
        java.lang.Exception $r18, $r19;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $z1 = r0.<com.mysql.jdbc.ConnectionImpl: boolean hasIsolationLevels>;
        if $z1 == 0 goto label8;

        $z2 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getUseLocalSessionState()>();
        if $z2 != 0 goto label8;

        r1 = null;
        r2 = null;

     label0:
        r1 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.sql.Statement getMetadataSafeStatement()>();
        n0 = null;
        z0 = 0;
        $z3 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean versionMeetsMinimum(int,int,int)>(4, 0, 3);
        if $z3 == 0 goto label1;

        r7 = "SELECT @@session.tx_isolation";
        b1 = 1;
        goto label2;

     label1:
        r7 = "SHOW VARIABLES LIKE \'transaction_isolation\'";
        b1 = 2;

     label2:
        r2 = interfaceinvoke r1.<java.sql.Statement: java.sql.ResultSet executeQuery(java.lang.String)>(r7);
        $z4 = interfaceinvoke r2.<java.sql.ResultSet: boolean next()>();
        if $z4 == 0 goto label5;

        r3 = interfaceinvoke r2.<java.sql.ResultSet: java.lang.String getString(int)>(b1);
        if r3 == null goto label4;

        $r8 = <com.mysql.jdbc.ConnectionImpl: java.util.Map mapTransIsolationNameToValue>;
        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);
        r4 = (java.lang.Integer) $r9;
        if r4 == null goto label4;

        i0 = virtualinvoke r4.<java.lang.Integer: int intValue()>();
        goto label9;

     label3:
        return i0;

     label4:
        $r10 = new java.lang.StringBuffer;
        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();
        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not map transaction isolation \'");
        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);
        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" to a valid JDBC level.");
        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();
        $r15 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String,java.lang.String)>($r14, "S1000");
        throw $r15;

     label5:
        $r16 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String,java.lang.String)>("Could not retrieve transaction isolation level from server", "S1000");
        throw $r16;

     label6:
        $r17 := @caughtexception;
        r5 = $r17;
        goto label20;

     label7:
        throw r5;

     label8:
        $i2 = r0.<com.mysql.jdbc.ConnectionImpl: int isolationLevel>;
        return $i2;

     label9:
        if r2 == null goto label14;

     label10:
        interfaceinvoke r2.<java.sql.ResultSet: void close()>();

     label11:
        goto label13;

     label12:
        $r20 := @caughtexception;
        r6 = $r20;

     label13:
        n1 = null;

     label14:
        if r1 == null goto label19;

     label15:
        interfaceinvoke r1.<java.sql.Statement: void close()>();

     label16:
        goto label18;

     label17:
        $r21 := @caughtexception;
        r22 = $r21;

     label18:
        n2 = null;

     label19:
        goto label3;

     label20:
        if r2 == null goto label25;

     label21:
        interfaceinvoke r2.<java.sql.ResultSet: void close()>();

     label22:
        goto label24;

     label23:
        $r23 := @caughtexception;
        r24 = $r23;

     label24:
        n3 = null;

     label25:
        if r1 == null goto label30;

     label26:
        interfaceinvoke r1.<java.sql.Statement: void close()>();

     label27:
        goto label29;

     label28:
        $r25 := @caughtexception;
        r26 = $r25;

     label29:
        n4 = null;

     label30:
        goto label7;

        catch java.lang.Throwable from label0 to label3 with label6;
        catch java.lang.Throwable from label4 to label7 with label6;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.lang.Throwable from label26 to label27 with label28;
    }

    public synchronized java.util.Map getTypeMap() throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.util.HashMap $r1;
        java.util.Map $r2, $r3;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $r2 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map typeMap>;
        if $r2 != null goto label0;

        $r1 = new java.util.HashMap;
        specialinvoke $r1.<java.util.HashMap: void <init>()>();
        r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map typeMap> = $r1;

     label0:
        $r3 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map typeMap>;
        return $r3;
    }

    java.lang.String getURL()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String $r1;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $r1 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String myURL>;
        return $r1;
    }

    java.lang.String getUser()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String $r1;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $r1 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String user>;
        return $r1;
    }

    protected java.util.Calendar getUtcCalendar()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.util.Calendar $r1;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $r1 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Calendar utcCalendar>;
        return $r1;
    }

    public java.sql.SQLWarning getWarnings() throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        return null;
    }

    public boolean hasSameProperties(com.mysql.jdbc.Connection)
    {
        com.mysql.jdbc.ConnectionImpl r0, $r3;
        com.mysql.jdbc.Connection r1;
        java.util.Properties $r2, $r4;
        boolean $z0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: com.mysql.jdbc.Connection;
        $r2 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Properties props>;
        $r3 = (com.mysql.jdbc.ConnectionImpl) r1;
        $r4 = $r3.<com.mysql.jdbc.ConnectionImpl: java.util.Properties props>;
        $z0 = virtualinvoke $r2.<java.util.Properties: boolean equals(java.lang.Object)>($r4);
        return $z0;
    }

    public boolean hasTriedMaster()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        boolean $z0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $z0 = r0.<com.mysql.jdbc.ConnectionImpl: boolean hasTriedMasterFlag>;
        return $z0;
    }

    protected void incrementNumberOfPreparedExecutes()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        boolean $z0;
        long $l0, $l1, $l2, $l3;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $z0 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getGatherPerformanceMetrics()>();
        if $z0 == 0 goto label0;

        $l0 = r0.<com.mysql.jdbc.ConnectionImpl: long numberOfPreparedExecutes>;
        $l1 = $l0 + 1L;
        r0.<com.mysql.jdbc.ConnectionImpl: long numberOfPreparedExecutes> = $l1;
        $l2 = r0.<com.mysql.jdbc.ConnectionImpl: long numberOfQueriesIssued>;
        $l3 = $l2 + 1L;
        r0.<com.mysql.jdbc.ConnectionImpl: long numberOfQueriesIssued> = $l3;

     label0:
        return;
    }

    protected void incrementNumberOfPrepares()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        boolean $z0;
        long $l0, $l1;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $z0 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getGatherPerformanceMetrics()>();
        if $z0 == 0 goto label0;

        $l0 = r0.<com.mysql.jdbc.ConnectionImpl: long numberOfPrepares>;
        $l1 = $l0 + 1L;
        r0.<com.mysql.jdbc.ConnectionImpl: long numberOfPrepares> = $l1;

     label0:
        return;
    }

    protected void incrementNumberOfResultSetsCreated()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        boolean $z0;
        long $l0, $l1;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $z0 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getGatherPerformanceMetrics()>();
        if $z0 == 0 goto label0;

        $l0 = r0.<com.mysql.jdbc.ConnectionImpl: long numberOfResultSetsCreated>;
        $l1 = $l0 + 1L;
        r0.<com.mysql.jdbc.ConnectionImpl: long numberOfResultSetsCreated> = $l1;

     label0:
        return;
    }

    private void initializeDriverProperties(java.util.Properties) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.util.Properties r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.String $r2;
        com.mysql.jdbc.log.Log $r3;
        com.mysql.jdbc.profiler.ProfilerEventHandler $r4;
        java.sql.SQLException $r5;
        com.mysql.jdbc.util.LRUCache $r6, $r7;
        int $i0, $i1;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.util.Properties;
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void initializeProperties(java.util.Properties)>(r1);
        $z0 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getUseJvmCharsetConverters()>();
        r0.<com.mysql.jdbc.ConnectionImpl: boolean usePlatformCharsetConverters> = $z0;
        $r2 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getLogger()>();
        $r3 = staticinvoke <com.mysql.jdbc.log.LogFactory: com.mysql.jdbc.log.Log getLogger(java.lang.String,java.lang.String)>($r2, "MySQL");
        r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.log.Log log> = $r3;
        $z1 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getProfileSql()>();
        if $z1 != 0 goto label0;

        $z2 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getUseUsageAdvisor()>();
        if $z2 == 0 goto label1;

     label0:
        $r4 = staticinvoke <com.mysql.jdbc.profiler.ProfilerEventHandlerFactory: com.mysql.jdbc.profiler.ProfilerEventHandler getInstance(com.mysql.jdbc.Connection)>(r0);
        r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.profiler.ProfilerEventHandler eventSink> = $r4;

     label1:
        $z3 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getCachePreparedStatements()>();
        if $z3 == 0 goto label2;

        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void createPreparedStatementCaches()>();

     label2:
        $z4 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getNoDatetimeStringSync()>();
        if $z4 == 0 goto label3;

        $z5 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getUseTimezone()>();
        if $z5 == 0 goto label3;

        $r5 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String,java.lang.String)>("Can\'t enable noDatetimeSync and useTimezone configuration properties at the same time", "01S00");
        throw $r5;

     label3:
        $z6 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getCacheCallableStatements()>();
        if $z6 == 0 goto label4;

        $r6 = new com.mysql.jdbc.util.LRUCache;
        $i0 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: int getCallableStatementCacheSize()>();
        specialinvoke $r6.<com.mysql.jdbc.util.LRUCache: void <init>(int)>($i0);
        r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.util.LRUCache parsedCallableStatementCache> = $r6;

     label4:
        $z7 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getAllowMultiQueries()>();
        if $z7 == 0 goto label5;

        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setCacheResultSetMetadata(boolean)>(0);

     label5:
        $z8 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getCacheResultSetMetadata()>();
        if $z8 == 0 goto label6;

        $r7 = new com.mysql.jdbc.util.LRUCache;
        $i1 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: int getMetadataCacheSize()>();
        specialinvoke $r7.<com.mysql.jdbc.util.LRUCache: void <init>(int)>($i1);
        r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.util.LRUCache resultSetMetadataCache> = $r7;

     label6:
        return;
    }

    private void initializePropsFromServer() throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1, r12, $r14, $r15, $r16, $r18, r24, $r26, r31, r34, r35, $r36, $r37, $r38, $r39, $r42, $r43, $r46;
        java.util.Iterator r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, $i9, $i10, $i11;
        java.lang.NumberFormatException r3, $r25;
        java.util.Properties $r4;
        java.util.List $r5, $r6;
        com.mysql.jdbc.ConnectionImpl$4 $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, z15, z16, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27;
        java.util.Map $r8, $r9, $r10, $r17, $r19, $r21, $r22, $r29, $r32, $r40, $r44;
        java.lang.Object $r11, $r23, $r30, $r33, $r41, $r45;
        com.mysql.jdbc.MysqlIO $r20, $r27, $r28;
        null_type n0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getConnectionLifecycleInterceptors()>();
        r0.<com.mysql.jdbc.ConnectionImpl: java.util.List connectionLifecycleInterceptors> = null;
        if r1 == null goto label0;

        $r4 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Properties props>;
        $r5 = staticinvoke <com.mysql.jdbc.Util: java.util.List loadExtensions(com.mysql.jdbc.Connection,java.util.Properties,java.lang.String,java.lang.String)>(r0, $r4, r1, "Connection.badLifecycleInterceptor");
        r0.<com.mysql.jdbc.ConnectionImpl: java.util.List connectionLifecycleInterceptors> = $r5;
        $r6 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.List connectionLifecycleInterceptors>;
        r2 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();
        $r7 = new com.mysql.jdbc.ConnectionImpl$4;
        specialinvoke $r7.<com.mysql.jdbc.ConnectionImpl$4: void <init>(com.mysql.jdbc.ConnectionImpl,java.util.Iterator)>(r0, r2);
        virtualinvoke $r7.<com.mysql.jdbc.ConnectionImpl$4: void doForAll()>();

     label0:
        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setSessionVariables()>();
        $z0 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean versionMeetsMinimum(int,int,int)>(4, 1, 0);
        if $z0 != 0 goto label1;

        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setTransformedBitIsBoolean(boolean)>(0);

     label1:
        $z1 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean versionMeetsMinimum(int,int,int)>(4, 1, 0);
        r0.<com.mysql.jdbc.ConnectionImpl: boolean parserKnowsUnicode> = $z1;
        $z2 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getUseServerPreparedStmts()>();
        if $z2 == 0 goto label2;

        $z3 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean versionMeetsMinimum(int,int,int)>(4, 1, 0);
        if $z3 == 0 goto label2;

        r0.<com.mysql.jdbc.ConnectionImpl: boolean useServerPreparedStmts> = 1;
        $z4 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean versionMeetsMinimum(int,int,int)>(5, 0, 0);
        if $z4 == 0 goto label2;

        $z5 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean versionMeetsMinimum(int,int,int)>(5, 0, 3);
        if $z5 != 0 goto label2;

        r0.<com.mysql.jdbc.ConnectionImpl: boolean useServerPreparedStmts> = 0;

     label2:
        $r8 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map serverVariables>;
        interfaceinvoke $r8.<java.util.Map: void clear()>();
        $z6 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean versionMeetsMinimum(int,int,int)>(3, 21, 22);
        if $z6 == 0 goto label15;

        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void loadServerVariables()>();
        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void buildCollationMapping()>();
        $r9 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map serverVariables>;
        staticinvoke <com.mysql.jdbc.LicenseConfiguration: void checkLicenseType(java.util.Map)>($r9);
        $r10 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map serverVariables>;
        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>("lower_case_table_names");
        r12 = (java.lang.String) $r11;
        $r14 = "on";
        $z7 = virtualinvoke $r14.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r12);
        if $z7 != 0 goto label3;

        $r15 = "1";
        $z8 = virtualinvoke $r15.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r12);
        if $z8 != 0 goto label3;

        $r16 = "2";
        $z9 = virtualinvoke $r16.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r12);
        if $z9 == 0 goto label4;

     label3:
        $z10 = 1;
        goto label5;

     label4:
        $z10 = 0;

     label5:
        r0.<com.mysql.jdbc.ConnectionImpl: boolean lowerCaseTableNames> = $z10;
        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void configureTimezone()>();
        $r17 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map serverVariables>;
        $z11 = interfaceinvoke $r17.<java.util.Map: boolean containsKey(java.lang.Object)>("max_allowed_packet");
        if $z11 == 0 goto label6;

        $i2 = specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: int getServerVariableAsInt(java.lang.String,int)>("max_allowed_packet", 1048576);
        r0.<com.mysql.jdbc.ConnectionImpl: int maxAllowedPacket> = $i2;
        i0 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: int getBlobSendChunkSize()>();
        $i3 = r0.<com.mysql.jdbc.ConnectionImpl: int maxAllowedPacket>;
        $i4 = staticinvoke <java.lang.Math: int min(int,int)>(i0, $i3);
        $i5 = $i4 - 8192;
        i1 = $i5 - 11;
        $r18 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i1);
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setBlobSendChunkSize(java.lang.String)>($r18);

     label6:
        $r19 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map serverVariables>;
        $z12 = interfaceinvoke $r19.<java.util.Map: boolean containsKey(java.lang.Object)>("net_buffer_length");
        if $z12 == 0 goto label7;

        $i6 = specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: int getServerVariableAsInt(java.lang.String,int)>("net_buffer_length", 16384);
        r0.<com.mysql.jdbc.ConnectionImpl: int netBufferLength> = $i6;

     label7:
        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void checkTransactionIsolationLevel()>();
        $z13 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean versionMeetsMinimum(int,int,int)>(4, 1, 0);
        if $z13 != 0 goto label8;

        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void checkServerEncoding()>();

     label8:
        $r20 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        virtualinvoke $r20.<com.mysql.jdbc.MysqlIO: void checkForCharsetMismatch()>();
        $r21 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map serverVariables>;
        $z14 = interfaceinvoke $r21.<java.util.Map: boolean containsKey(java.lang.Object)>("sql_mode");
        if $z14 == 0 goto label15;

        z15 = 0;
        $r22 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map serverVariables>;
        $r23 = interfaceinvoke $r22.<java.util.Map: java.lang.Object get(java.lang.Object)>("sql_mode");
        r24 = (java.lang.String) $r23;

     label9:
        i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r24);

     label10:
        goto label13;

     label11:
        $r25 := @caughtexception;
        r3 = $r25;
        i7 = 0;
        if r24 == null goto label13;

        $i8 = virtualinvoke r24.<java.lang.String: int indexOf(java.lang.String)>("ANSI_QUOTES");
        if $i8 == -1 goto label12;

        i7 = i7 | 4;

     label12:
        $i9 = virtualinvoke r24.<java.lang.String: int indexOf(java.lang.String)>("NO_BACKSLASH_ESCAPES");
        if $i9 == -1 goto label13;

        r0.<com.mysql.jdbc.ConnectionImpl: boolean noBackslashEscapes> = 1;

     label13:
        $i10 = i7 & 4;
        if $i10 <= 0 goto label14;

        r0.<com.mysql.jdbc.ConnectionImpl: boolean useAnsiQuotes> = 1;
        goto label15;

     label14:
        r0.<com.mysql.jdbc.ConnectionImpl: boolean useAnsiQuotes> = 0;

     label15:
        $r26 = staticinvoke <com.mysql.jdbc.CharsetMapping: java.lang.String getCharacterEncodingForErrorMessages(com.mysql.jdbc.ConnectionImpl)>(r0);
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String errorMessageEncoding> = $r26;
        z16 = specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean isAutoCommitNonDefaultOnServer()>();
        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean configureClientCharacterSet(boolean)>(0);
        $z18 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean versionMeetsMinimum(int,int,int)>(3, 23, 15);
        if $z18 == 0 goto label16;

        r0.<com.mysql.jdbc.ConnectionImpl: boolean transactionsSupported> = 1;
        if z16 != 0 goto label17;

        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setAutoCommit(boolean)>(1);
        goto label17;

     label16:
        r0.<com.mysql.jdbc.ConnectionImpl: boolean transactionsSupported> = 0;

     label17:
        $z19 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean versionMeetsMinimum(int,int,int)>(3, 23, 36);
        if $z19 == 0 goto label18;

        r0.<com.mysql.jdbc.ConnectionImpl: boolean hasIsolationLevels> = 1;
        goto label19;

     label18:
        r0.<com.mysql.jdbc.ConnectionImpl: boolean hasIsolationLevels> = 0;

     label19:
        $z20 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean versionMeetsMinimum(int,int,int)>(3, 23, 6);
        r0.<com.mysql.jdbc.ConnectionImpl: boolean hasQuotedIdentifiers> = $z20;
        $r27 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        virtualinvoke $r27.<com.mysql.jdbc.MysqlIO: void resetMaxBuf()>();
        $r28 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        $z21 = virtualinvoke $r28.<com.mysql.jdbc.MysqlIO: boolean versionMeetsMinimum(int,int,int)>(4, 1, 0);
        if $z21 == 0 goto label25;

        $r29 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map serverVariables>;
        $r30 = interfaceinvoke $r29.<java.util.Map: java.lang.Object get(java.lang.Object)>("jdbc.local.character_set_results");
        r31 = (java.lang.String) $r30;
        if r31 == null goto label20;

        $z22 = staticinvoke <com.mysql.jdbc.StringUtils: boolean startsWithIgnoreCaseAndWs(java.lang.String,java.lang.String)>(r31, "NULL");
        if $z22 != 0 goto label20;

        $i11 = virtualinvoke r31.<java.lang.String: int length()>();
        if $i11 != 0 goto label23;

     label20:
        $r32 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map serverVariables>;
        $r33 = interfaceinvoke $r32.<java.util.Map: java.lang.Object get(java.lang.Object)>("character_set_system");
        r34 = (java.lang.String) $r33;
        n0 = null;
        if r34 == null goto label21;

        r35 = staticinvoke <com.mysql.jdbc.CharsetMapping: java.lang.String getJavaEncodingForMysqlEncoding(java.lang.String,com.mysql.jdbc.Connection)>(r34, r0);
        goto label22;

     label21:
        r35 = "UTF-8";

     label22:
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String characterSetMetadata> = r35;
        goto label24;

     label23:
        $r36 = staticinvoke <com.mysql.jdbc.CharsetMapping: java.lang.String getJavaEncodingForMysqlEncoding(java.lang.String,com.mysql.jdbc.Connection)>(r31, r0);
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String characterSetResultsOnServer> = $r36;
        $r37 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String characterSetResultsOnServer>;
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String characterSetMetadata> = $r37;

     label24:
        goto label26;

     label25:
        $r38 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getEncoding()>();
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String characterSetMetadata> = $r38;

     label26:
        $z23 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean versionMeetsMinimum(int,int,int)>(4, 1, 0);
        if $z23 == 0 goto label27;

        $z24 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean versionMeetsMinimum(int,int,int)>(4, 1, 10);
        if $z24 != 0 goto label27;

        $z25 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getAllowMultiQueries()>();
        if $z25 == 0 goto label27;

        $r39 = "ON";
        $r40 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map serverVariables>;
        $r41 = interfaceinvoke $r40.<java.util.Map: java.lang.Object get(java.lang.Object)>("query_cache_type");
        $r42 = (java.lang.String) $r41;
        $z26 = virtualinvoke $r39.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r42);
        if $z26 == 0 goto label27;

        $r43 = "0";
        $r44 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map serverVariables>;
        $r45 = interfaceinvoke $r44.<java.util.Map: java.lang.Object get(java.lang.Object)>("query_cache_size");
        $r46 = (java.lang.String) $r45;
        $z27 = virtualinvoke $r43.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r46);
        if $z27 != 0 goto label27;

        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setAllowMultiQueries(boolean)>(0);

     label27:
        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setupServerForTruncationChecks()>();
        return;

        catch java.lang.NumberFormatException from label9 to label10 with label11;
    }

    private int getServerVariableAsInt(java.lang.String, int) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1, $r5, $r12;
        int i0, $i1;
        java.lang.NumberFormatException r2, $r6;
        java.util.Map $r3, $r9;
        java.lang.Object $r4, $r10;
        com.mysql.jdbc.log.Log $r7;
        java.lang.Object[] $r8;
        java.lang.Integer $r11;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;

     label0:
        $r3 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map serverVariables>;
        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);
        $r5 = (java.lang.String) $r4;
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5);

     label1:
        return $i1;

     label2:
        $r6 := @caughtexception;
        r2 = $r6;
        $r7 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.log.Log getLog()>();
        $r8 = newarray (java.lang.Object)[3];
        $r8[0] = r1;
        $r9 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map serverVariables>;
        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);
        $r8[1] = $r10;
        $r11 = new java.lang.Integer;
        specialinvoke $r11.<java.lang.Integer: void <init>(int)>(i0);
        $r8[2] = $r11;
        $r12 = staticinvoke <com.mysql.jdbc.Messages: java.lang.String getString(java.lang.String,java.lang.Object[])>("Connection.BadValueInServerVariables", $r8);
        interfaceinvoke $r7.<com.mysql.jdbc.log.Log: void logWarn(java.lang.Object)>($r12);
        return i0;

        catch java.lang.NumberFormatException from label0 to label1 with label2;
    }

    private boolean isAutoCommitNonDefaultOnServer() throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.String r1;
        java.sql.ResultSet r2;
        java.sql.Statement r3;
        java.lang.Throwable r4, r5, $r8, $r12, $r13, r14, $r15, r16, $r17, r18;
        java.util.Map $r6;
        java.lang.Object $r7;
        int $i0;
        java.sql.SQLException $r9, $r10;
        com.mysql.jdbc.MysqlIO $r11;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        z0 = 0;
        $r6 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map serverVariables>;
        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>("init_connect");
        r1 = (java.lang.String) $r7;
        $z1 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean versionMeetsMinimum(int,int,int)>(4, 1, 2);
        if $z1 == 0 goto label8;

        if r1 == null goto label8;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i0 <= 0 goto label8;

        $z2 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getElideSetAutoCommits()>();
        if $z2 != 0 goto label7;

        r2 = null;
        r3 = null;

     label0:
        r3 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.sql.Statement getMetadataSafeStatement()>();
        r2 = interfaceinvoke r3.<java.sql.Statement: java.sql.ResultSet executeQuery(java.lang.String)>("SELECT @@session.autocommit");
        $z3 = interfaceinvoke r2.<java.sql.ResultSet: boolean next()>();
        if $z3 == 0 goto label1;

        $z4 = interfaceinvoke r2.<java.sql.ResultSet: boolean getBoolean(int)>(1);
        r0.<com.mysql.jdbc.ConnectionImpl: boolean autoCommit> = $z4;
        $z5 = r0.<com.mysql.jdbc.ConnectionImpl: boolean autoCommit>;
        if $z5 == 1 goto label1;

        z0 = 1;

     label1:
        goto label9;

     label2:
        goto label6;

     label3:
        $r8 := @caughtexception;

     label4:
        r4 = $r8;
        goto label18;

     label5:
        throw r4;

     label6:
        goto label8;

     label7:
        $r11 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO getIO()>();
        $z6 = virtualinvoke $r11.<com.mysql.jdbc.MysqlIO: boolean isSetNeededForAutoCommitMode(boolean)>(1);
        if $z6 == 0 goto label8;

        r0.<com.mysql.jdbc.ConnectionImpl: boolean autoCommit> = 0;
        z0 = 1;

     label8:
        return z0;

     label9:
        if r2 == null goto label13;

     label10:
        interfaceinvoke r2.<java.sql.ResultSet: void close()>();

     label11:
        goto label13;

     label12:
        $r12 := @caughtexception;
        r5 = $r12;

     label13:
        if r3 == null goto label17;

     label14:
        interfaceinvoke r3.<java.sql.Statement: void close()>();

     label15:
        goto label17;

     label16:
        $r13 := @caughtexception;
        r14 = $r13;

     label17:
        goto label2;

     label18:
        if r2 == null goto label22;

     label19:
        interfaceinvoke r2.<java.sql.ResultSet: void close()>();

     label20:
        goto label22;

     label21:
        $r15 := @caughtexception;
        r16 = $r15;

     label22:
        if r3 == null goto label26;

     label23:
        interfaceinvoke r3.<java.sql.Statement: void close()>();

     label24:
        goto label26;

     label25:
        $r17 := @caughtexception;
        r18 = $r17;

     label26:
        goto label5;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label23 to label24 with label25;
    }

    protected boolean isClientTzUTC()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        boolean $z0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $z0 = r0.<com.mysql.jdbc.ConnectionImpl: boolean isClientTzUTC>;
        return $z0;
    }

    public boolean isClosed()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        boolean $z0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $z0 = r0.<com.mysql.jdbc.ConnectionImpl: boolean isClosed>;
        return $z0;
    }

    protected boolean isCursorFetchEnabled() throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        boolean $z0, $z1, $z2;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $z0 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean versionMeetsMinimum(int,int,int)>(5, 0, 2);
        if $z0 == 0 goto label0;

        $z1 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getUseCursorFetch()>();
        if $z1 == 0 goto label0;

        $z2 = 1;
        goto label1;

     label0:
        $z2 = 0;

     label1:
        return $z2;
    }

    public boolean isInGlobalTx()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        boolean $z0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $z0 = r0.<com.mysql.jdbc.ConnectionImpl: boolean isInGlobalTx>;
        return $z0;
    }

    public synchronized boolean isMasterConnection()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        boolean $z0, $z1;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $z0 = r0.<com.mysql.jdbc.ConnectionImpl: boolean failedOver>;
        if $z0 != 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        return $z1;
    }

    public boolean isNoBackslashEscapesSet()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        boolean $z0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $z0 = r0.<com.mysql.jdbc.ConnectionImpl: boolean noBackslashEscapes>;
        return $z0;
    }

    boolean isReadInfoMsgEnabled()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        boolean $z0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $z0 = r0.<com.mysql.jdbc.ConnectionImpl: boolean readInfoMsg>;
        return $z0;
    }

    public boolean isReadOnly() throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        boolean $z0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $z0 = r0.<com.mysql.jdbc.ConnectionImpl: boolean readOnly>;
        return $z0;
    }

    protected boolean isRunningOnJDK13()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        boolean $z0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $z0 = r0.<com.mysql.jdbc.ConnectionImpl: boolean isRunningOnJDK13>;
        return $z0;
    }

    public synchronized boolean isSameResource(com.mysql.jdbc.Connection)
    {
        com.mysql.jdbc.ConnectionImpl r0, $r7, $r8, $r9, $r11, $r14;
        com.mysql.jdbc.Connection r1;
        boolean z0, $z1, $z2, $z3, z4, $z5, z6;
        java.lang.String r2, r3, r4, r5, r6, $r10, $r12, $r13;
        int $i0, $i1, $i2, $i3;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: com.mysql.jdbc.Connection;
        if r1 != null goto label0;

        return 0;

     label0:
        z0 = 1;
        $r7 = (com.mysql.jdbc.ConnectionImpl) r1;
        r2 = $r7.<com.mysql.jdbc.ConnectionImpl: java.lang.String origHostToConnectTo>;
        $r8 = (com.mysql.jdbc.ConnectionImpl) r1;
        r3 = $r8.<com.mysql.jdbc.ConnectionImpl: java.lang.String origDatabaseToConnectTo>;
        $r9 = (com.mysql.jdbc.ConnectionImpl) r1;
        r4 = $r9.<com.mysql.jdbc.ConnectionImpl: java.lang.String database>;
        $r10 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String origHostToConnectTo>;
        $z1 = staticinvoke <com.mysql.jdbc.ConnectionImpl: boolean nullSafeCompare(java.lang.String,java.lang.String)>(r2, $r10);
        if $z1 != 0 goto label1;

        z0 = 0;
        goto label4;

     label1:
        if r2 == null goto label4;

        $i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(44);
        if $i0 != -1 goto label4;

        $i1 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(58);
        if $i1 != -1 goto label4;

        $r11 = (com.mysql.jdbc.ConnectionImpl) r1;
        $i2 = $r11.<com.mysql.jdbc.ConnectionImpl: int origPortToConnectTo>;
        $i3 = r0.<com.mysql.jdbc.ConnectionImpl: int origPortToConnectTo>;
        if $i2 != $i3 goto label2;

        $z2 = 1;
        goto label3;

     label2:
        $z2 = 0;

     label3:
        z0 = $z2;

     label4:
        if z0 == 0 goto label6;

        $r12 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String origDatabaseToConnectTo>;
        $z3 = staticinvoke <com.mysql.jdbc.ConnectionImpl: boolean nullSafeCompare(java.lang.String,java.lang.String)>(r3, $r12);
        if $z3 != 0 goto label5;

        z4 = 0;
        z0 = 0;
        goto label6;

     label5:
        $r13 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String database>;
        $z5 = staticinvoke <com.mysql.jdbc.ConnectionImpl: boolean nullSafeCompare(java.lang.String,java.lang.String)>(r4, $r13);
        if $z5 != 0 goto label6;

        z0 = 0;

     label6:
        if z0 == 0 goto label7;

        return 1;

     label7:
        $r14 = (com.mysql.jdbc.ConnectionImpl) r1;
        r5 = virtualinvoke $r14.<com.mysql.jdbc.ConnectionImpl: java.lang.String getResourceId()>();
        r6 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getResourceId()>();
        if r5 != null goto label8;

        if r6 == null goto label9;

     label8:
        z6 = staticinvoke <com.mysql.jdbc.ConnectionImpl: boolean nullSafeCompare(java.lang.String,java.lang.String)>(r5, r6);
        if z6 == 0 goto label9;

        return 1;

     label9:
        return 0;
    }

    protected boolean isServerTzUTC()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        boolean $z0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $z0 = r0.<com.mysql.jdbc.ConnectionImpl: boolean isServerTzUTC>;
        return $z0;
    }

    private void loadServerVariables() throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.util.Map r1, r2, $r8, $r9, $r53, $r57, r58, $r59, $r61;
        java.lang.Throwable r3, r5, r6, r7, $r12, $r63, $r66, $r69, $r70, r71, $r72, r73, $r74, r75;
        java.lang.StringBuffer r4, $r17, $r21, $r22, $r23, $r24, $r26, $r27, $r28, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52;
        int i0, $i2, $i3, $i4, $i5;
        char c1;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.String $r10, r16, $r20, r25, r29, $r54, $r55, $r60;
        java.lang.Object $r11;
        java.sql.Statement r13;
        java.sql.ResultSet r14;
        java.sql.DatabaseMetaData $r15;
        java.sql.SQLException $r64, r65, $r67, $r68;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $z0 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getCacheServerConfiguration()>();
        if $z0 == 0 goto label7;

        $r8 = <com.mysql.jdbc.ConnectionImpl: java.util.Map serverConfigByUrl>;
        r1 = $r8;
        entermonitor $r8;

     label0:
        $r9 = <com.mysql.jdbc.ConnectionImpl: java.util.Map serverConfigByUrl>;
        $r10 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getURL()>();
        $r11 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);
        r2 = (java.util.Map) $r11;
        if r2 == null goto label2;

        r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map serverVariables> = r2;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean usingCachedConfig> = 1;
        exitmonitor r1;

     label1:
        return;

     label2:
        exitmonitor r1;

     label3:
        goto label7;

     label4:
        $r12 := @caughtexception;

     label5:
        r3 = $r12;
        exitmonitor r1;

     label6:
        throw r3;

     label7:
        r13 = null;
        r14 = null;

     label8:
        r13 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.sql.Statement getMetadataSafeStatement()>();
        $r15 = r0.<com.mysql.jdbc.ConnectionImpl: java.sql.DatabaseMetaData dbmd>;
        r16 = interfaceinvoke $r15.<java.sql.DatabaseMetaData: java.lang.String getDriverVersion()>();
        if r16 == null goto label13;

        $i2 = virtualinvoke r16.<java.lang.String: int indexOf(int)>(42);
        if $i2 == -1 goto label13;

        $r17 = new java.lang.StringBuffer;
        $i3 = virtualinvoke r16.<java.lang.String: int length()>();
        $i4 = $i3 + 10;
        specialinvoke $r17.<java.lang.StringBuffer: void <init>(int)>($i4);
        r4 = $r17;
        i0 = 0;

     label9:
        $i5 = virtualinvoke r16.<java.lang.String: int length()>();
        if i0 >= $i5 goto label12;

        c1 = virtualinvoke r16.<java.lang.String: char charAt(int)>(i0);
        if c1 != 42 goto label10;

        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[star]");
        goto label11;

     label10:
        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c1);

     label11:
        i0 = i0 + 1;
        goto label9;

     label12:
        r16 = virtualinvoke r4.<java.lang.StringBuffer: java.lang.String toString()>();

     label13:
        $z1 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getParanoid()>();
        if $z1 != 0 goto label14;

        if r16 != null goto label15;

     label14:
        $r20 = "";
        goto label16;

     label15:
        $r21 = new java.lang.StringBuffer;
        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();
        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/* ");
        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r16);
        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" */");
        $r20 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

     label16:
        r25 = $r20;
        $r26 = new java.lang.StringBuffer;
        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();
        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r25);
        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("SHOW VARIABLES");
        r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.String toString()>();
        $z2 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean versionMeetsMinimum(int,int,int)>(5, 0, 3);
        if $z2 == 0 goto label17;

        $r30 = new java.lang.StringBuffer;
        specialinvoke $r30.<java.lang.StringBuffer: void <init>()>();
        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r25);
        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("SHOW VARIABLES WHERE Variable_name =\'language\'");
        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" OR Variable_name = \'net_write_timeout\'");
        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" OR Variable_name = \'interactive_timeout\'");
        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" OR Variable_name = \'wait_timeout\'");
        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" OR Variable_name = \'character_set_client\'");
        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" OR Variable_name = \'character_set_connection\'");
        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" OR Variable_name = \'character_set\'");
        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" OR Variable_name = \'character_set_server\'");
        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" OR Variable_name = \'tx_isolation\'");
        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" OR Variable_name = \'transaction_isolation\'");
        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" OR Variable_name = \'character_set_results\'");
        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" OR Variable_name = \'timezone\'");
        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" OR Variable_name = \'time_zone\'");
        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" OR Variable_name = \'system_time_zone\'");
        $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" OR Variable_name = \'lower_case_table_names\'");
        $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" OR Variable_name = \'max_allowed_packet\'");
        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" OR Variable_name = \'net_buffer_length\'");
        $r49 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" OR Variable_name = \'sql_mode\'");
        $r50 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" OR Variable_name = \'query_cache_type\'");
        $r51 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" OR Variable_name = \'query_cache_size\'");
        $r52 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" OR Variable_name = \'init_connect\'");
        r29 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.String toString()>();

     label17:
        r14 = interfaceinvoke r13.<java.sql.Statement: java.sql.ResultSet executeQuery(java.lang.String)>(r29);

     label18:
        $z3 = interfaceinvoke r14.<java.sql.ResultSet: boolean next()>();
        if $z3 == 0 goto label19;

        $r53 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map serverVariables>;
        $r54 = interfaceinvoke r14.<java.sql.ResultSet: java.lang.String getString(int)>(1);
        $r55 = interfaceinvoke r14.<java.sql.ResultSet: java.lang.String getString(int)>(2);
        interfaceinvoke $r53.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r54, $r55);
        goto label18;

     label19:
        $z4 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getCacheServerConfiguration()>();
        if $z4 == 0 goto label25;

        $r57 = <com.mysql.jdbc.ConnectionImpl: java.util.Map serverConfigByUrl>;
        r58 = $r57;
        entermonitor $r57;

     label20:
        $r59 = <com.mysql.jdbc.ConnectionImpl: java.util.Map serverConfigByUrl>;
        $r60 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getURL()>();
        $r61 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map serverVariables>;
        interfaceinvoke $r59.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r60, $r61);
        exitmonitor r58;

     label21:
        goto label25;

     label22:
        $r63 := @caughtexception;

     label23:
        r5 = $r63;
        exitmonitor r58;

     label24:
        throw r5;

     label25:
        goto label32;

     label26:
        goto label31;

     label27:
        $r64 := @caughtexception;

     label28:
        r65 = $r64;
        throw r65;

     label29:
        $r66 := @caughtexception;
        r6 = $r66;
        goto label41;

     label30:
        throw r6;

     label31:
        return;

     label32:
        if r14 == null goto label36;

     label33:
        interfaceinvoke r14.<java.sql.ResultSet: void close()>();

     label34:
        goto label36;

     label35:
        $r69 := @caughtexception;
        r7 = $r69;

     label36:
        if r13 == null goto label40;

     label37:
        interfaceinvoke r13.<java.sql.Statement: void close()>();

     label38:
        goto label40;

     label39:
        $r70 := @caughtexception;
        r71 = $r70;

     label40:
        goto label26;

     label41:
        if r14 == null goto label45;

     label42:
        interfaceinvoke r14.<java.sql.ResultSet: void close()>();

     label43:
        goto label45;

     label44:
        $r72 := @caughtexception;
        r73 = $r72;

     label45:
        if r13 == null goto label49;

     label46:
        interfaceinvoke r13.<java.sql.Statement: void close()>();

     label47:
        goto label49;

     label48:
        $r74 := @caughtexception;
        r75 = $r74;

     label49:
        goto label30;

        catch java.lang.Throwable from label0 to label1 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label23 to label24 with label22;
        catch java.sql.SQLException from label8 to label25 with label27;
        catch java.lang.Throwable from label8 to label26 with label29;
        catch java.lang.Throwable from label28 to label30 with label29;
        catch java.lang.Throwable from label33 to label34 with label35;
        catch java.lang.Throwable from label37 to label38 with label39;
        catch java.lang.Throwable from label42 to label43 with label44;
        catch java.lang.Throwable from label46 to label47 with label48;
    }

    public boolean lowerCaseTableNames()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        boolean $z0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $z0 = r0.<com.mysql.jdbc.ConnectionImpl: boolean lowerCaseTableNames>;
        return $z0;
    }

    void maxRowsChanged(com.mysql.jdbc.StatementImpl)
    {
        com.mysql.jdbc.ConnectionImpl r0;
        com.mysql.jdbc.StatementImpl r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r9;
        java.util.Map $r5, $r7;
        java.util.HashMap $r6;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: com.mysql.jdbc.StatementImpl;
        $r4 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.Object mutex>;
        r2 = $r4;
        entermonitor $r4;

     label0:
        $r5 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map statementsUsingMaxRows>;
        if $r5 != null goto label1;

        $r6 = new java.util.HashMap;
        specialinvoke $r6.<java.util.HashMap: void <init>()>();
        r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map statementsUsingMaxRows> = $r6;

     label1:
        $r7 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map statementsUsingMaxRows>;
        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r1);
        r0.<com.mysql.jdbc.ConnectionImpl: boolean maxRowsChanged> = 1;
        exitmonitor r2;

     label2:
        goto label6;

     label3:
        $r9 := @caughtexception;

     label4:
        r3 = $r9;
        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.lang.String nativeSQL(java.lang.String) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1, $r3, $r5;
        java.lang.Object r2;
        boolean $z0, $z1;
        com.mysql.jdbc.EscapeProcessorResult $r4;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.lang.String;
        if r1 != null goto label0;

        return null;

     label0:
        $z0 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean serverSupportsConvertFn()>();
        r2 = staticinvoke <com.mysql.jdbc.EscapeProcessor: java.lang.Object escapeSQL(java.lang.String,boolean,com.mysql.jdbc.ConnectionImpl)>(r1, $z0, r0);
        $z1 = r2 instanceof java.lang.String;
        if $z1 == 0 goto label1;

        $r3 = (java.lang.String) r2;
        return $r3;

     label1:
        $r4 = (com.mysql.jdbc.EscapeProcessorResult) r2;
        $r5 = $r4.<com.mysql.jdbc.EscapeProcessorResult: java.lang.String escapedSql>;
        return $r5;
    }

    private com.mysql.jdbc.CallableStatement parseCallableStatement(java.lang.String) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1, r4, $r6;
        java.lang.Object r2;
        boolean z0, $z1, $z2, z3;
        null_type n0;
        com.mysql.jdbc.EscapeProcessorResult $r3, $r5;
        com.mysql.jdbc.CallableStatement $r7;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.lang.String;
        $z1 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean serverSupportsConvertFn()>();
        r2 = staticinvoke <com.mysql.jdbc.EscapeProcessor: java.lang.Object escapeSQL(java.lang.String,boolean,com.mysql.jdbc.ConnectionImpl)>(r1, $z1, r0);
        z0 = 0;
        n0 = null;
        $z2 = r2 instanceof com.mysql.jdbc.EscapeProcessorResult;
        if $z2 == 0 goto label0;

        $r3 = (com.mysql.jdbc.EscapeProcessorResult) r2;
        r4 = $r3.<com.mysql.jdbc.EscapeProcessorResult: java.lang.String escapedSql>;
        $r5 = (com.mysql.jdbc.EscapeProcessorResult) r2;
        z3 = $r5.<com.mysql.jdbc.EscapeProcessorResult: boolean callingStoredFunction>;
        goto label1;

     label0:
        r4 = (java.lang.String) r2;
        z3 = 0;

     label1:
        $r6 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String database>;
        $r7 = staticinvoke <com.mysql.jdbc.CallableStatement: com.mysql.jdbc.CallableStatement getInstance(com.mysql.jdbc.ConnectionImpl,java.lang.String,java.lang.String,boolean)>(r0, r4, $r6, z3);
        return $r7;
    }

    public boolean parserKnowsUnicode()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        boolean $z0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $z0 = r0.<com.mysql.jdbc.ConnectionImpl: boolean parserKnowsUnicode>;
        return $z0;
    }

    public void ping() throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void pingInternal(boolean)>(1);
        return;
    }

    protected void pingInternal(boolean) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        boolean z0;
        long l0, $l4, $l5, $l6;
        int i1, $i2, $i8;
        byte $b3, $b7;
        com.mysql.jdbc.MysqlIO $r1, $r4;
        java.lang.String $r2;
        java.sql.SQLException $r3;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        z0 := @parameter0: boolean;
        if z0 == 0 goto label0;

        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void checkClosed()>();

     label0:
        $i2 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: int getSelfDestructOnPingSecondsLifetime()>();
        l0 = (long) $i2;
        i1 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: int getSelfDestructOnPingMaxOperations()>();
        $b3 = l0 cmp 0L;
        if $b3 <= 0 goto label1;

        $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        $l5 = r0.<com.mysql.jdbc.ConnectionImpl: long connectionCreationTimeMillis>;
        $l6 = $l4 - $l5;
        $b7 = $l6 cmp l0;
        if $b7 > 0 goto label2;

     label1:
        if i1 <= 0 goto label3;

        $r1 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        $i8 = virtualinvoke $r1.<com.mysql.jdbc.MysqlIO: int getCommandCount()>();
        if i1 > $i8 goto label3;

     label2:
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void close()>();
        $r2 = staticinvoke <com.mysql.jdbc.Messages: java.lang.String getString(java.lang.String)>("Connection.exceededConnectionLifetime");
        $r3 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String,java.lang.String)>($r2, "08S01");
        throw $r3;

     label3:
        $r4 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        virtualinvoke $r4.<com.mysql.jdbc.MysqlIO: com.mysql.jdbc.Buffer sendCommand(int,java.lang.String,com.mysql.jdbc.Buffer,boolean,java.lang.String)>(14, null, null, 0, null);
        return;
    }

    public java.sql.CallableStatement prepareCall(java.lang.String) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1;
        java.sql.CallableStatement $r2;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.lang.String;
        $r2 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.sql.CallableStatement prepareCall(java.lang.String,int,int)>(r1, 1003, 1007);
        return $r2;
    }

    public java.sql.CallableStatement prepareCall(java.lang.String, int, int) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1, $r9;
        int i0, i1;
        null_type n0;
        com.mysql.jdbc.util.LRUCache r2, $r7, $r10, $r13;
        com.mysql.jdbc.ConnectionImpl$CompoundCacheKey r3, $r8;
        com.mysql.jdbc.CallableStatement$CallableStatementParamInfo r4, r12;
        java.lang.Throwable r5, $r15;
        boolean $z0, $z1;
        com.mysql.jdbc.CallableStatement r6;
        java.lang.Object $r11;
        java.sql.SQLException $r16;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $z0 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean versionMeetsMinimum(int,int,int)>(5, 0, 0);
        if $z0 == 0 goto label9;

        n0 = null;
        $z1 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getCacheCallableStatements()>();
        if $z1 != 0 goto label0;

        r6 = specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.CallableStatement parseCallableStatement(java.lang.String)>(r1);
        goto label8;

     label0:
        $r7 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.util.LRUCache parsedCallableStatementCache>;
        r2 = $r7;
        entermonitor $r7;

     label1:
        $r8 = new com.mysql.jdbc.ConnectionImpl$CompoundCacheKey;
        $r9 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getCatalog()>();
        specialinvoke $r8.<com.mysql.jdbc.ConnectionImpl$CompoundCacheKey: void <init>(com.mysql.jdbc.ConnectionImpl,java.lang.String,java.lang.String)>(r0, $r9, r1);
        r3 = $r8;
        $r10 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.util.LRUCache parsedCallableStatementCache>;
        $r11 = virtualinvoke $r10.<com.mysql.jdbc.util.LRUCache: java.lang.Object get(java.lang.Object)>(r3);
        r4 = (com.mysql.jdbc.CallableStatement$CallableStatementParamInfo) $r11;
        if r4 == null goto label2;

        r6 = staticinvoke <com.mysql.jdbc.CallableStatement: com.mysql.jdbc.CallableStatement getInstance(com.mysql.jdbc.ConnectionImpl,com.mysql.jdbc.CallableStatement$CallableStatementParamInfo)>(r0, r4);
        goto label3;

     label2:
        r6 = specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.CallableStatement parseCallableStatement(java.lang.String)>(r1);
        r12 = r6.<com.mysql.jdbc.CallableStatement: com.mysql.jdbc.CallableStatement$CallableStatementParamInfo paramInfo>;
        $r13 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.util.LRUCache parsedCallableStatementCache>;
        virtualinvoke $r13.<com.mysql.jdbc.util.LRUCache: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r12);

     label3:
        exitmonitor r2;

     label4:
        goto label8;

     label5:
        $r15 := @caughtexception;

     label6:
        r5 = $r15;
        exitmonitor r2;

     label7:
        throw r5;

     label8:
        virtualinvoke r6.<com.mysql.jdbc.CallableStatement: void setResultSetType(int)>(i0);
        virtualinvoke r6.<com.mysql.jdbc.CallableStatement: void setResultSetConcurrency(int)>(i1);
        return r6;

     label9:
        $r16 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String,java.lang.String)>("Callable statements not supported.", "S1C00");
        throw $r16;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public java.sql.CallableStatement prepareCall(java.lang.String, int, int, int) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1;
        int i0, i1, i2;
        com.mysql.jdbc.CallableStatement r2;
        boolean $z0;
        java.sql.SQLException $r3;
        java.sql.CallableStatement $r4;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        $z0 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getPedantic()>();
        if $z0 == 0 goto label0;

        if i2 == 1 goto label0;

        $r3 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String,java.lang.String)>("HOLD_CUSRORS_OVER_COMMIT is only supported holdability level", "S1009");
        throw $r3;

     label0:
        $r4 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.sql.CallableStatement prepareCall(java.lang.String,int,int)>(r1, i0, i1);
        r2 = (com.mysql.jdbc.CallableStatement) $r4;
        return r2;
    }

    public java.sql.PreparedStatement prepareStatement(java.lang.String) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1;
        java.sql.PreparedStatement $r2;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.lang.String;
        $r2 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.sql.PreparedStatement prepareStatement(java.lang.String,int,int)>(r1, 1003, 1007);
        return $r2;
    }

    public java.sql.PreparedStatement prepareStatement(java.lang.String, int) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1;
        int i0;
        java.sql.PreparedStatement r2;
        com.mysql.jdbc.PreparedStatement $r3;
        boolean $z0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        r2 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.sql.PreparedStatement prepareStatement(java.lang.String)>(r1);
        $r3 = (com.mysql.jdbc.PreparedStatement) r2;
        if i0 != 1 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        virtualinvoke $r3.<com.mysql.jdbc.PreparedStatement: void setRetrieveGeneratedKeys(boolean)>($z0);
        return r2;
    }

    public java.sql.PreparedStatement prepareStatement(java.lang.String, int, int) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1, r2, $r6, $r12, $r20;
        int i0, i1, $i2, $i3, $i4, $i5;
        null_type n0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        com.mysql.jdbc.util.LRUCache r3, $r7, $r8, $r16;
        java.sql.SQLException r4, $r14, $r21, r22;
        java.lang.Throwable r5, $r19;
        java.lang.Object $r9;
        com.mysql.jdbc.PreparedStatement r10;
        com.mysql.jdbc.ServerPreparedStatement $r11, $r13;
        java.sql.PreparedStatement $r15, $r23, $r24;
        java.lang.Boolean $r17;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void checkClosed()>();
        n0 = null;
        z0 = 1;
        $z1 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getProcessEscapeCodesForPrepStmts()>();
        if $z1 == 0 goto label0;

        $r6 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String nativeSQL(java.lang.String)>(r1);
        goto label1;

     label0:
        $r6 = r1;

     label1:
        r2 = $r6;
        $z2 = r0.<com.mysql.jdbc.ConnectionImpl: boolean useServerPreparedStmts>;
        if $z2 == 0 goto label2;

        $z3 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getEmulateUnsupportedPstmts()>();
        if $z3 == 0 goto label2;

        z0 = specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean canHandleAsServerPreparedStatement(java.lang.String)>(r2);

     label2:
        $z4 = r0.<com.mysql.jdbc.ConnectionImpl: boolean useServerPreparedStmts>;
        if $z4 == 0 goto label20;

        if z0 == 0 goto label20;

        $z5 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getCachePreparedStatements()>();
        if $z5 == 0 goto label15;

        $r7 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.util.LRUCache serverSideStatementCache>;
        r3 = $r7;
        entermonitor $r7;

     label3:
        $r8 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.util.LRUCache serverSideStatementCache>;
        $r9 = virtualinvoke $r8.<com.mysql.jdbc.util.LRUCache: java.lang.Object remove(java.lang.Object)>(r1);
        r10 = (com.mysql.jdbc.ServerPreparedStatement) $r9;
        if r10 == null goto label4;

        $r11 = (com.mysql.jdbc.ServerPreparedStatement) r10;
        virtualinvoke $r11.<com.mysql.jdbc.ServerPreparedStatement: void setClosed(boolean)>(0);
        virtualinvoke r10.<com.mysql.jdbc.PreparedStatement: void clearParameters()>();

     label4:
        if r10 != null goto label10;

     label5:
        $r12 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String database>;
        r10 = staticinvoke <com.mysql.jdbc.ServerPreparedStatement: com.mysql.jdbc.ServerPreparedStatement getInstance(com.mysql.jdbc.ConnectionImpl,java.lang.String,java.lang.String,int,int)>(r0, r2, $r12, i0, i1);
        $i2 = virtualinvoke r1.<java.lang.String: int length()>();
        $i3 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: int getPreparedStatementCacheSqlLimit()>();
        if $i2 >= $i3 goto label6;

        $r13 = (com.mysql.jdbc.ServerPreparedStatement) r10;
        $r13.<com.mysql.jdbc.ServerPreparedStatement: boolean isCached> = 1;

     label6:
        virtualinvoke r10.<com.mysql.jdbc.PreparedStatement: void setResultSetType(int)>(i0);
        virtualinvoke r10.<com.mysql.jdbc.PreparedStatement: void setResultSetConcurrency(int)>(i1);

     label7:
        goto label10;

     label8:
        $r14 := @caughtexception;
        r4 = $r14;
        $z6 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getEmulateUnsupportedPstmts()>();
        if $z6 == 0 goto label9;

        $r15 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.sql.PreparedStatement clientPrepareStatement(java.lang.String,int,int,boolean)>(r2, i0, i1, 0);
        r10 = (com.mysql.jdbc.PreparedStatement) $r15;
        $i4 = virtualinvoke r1.<java.lang.String: int length()>();
        $i5 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: int getPreparedStatementCacheSqlLimit()>();
        if $i4 >= $i5 goto label10;

        $r16 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.util.LRUCache serverSideStatementCheckCache>;
        $r17 = <java.lang.Boolean: java.lang.Boolean FALSE>;
        virtualinvoke $r16.<com.mysql.jdbc.util.LRUCache: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r17);
        goto label10;

     label9:
        throw r4;

     label10:
        exitmonitor r3;

     label11:
        goto label21;

     label12:
        $r19 := @caughtexception;

     label13:
        r5 = $r19;
        exitmonitor r3;

     label14:
        throw r5;

     label15:
        $r20 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String database>;
        r10 = staticinvoke <com.mysql.jdbc.ServerPreparedStatement: com.mysql.jdbc.ServerPreparedStatement getInstance(com.mysql.jdbc.ConnectionImpl,java.lang.String,java.lang.String,int,int)>(r0, r2, $r20, i0, i1);
        virtualinvoke r10.<com.mysql.jdbc.PreparedStatement: void setResultSetType(int)>(i0);
        virtualinvoke r10.<com.mysql.jdbc.PreparedStatement: void setResultSetConcurrency(int)>(i1);

     label16:
        goto label21;

     label17:
        $r21 := @caughtexception;
        r22 = $r21;
        $z7 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getEmulateUnsupportedPstmts()>();
        if $z7 == 0 goto label18;

        $r23 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.sql.PreparedStatement clientPrepareStatement(java.lang.String,int,int,boolean)>(r2, i0, i1, 0);
        r10 = (com.mysql.jdbc.PreparedStatement) $r23;
        goto label19;

     label18:
        throw r22;

     label19:
        goto label21;

     label20:
        $r24 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.sql.PreparedStatement clientPrepareStatement(java.lang.String,int,int,boolean)>(r2, i0, i1, 0);
        r10 = (com.mysql.jdbc.PreparedStatement) $r24;

     label21:
        return r10;

        catch java.sql.SQLException from label5 to label7 with label8;
        catch java.lang.Throwable from label3 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
        catch java.sql.SQLException from label15 to label16 with label17;
    }

    public java.sql.PreparedStatement prepareStatement(java.lang.String, int, int, int) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1;
        int i0, i1, i2;
        boolean $z0;
        java.sql.SQLException $r2;
        java.sql.PreparedStatement $r3;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        $z0 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getPedantic()>();
        if $z0 == 0 goto label0;

        if i2 == 1 goto label0;

        $r2 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String,java.lang.String)>("HOLD_CUSRORS_OVER_COMMIT is only supported holdability level", "S1009");
        throw $r2;

     label0:
        $r3 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.sql.PreparedStatement prepareStatement(java.lang.String,int,int)>(r1, i0, i1);
        return $r3;
    }

    public java.sql.PreparedStatement prepareStatement(java.lang.String, int[]) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1;
        int[] r2;
        java.sql.PreparedStatement r3;
        com.mysql.jdbc.PreparedStatement $r4;
        int $i0;
        boolean $z0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: int[];
        r3 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.sql.PreparedStatement prepareStatement(java.lang.String)>(r1);
        $r4 = (com.mysql.jdbc.PreparedStatement) r3;
        if r2 == null goto label0;

        $i0 = lengthof r2;
        if $i0 <= 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        virtualinvoke $r4.<com.mysql.jdbc.PreparedStatement: void setRetrieveGeneratedKeys(boolean)>($z0);
        return r3;
    }

    public java.sql.PreparedStatement prepareStatement(java.lang.String, java.lang.String[]) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1;
        java.lang.String[] r2;
        java.sql.PreparedStatement r3;
        com.mysql.jdbc.PreparedStatement $r4;
        int $i0;
        boolean $z0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String[];
        r3 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.sql.PreparedStatement prepareStatement(java.lang.String)>(r1);
        $r4 = (com.mysql.jdbc.PreparedStatement) r3;
        if r2 == null goto label0;

        $i0 = lengthof r2;
        if $i0 <= 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        virtualinvoke $r4.<com.mysql.jdbc.PreparedStatement: void setRetrieveGeneratedKeys(boolean)>($z0);
        return r3;
    }

    protected void realClose(boolean, boolean, boolean, java.lang.Throwable) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        boolean z0, z1, z2, $z3, $z4, $z5;
        java.lang.Throwable r1, r6, $r12, $r17, $r25;
        java.sql.SQLException r2, r3, $r7, $r18, r19;
        long $l0, $l1, $l2, $l3, l4, $l6, $l7;
        java.lang.String $r4, r5, r8, $r11, $r15, $r16;
        com.mysql.jdbc.profiler.ProfilerEventHandler $r9, $r13;
        com.mysql.jdbc.profiler.ProfilerEvent $r10, $r14;
        byte $b5;
        com.mysql.jdbc.MysqlIO $r20, $r21, $r24;
        java.lang.Exception $r22, r23;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        z0 := @parameter0: boolean;
        z1 := @parameter1: boolean;
        z2 := @parameter2: boolean;
        r1 := @parameter3: java.lang.Throwable;
        r2 = null;
        $z3 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean isClosed()>();
        if $z3 == 0 goto label0;

        return;

     label0:
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.Throwable forceClosedReason> = r1;

     label1:
        if z2 != 0 goto label14;

        $z4 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getAutoCommit()>();
        if $z4 != 0 goto label5;

        if z1 == 0 goto label5;

     label2:
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void rollback()>();

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;
        r3 = $r7;
        r2 = r3;

     label5:
        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void reportMetrics()>();
        $z5 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getUseUsageAdvisor()>();
        if $z5 == 0 goto label7;

        if z0 != 0 goto label6;

        r8 = "Connection implicitly closed by Driver. You should call Connection.close() from your code to free resources more efficiently and avoid resource leaks.";
        $r9 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.profiler.ProfilerEventHandler eventSink>;
        $r10 = new com.mysql.jdbc.profiler.ProfilerEvent;
        $r11 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getCatalog()>();
        $l1 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: long getId()>();
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        $r4 = <com.mysql.jdbc.Constants: java.lang.String MILLIS_I18N>;
        $r12 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.Throwable pointOfOrigin>;
        specialinvoke $r10.<com.mysql.jdbc.profiler.ProfilerEvent: void <init>(byte,java.lang.String,java.lang.String,long,int,int,long,long,java.lang.String,java.lang.String,java.lang.Throwable,java.lang.String)>(0, "", $r11, $l1, -1, -1, $l0, 0L, $r4, null, $r12, r8);
        interfaceinvoke $r9.<com.mysql.jdbc.profiler.ProfilerEventHandler: void consumeEvent(com.mysql.jdbc.profiler.ProfilerEvent)>($r10);

     label6:
        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        $l3 = r0.<com.mysql.jdbc.ConnectionImpl: long connectionCreationTimeMillis>;
        l4 = $l2 - $l3;
        $b5 = l4 cmp 500L;
        if $b5 >= 0 goto label7;

        r5 = "Connection lifetime of < .5 seconds. You might be un-necessarily creating short-lived connections and should investigate connection pooling to be more efficient.";
        $r13 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.profiler.ProfilerEventHandler eventSink>;
        $r14 = new com.mysql.jdbc.profiler.ProfilerEvent;
        $r15 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getCatalog()>();
        $l6 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: long getId()>();
        $l7 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        $r16 = <com.mysql.jdbc.Constants: java.lang.String MILLIS_I18N>;
        $r17 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.Throwable pointOfOrigin>;
        specialinvoke $r14.<com.mysql.jdbc.profiler.ProfilerEvent: void <init>(byte,java.lang.String,java.lang.String,long,int,int,long,long,java.lang.String,java.lang.String,java.lang.Throwable,java.lang.String)>(0, "", $r15, $l6, -1, -1, $l7, 0L, $r16, null, $r17, r5);
        interfaceinvoke $r13.<com.mysql.jdbc.profiler.ProfilerEventHandler: void consumeEvent(com.mysql.jdbc.profiler.ProfilerEvent)>($r14);

     label7:
        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void closeAllOpenStatements()>();

     label8:
        goto label10;

     label9:
        $r18 := @caughtexception;
        r19 = $r18;
        r2 = r19;

     label10:
        $r20 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        if $r20 == null goto label15;

     label11:
        $r21 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        virtualinvoke $r21.<com.mysql.jdbc.MysqlIO: void quit()>();

     label12:
        goto label15;

     label13:
        $r22 := @caughtexception;
        r23 = $r22;
        goto label15;

     label14:
        $r24 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        virtualinvoke $r24.<com.mysql.jdbc.MysqlIO: void forceClose()>();

     label15:
        goto label22;

     label16:
        goto label20;

     label17:
        $r25 := @caughtexception;

     label18:
        r6 = $r25;
        goto label23;

     label19:
        throw r6;

     label20:
        if r2 == null goto label21;

        throw r2;

     label21:
        return;

     label22:
        r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map openStatements> = null;
        r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io> = null;
        staticinvoke <com.mysql.jdbc.profiler.ProfilerEventHandlerFactory: void removeInstance(com.mysql.jdbc.Connection)>(r0);
        r0.<com.mysql.jdbc.ConnectionImpl: boolean isClosed> = 1;
        goto label16;

     label23:
        r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map openStatements> = null;
        r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io> = null;
        staticinvoke <com.mysql.jdbc.profiler.ProfilerEventHandlerFactory: void removeInstance(com.mysql.jdbc.Connection)>(r0);
        r0.<com.mysql.jdbc.ConnectionImpl: boolean isClosed> = 1;
        goto label19;

        catch java.sql.SQLException from label2 to label3 with label4;
        catch java.sql.SQLException from label7 to label8 with label9;
        catch java.lang.Exception from label11 to label12 with label13;
        catch java.lang.Throwable from label1 to label16 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    protected void recachePreparedStatement(com.mysql.jdbc.ServerPreparedStatement) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        com.mysql.jdbc.ServerPreparedStatement r1;
        com.mysql.jdbc.util.LRUCache r2, $r4, $r5;
        java.lang.Throwable r3, $r8;
        boolean $z0;
        java.lang.String $r6;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: com.mysql.jdbc.ServerPreparedStatement;
        $z0 = virtualinvoke r1.<com.mysql.jdbc.ServerPreparedStatement: boolean isPoolable()>();
        if $z0 == 0 goto label5;

        $r4 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.util.LRUCache serverSideStatementCache>;
        r2 = $r4;
        entermonitor $r4;

     label0:
        $r5 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.util.LRUCache serverSideStatementCache>;
        $r6 = r1.<com.mysql.jdbc.ServerPreparedStatement: java.lang.String originalSql>;
        virtualinvoke $r5.<com.mysql.jdbc.util.LRUCache: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r1);
        exitmonitor r2;

     label1:
        goto label5;

     label2:
        $r8 := @caughtexception;

     label3:
        r3 = $r8;
        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    protected void registerQueryExecutionTime(long)
    {
        com.mysql.jdbc.ConnectionImpl r0;
        long l0, $l1, $l3, $l6, $l7, $l8;
        byte $b2, $b4, $b5;
        double $d0, $d1, $d2;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        l0 := @parameter0: long;
        $l1 = r0.<com.mysql.jdbc.ConnectionImpl: long longestQueryTimeMs>;
        $b2 = l0 cmp $l1;
        if $b2 <= 0 goto label0;

        r0.<com.mysql.jdbc.ConnectionImpl: long longestQueryTimeMs> = l0;
        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void repartitionPerformanceHistogram()>();

     label0:
        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void addToPerformanceHistogram(long,int)>(l0, 1);
        $l3 = r0.<com.mysql.jdbc.ConnectionImpl: long shortestQueryTimeMs>;
        $b4 = l0 cmp $l3;
        if $b4 >= 0 goto label3;

        $b5 = l0 cmp 0L;
        if $b5 != 0 goto label1;

        $l6 = 1L;
        goto label2;

     label1:
        $l6 = l0;

     label2:
        r0.<com.mysql.jdbc.ConnectionImpl: long shortestQueryTimeMs> = $l6;

     label3:
        $l7 = r0.<com.mysql.jdbc.ConnectionImpl: long numberOfQueriesIssued>;
        $l8 = $l7 + 1L;
        r0.<com.mysql.jdbc.ConnectionImpl: long numberOfQueriesIssued> = $l8;
        $d0 = r0.<com.mysql.jdbc.ConnectionImpl: double totalQueryTimeMs>;
        $d1 = (double) l0;
        $d2 = $d0 + $d1;
        r0.<com.mysql.jdbc.ConnectionImpl: double totalQueryTimeMs> = $d2;
        return;
    }

    void registerStatement(com.mysql.jdbc.StatementImpl)
    {
        com.mysql.jdbc.ConnectionImpl r0;
        com.mysql.jdbc.StatementImpl r1;
        java.util.Map r2, $r4, $r5;
        java.lang.Throwable r3, $r7;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: com.mysql.jdbc.StatementImpl;
        $r4 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map openStatements>;
        r2 = $r4;
        entermonitor $r4;

     label0:
        $r5 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map openStatements>;
        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r1);
        exitmonitor r2;

     label1:
        goto label5;

     label2:
        $r7 := @caughtexception;

     label3:
        r3 = $r7;
        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public void releaseSavepoint(java.sql.Savepoint) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.sql.Savepoint r1;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.sql.Savepoint;
        return;
    }

    private void repartitionHistogram(int[], long[], long, long)
    {
        com.mysql.jdbc.ConnectionImpl r0;
        int[] r1, $r3, $r4, $r6, $r9;
        long[] r2, $r5, $r7, $r8;
        long l0, l1, $l7;
        int i2, $i3, $i4, $i5, $i6, $i8;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: int[];
        r2 := @parameter1: long[];
        l0 := @parameter2: long;
        l1 := @parameter3: long;
        $r3 = r0.<com.mysql.jdbc.ConnectionImpl: int[] oldHistCounts>;
        if $r3 != null goto label0;

        $i3 = lengthof r1;
        $r4 = newarray (int)[$i3];
        r0.<com.mysql.jdbc.ConnectionImpl: int[] oldHistCounts> = $r4;
        $i4 = lengthof r2;
        $r5 = newarray (long)[$i4];
        r0.<com.mysql.jdbc.ConnectionImpl: long[] oldHistBreakpoints> = $r5;

     label0:
        $r6 = r0.<com.mysql.jdbc.ConnectionImpl: int[] oldHistCounts>;
        $i5 = lengthof r1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r6, 0, $i5);
        $r7 = r0.<com.mysql.jdbc.ConnectionImpl: long[] oldHistBreakpoints>;
        $i6 = lengthof r2;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r7, 0, $i6);
        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void createInitialHistogram(long[],long,long)>(r2, l0, l1);
        i2 = 0;

     label1:
        if i2 >= 20 goto label2;

        $r8 = r0.<com.mysql.jdbc.ConnectionImpl: long[] oldHistBreakpoints>;
        $l7 = $r8[i2];
        $r9 = r0.<com.mysql.jdbc.ConnectionImpl: int[] oldHistCounts>;
        $i8 = $r9[i2];
        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void addToHistogram(int[],long[],long,int,long,long)>(r1, r2, $l7, $i8, l0, l1);
        i2 = i2 + 1;
        goto label1;

     label2:
        return;
    }

    private void repartitionPerformanceHistogram()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        int[] $r2;
        long[] $r3;
        long $l0, $l2, $l3;
        byte $b1;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void checkAndCreatePerformanceHistogram()>();
        $r2 = r0.<com.mysql.jdbc.ConnectionImpl: int[] perfMetricsHistCounts>;
        $r3 = r0.<com.mysql.jdbc.ConnectionImpl: long[] perfMetricsHistBreakpoints>;
        $l0 = r0.<com.mysql.jdbc.ConnectionImpl: long shortestQueryTimeMs>;
        $b1 = $l0 cmp 9223372036854775807L;
        if $b1 != 0 goto label0;

        $l2 = 0L;
        goto label1;

     label0:
        $l2 = r0.<com.mysql.jdbc.ConnectionImpl: long shortestQueryTimeMs>;

     label1:
        $l3 = r0.<com.mysql.jdbc.ConnectionImpl: long longestQueryTimeMs>;
        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void repartitionHistogram(int[],long[],long,long)>($r2, $r3, $l2, $l3);
        return;
    }

    private void repartitionTablesAccessedHistogram()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        int[] $r2;
        long[] $r3;
        long $l0, $l2, $l3;
        byte $b1;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void checkAndCreateTablesAccessedHistogram()>();
        $r2 = r0.<com.mysql.jdbc.ConnectionImpl: int[] numTablesMetricsHistCounts>;
        $r3 = r0.<com.mysql.jdbc.ConnectionImpl: long[] numTablesMetricsHistBreakpoints>;
        $l0 = r0.<com.mysql.jdbc.ConnectionImpl: long minimumNumberTablesAccessed>;
        $b1 = $l0 cmp 9223372036854775807L;
        if $b1 != 0 goto label0;

        $l2 = 0L;
        goto label1;

     label0:
        $l2 = r0.<com.mysql.jdbc.ConnectionImpl: long minimumNumberTablesAccessed>;

     label1:
        $l3 = r0.<com.mysql.jdbc.ConnectionImpl: long maximumNumberTablesAccessed>;
        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void repartitionHistogram(int[],long[],long,long)>($r2, $r3, $l2, $l3);
        return;
    }

    private void reportMetrics()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.StringBuffer r1, $r2, $r4, $r5, $r6, $r7, $r10, $r11, $r12, $r13, $r16, $r17, $r18, $r19, $r22, $r23, $r24, $r27, $r28, $r29, $r32, $r33, $r34, $r37, $r38, $r39, $r46, $r47, $r49, $r50, $r52, $r55, $r56, $r58, $r59, $r61, $r62, $r64, $r85, $r86, $r88, $r89, $r91, $r94, $r95, $r97, $r98, $r100, $r101, $r103;
        byte b0, $b26, $b29, b33, $b51, $b54;
        int i1, i2, i3, i4, $i12, i13, $i14, $i16, $i18, $i20, $i21, $i23, $i24, $i32, i34, i35, $i36, i37, $i38, $i40, $i42, $i44, $i45, i46, i47, $i49, $i57;
        boolean $z0;
        long $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l15, $l17, $l19, $l22, $l25, $l27, $l28, $l30, $l31, $l39, $l41, $l43, $l48, $l50, $l52, $l53, $l55, $l56, $l58;
        java.lang.String $r8, $r14, $r20, $r25, $r30, $r35, $r40, $r53, $r65, $r92, $r104;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12;
        long[] $r42, $r48, $r57, $r60, $r71, $r73, $r76, $r81, $r87, $r96, $r99, $r109, $r110, $r112, $r115;
        int[] $r44, $r45, $r51, $r63, $r68, $r70, $r79, $r83, $r84, $r90, $r102, $r107, $r118;
        com.mysql.jdbc.log.Log $r120;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $z0 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getGatherPerformanceMetrics()>();
        if $z0 == 0 goto label24;

        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>(int)>(256);
        r1 = $r2;
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("** Performance Metrics Report **\n");
        $r4 = new java.lang.StringBuffer;
        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();
        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\nLongest reported query: ");
        $l5 = r0.<com.mysql.jdbc.ConnectionImpl: long longestQueryTimeMs>;
        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l5);
        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ms");
        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);
        $r10 = new java.lang.StringBuffer;
        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();
        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\nShortest reported query: ");
        $l6 = r0.<com.mysql.jdbc.ConnectionImpl: long shortestQueryTimeMs>;
        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l6);
        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ms");
        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);
        $r16 = new java.lang.StringBuffer;
        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();
        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\nAverage query execution time: ");
        $d0 = r0.<com.mysql.jdbc.ConnectionImpl: double totalQueryTimeMs>;
        $l7 = r0.<com.mysql.jdbc.ConnectionImpl: long numberOfQueriesIssued>;
        $d1 = (double) $l7;
        $d2 = $d0 / $d1;
        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>($d2);
        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ms");
        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);
        $r22 = new java.lang.StringBuffer;
        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();
        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\nNumber of statements executed: ");
        $l8 = r0.<com.mysql.jdbc.ConnectionImpl: long numberOfQueriesIssued>;
        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l8);
        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r25);
        $r27 = new java.lang.StringBuffer;
        specialinvoke $r27.<java.lang.StringBuffer: void <init>()>();
        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\nNumber of result sets created: ");
        $l9 = r0.<com.mysql.jdbc.ConnectionImpl: long numberOfResultSetsCreated>;
        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l9);
        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r30);
        $r32 = new java.lang.StringBuffer;
        specialinvoke $r32.<java.lang.StringBuffer: void <init>()>();
        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\nNumber of statements prepared: ");
        $l10 = r0.<com.mysql.jdbc.ConnectionImpl: long numberOfPrepares>;
        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l10);
        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r35);
        $r37 = new java.lang.StringBuffer;
        specialinvoke $r37.<java.lang.StringBuffer: void <init>()>();
        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\nNumber of prepared statement executions: ");
        $l11 = r0.<com.mysql.jdbc.ConnectionImpl: long numberOfPreparedExecutes>;
        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l11);
        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r40);
        $r42 = r0.<com.mysql.jdbc.ConnectionImpl: long[] perfMetricsHistBreakpoints>;
        if $r42 == null goto label11;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\n\tTiming Histogram:\n");
        b0 = 20;
        i1 = -2147483648;
        i2 = 0;

     label0:
        if i2 >= 20 goto label2;

        $r44 = r0.<com.mysql.jdbc.ConnectionImpl: int[] perfMetricsHistCounts>;
        $i12 = $r44[i2];
        if $i12 <= i1 goto label1;

        $r45 = r0.<com.mysql.jdbc.ConnectionImpl: int[] perfMetricsHistCounts>;
        i1 = $r45[i2];

     label1:
        i2 = i2 + 1;
        goto label0;

     label2:
        if i1 != 0 goto label3;

        i1 = 1;

     label3:
        i13 = 0;

     label4:
        if i13 >= 19 goto label10;

        if i13 != 0 goto label5;

        $r46 = new java.lang.StringBuffer;
        specialinvoke $r46.<java.lang.StringBuffer: void <init>()>();
        $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\tless than ");
        $r48 = r0.<com.mysql.jdbc.ConnectionImpl: long[] perfMetricsHistBreakpoints>;
        $i14 = i13 + 1;
        $l15 = $r48[$i14];
        $r49 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l15);
        $r50 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ms: \t");
        $r51 = r0.<com.mysql.jdbc.ConnectionImpl: int[] perfMetricsHistCounts>;
        $i16 = $r51[i13];
        $r52 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i16);
        $r53 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r53);
        goto label6;

     label5:
        $r55 = new java.lang.StringBuffer;
        specialinvoke $r55.<java.lang.StringBuffer: void <init>()>();
        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\tbetween ");
        $r57 = r0.<com.mysql.jdbc.ConnectionImpl: long[] perfMetricsHistBreakpoints>;
        $l17 = $r57[i13];
        $r58 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l17);
        $r59 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" and ");
        $r60 = r0.<com.mysql.jdbc.ConnectionImpl: long[] perfMetricsHistBreakpoints>;
        $i18 = i13 + 1;
        $l19 = $r60[$i18];
        $r61 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l19);
        $r62 = virtualinvoke $r61.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ms: \t");
        $r63 = r0.<com.mysql.jdbc.ConnectionImpl: int[] perfMetricsHistCounts>;
        $i20 = $r63[i13];
        $r64 = virtualinvoke $r62.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i20);
        $r65 = virtualinvoke $r64.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r65);

     label6:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t");
        $d3 = (double) b0;
        $r68 = r0.<com.mysql.jdbc.ConnectionImpl: int[] perfMetricsHistCounts>;
        $i21 = $r68[i13];
        $d4 = (double) $i21;
        $d5 = (double) i1;
        $d6 = $d4 / $d5;
        $d7 = $d3 * $d6;
        i3 = (int) $d7;
        i4 = 0;

     label7:
        if i4 >= i3 goto label8;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("*");
        i4 = i4 + 1;
        goto label7;

     label8:
        $l22 = r0.<com.mysql.jdbc.ConnectionImpl: long longestQueryTimeMs>;
        $r70 = r0.<com.mysql.jdbc.ConnectionImpl: int[] perfMetricsHistCounts>;
        $i23 = i13 + 1;
        $i24 = $r70[$i23];
        $l25 = (long) $i24;
        $b26 = $l22 cmp $l25;
        if $b26 >= 0 goto label9;

        goto label10;

     label9:
        i13 = i13 + 1;
        goto label4;

     label10:
        $r71 = r0.<com.mysql.jdbc.ConnectionImpl: long[] perfMetricsHistBreakpoints>;
        $l27 = $r71[18];
        $l28 = r0.<com.mysql.jdbc.ConnectionImpl: long longestQueryTimeMs>;
        $b29 = $l27 cmp $l28;
        if $b29 >= 0 goto label11;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\tbetween ");
        $r73 = r0.<com.mysql.jdbc.ConnectionImpl: long[] perfMetricsHistBreakpoints>;
        $l30 = $r73[18];
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l30);
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" and ");
        $r76 = r0.<com.mysql.jdbc.ConnectionImpl: long[] perfMetricsHistBreakpoints>;
        $l31 = $r76[19];
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l31);
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ms: \t");
        $r79 = r0.<com.mysql.jdbc.ConnectionImpl: int[] perfMetricsHistCounts>;
        $i32 = $r79[19];
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i32);

     label11:
        $r81 = r0.<com.mysql.jdbc.ConnectionImpl: long[] numTablesMetricsHistBreakpoints>;
        if $r81 == null goto label23;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\n\tTable Join Histogram:\n");
        b33 = 20;
        i34 = -2147483648;
        i35 = 0;

     label12:
        if i35 >= 20 goto label14;

        $r83 = r0.<com.mysql.jdbc.ConnectionImpl: int[] numTablesMetricsHistCounts>;
        $i36 = $r83[i35];
        if $i36 <= i34 goto label13;

        $r84 = r0.<com.mysql.jdbc.ConnectionImpl: int[] numTablesMetricsHistCounts>;
        i34 = $r84[i35];

     label13:
        i35 = i35 + 1;
        goto label12;

     label14:
        if i34 != 0 goto label15;

        i34 = 1;

     label15:
        i37 = 0;

     label16:
        if i37 >= 19 goto label22;

        if i37 != 0 goto label17;

        $r85 = new java.lang.StringBuffer;
        specialinvoke $r85.<java.lang.StringBuffer: void <init>()>();
        $r86 = virtualinvoke $r85.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t");
        $r87 = r0.<com.mysql.jdbc.ConnectionImpl: long[] numTablesMetricsHistBreakpoints>;
        $i38 = i37 + 1;
        $l39 = $r87[$i38];
        $r88 = virtualinvoke $r86.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l39);
        $r89 = virtualinvoke $r88.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" tables or less: \t\t");
        $r90 = r0.<com.mysql.jdbc.ConnectionImpl: int[] numTablesMetricsHistCounts>;
        $i40 = $r90[i37];
        $r91 = virtualinvoke $r89.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i40);
        $r92 = virtualinvoke $r91.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r92);
        goto label18;

     label17:
        $r94 = new java.lang.StringBuffer;
        specialinvoke $r94.<java.lang.StringBuffer: void <init>()>();
        $r95 = virtualinvoke $r94.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\tbetween ");
        $r96 = r0.<com.mysql.jdbc.ConnectionImpl: long[] numTablesMetricsHistBreakpoints>;
        $l41 = $r96[i37];
        $r97 = virtualinvoke $r95.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l41);
        $r98 = virtualinvoke $r97.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" and ");
        $r99 = r0.<com.mysql.jdbc.ConnectionImpl: long[] numTablesMetricsHistBreakpoints>;
        $i42 = i37 + 1;
        $l43 = $r99[$i42];
        $r100 = virtualinvoke $r98.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l43);
        $r101 = virtualinvoke $r100.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" tables: \t");
        $r102 = r0.<com.mysql.jdbc.ConnectionImpl: int[] numTablesMetricsHistCounts>;
        $i44 = $r102[i37];
        $r103 = virtualinvoke $r101.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i44);
        $r104 = virtualinvoke $r103.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r104);

     label18:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t");
        $d8 = (double) b33;
        $r107 = r0.<com.mysql.jdbc.ConnectionImpl: int[] numTablesMetricsHistCounts>;
        $i45 = $r107[i37];
        $d9 = (double) $i45;
        $d10 = (double) i34;
        $d11 = $d9 / $d10;
        $d12 = $d8 * $d11;
        i46 = (int) $d12;
        i47 = 0;

     label19:
        if i47 >= i46 goto label20;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("*");
        i47 = i47 + 1;
        goto label19;

     label20:
        $l48 = r0.<com.mysql.jdbc.ConnectionImpl: long maximumNumberTablesAccessed>;
        $r109 = r0.<com.mysql.jdbc.ConnectionImpl: long[] numTablesMetricsHistBreakpoints>;
        $i49 = i37 + 1;
        $l50 = $r109[$i49];
        $b51 = $l48 cmp $l50;
        if $b51 >= 0 goto label21;

        goto label22;

     label21:
        i37 = i37 + 1;
        goto label16;

     label22:
        $r110 = r0.<com.mysql.jdbc.ConnectionImpl: long[] numTablesMetricsHistBreakpoints>;
        $l52 = $r110[18];
        $l53 = r0.<com.mysql.jdbc.ConnectionImpl: long maximumNumberTablesAccessed>;
        $b54 = $l52 cmp $l53;
        if $b54 >= 0 goto label23;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\tbetween ");
        $r112 = r0.<com.mysql.jdbc.ConnectionImpl: long[] numTablesMetricsHistBreakpoints>;
        $l55 = $r112[18];
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l55);
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" and ");
        $r115 = r0.<com.mysql.jdbc.ConnectionImpl: long[] numTablesMetricsHistBreakpoints>;
        $l56 = $r115[19];
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l56);
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" tables: ");
        $r118 = r0.<com.mysql.jdbc.ConnectionImpl: int[] numTablesMetricsHistCounts>;
        $i57 = $r118[19];
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i57);

     label23:
        $r120 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.log.Log log>;
        interfaceinvoke $r120.<com.mysql.jdbc.log.Log: void logInfo(java.lang.Object)>(r1);
        $l58 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        r0.<com.mysql.jdbc.ConnectionImpl: long metricsLastReportedMs> = $l58;

     label24:
        return;
    }

    private void reportMetricsIfNeeded()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        boolean $z0;
        long $l0, $l1, $l2, $l4;
        int $i3;
        byte $b5;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $z0 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getGatherPerformanceMetrics()>();
        if $z0 == 0 goto label0;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        $l1 = r0.<com.mysql.jdbc.ConnectionImpl: long metricsLastReportedMs>;
        $l2 = $l0 - $l1;
        $i3 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: int getReportMetricsIntervalMillis()>();
        $l4 = (long) $i3;
        $b5 = $l2 cmp $l4;
        if $b5 <= 0 goto label0;

        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void reportMetrics()>();

     label0:
        return;
    }

    protected void reportNumberOfTablesAccessed(int)
    {
        com.mysql.jdbc.ConnectionImpl r0;
        int i0;
        long $l1, $l2, $l4, $l5, $l6, $l8, $l9;
        byte $b3, $b7;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        i0 := @parameter0: int;
        $l1 = (long) i0;
        $l2 = r0.<com.mysql.jdbc.ConnectionImpl: long minimumNumberTablesAccessed>;
        $b3 = $l1 cmp $l2;
        if $b3 >= 0 goto label0;

        $l4 = (long) i0;
        r0.<com.mysql.jdbc.ConnectionImpl: long minimumNumberTablesAccessed> = $l4;

     label0:
        $l5 = (long) i0;
        $l6 = r0.<com.mysql.jdbc.ConnectionImpl: long maximumNumberTablesAccessed>;
        $b7 = $l5 cmp $l6;
        if $b7 <= 0 goto label1;

        $l8 = (long) i0;
        r0.<com.mysql.jdbc.ConnectionImpl: long maximumNumberTablesAccessed> = $l8;
        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void repartitionTablesAccessedHistogram()>();

     label1:
        $l9 = (long) i0;
        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void addToTablesAccessedHistogram(long,int)>($l9, 1);
        return;
    }

    public void resetServerState() throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        boolean $z0, $z1;
        com.mysql.jdbc.MysqlIO $r1;
        java.lang.String $r2, $r3;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $z0 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getParanoid()>();
        if $z0 != 0 goto label0;

        $r1 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        if $r1 == null goto label0;

        $z1 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean versionMeetsMinimum(int,int,int)>(4, 0, 6);
        if $z1 == 0 goto label0;

        $r2 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String user>;
        $r3 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String password>;
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void changeUser(java.lang.String,java.lang.String)>($r2, $r3);

     label0:
        return;
    }

    public void rollback() throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.Object r1, $r5;
        com.mysql.jdbc.ConnectionImpl$5 r2, $r7;
        java.lang.Throwable r3, r4, $r18, $r19;
        java.util.List $r6, $r8;
        java.util.Iterator $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.sql.SQLException $r10, $r11, r12, $r13, r14, $r17;
        int $i0;
        java.lang.String $r15, $r16;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $r5 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.Object getMutex()>();
        r1 = $r5;
        entermonitor $r5;

     label0:
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void checkClosed()>();

     label1:
        $r6 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.List connectionLifecycleInterceptors>;
        if $r6 == null goto label4;

        $r7 = new com.mysql.jdbc.ConnectionImpl$5;
        $r8 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.List connectionLifecycleInterceptors>;
        $r9 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();
        specialinvoke $r7.<com.mysql.jdbc.ConnectionImpl$5: void <init>(com.mysql.jdbc.ConnectionImpl,java.util.Iterator)>(r0, $r9);
        r2 = $r7;
        virtualinvoke r2.<com.mysql.jdbc.IterateBlock: void doForAll()>();
        $z0 = virtualinvoke r2.<com.mysql.jdbc.IterateBlock: boolean fullIteration()>();
        if $z0 != 0 goto label4;

     label2:
        $z1 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getReconnectAtTxEnd()>();
        r0.<com.mysql.jdbc.ConnectionImpl: boolean needsPing> = $z1;
        exitmonitor r1;

     label3:
        return;

     label4:
        $z2 = r0.<com.mysql.jdbc.ConnectionImpl: boolean autoCommit>;
        if $z2 == 0 goto label5;

        $z3 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getRelaxAutoCommit()>();
        if $z3 != 0 goto label5;

        $r10 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String,java.lang.String)>("Can\'t call rollback when autocommit=true", "08003");
        throw $r10;

     label5:
        $z4 = r0.<com.mysql.jdbc.ConnectionImpl: boolean transactionsSupported>;
        if $z4 == 0 goto label9;

     label6:
        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void rollbackNoChecks()>();

     label7:
        goto label9;

     label8:
        $r11 := @caughtexception;
        r12 = $r11;
        $z5 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getIgnoreNonTxTables()>();
        if $z5 == 0 goto label9;

        $i0 = virtualinvoke r12.<java.sql.SQLException: int getErrorCode()>();
        if $i0 == 1196 goto label9;

        throw r12;

     label9:
        $z6 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getReconnectAtTxEnd()>();
        r0.<com.mysql.jdbc.ConnectionImpl: boolean needsPing> = $z6;
        goto label15;

     label10:
        $r13 := @caughtexception;

     label11:
        r14 = $r13;
        $r15 = "08S01";
        $r16 = virtualinvoke r14.<java.sql.SQLException: java.lang.String getSQLState()>();
        $z7 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r16);
        if $z7 == 0 goto label12;

        $r17 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String,java.lang.String)>("Communications link failure during rollback(). Transaction resolution unknown.", "08007");
        throw $r17;

     label12:
        throw r14;

     label13:
        $r18 := @caughtexception;
        r3 = $r18;

     label14:
        $z8 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getReconnectAtTxEnd()>();
        r0.<com.mysql.jdbc.ConnectionImpl: boolean needsPing> = $z8;
        throw r3;

     label15:
        exitmonitor r1;

     label16:
        goto label20;

     label17:
        $r19 := @caughtexception;

     label18:
        r4 = $r19;
        exitmonitor r1;

     label19:
        throw r4;

     label20:
        return;

        catch java.sql.SQLException from label6 to label7 with label8;
        catch java.sql.SQLException from label1 to label2 with label10;
        catch java.sql.SQLException from label4 to label9 with label10;
        catch java.lang.Throwable from label1 to label2 with label13;
        catch java.lang.Throwable from label4 to label9 with label13;
        catch java.lang.Throwable from label11 to label14 with label13;
        catch java.lang.Throwable from label0 to label3 with label17;
        catch java.lang.Throwable from label4 to label16 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    public void rollback(java.sql.Savepoint) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.sql.Savepoint r1;
        java.lang.Object r2, $r10;
        com.mysql.jdbc.ConnectionImpl$6 r3, $r12;
        java.sql.Statement r4;
        java.sql.SQLException r5, $r22, $r29, $r32, $r36;
        int i0, i1, $i3;
        java.lang.String r6, $r18, $r21, $r25, $r28, $r30, $r31;
        java.lang.Throwable r7, r8, r9, $r33, $r34, $r35;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.util.List $r11, $r13;
        java.util.Iterator $r14;
        java.lang.StringBuffer $r15, r16, $r23, $r24, $r26, $r27;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.sql.Savepoint;
        $z0 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean versionMeetsMinimum(int,int,int)>(4, 0, 14);
        if $z0 != 0 goto label0;

        $z1 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean versionMeetsMinimum(int,int,int)>(4, 1, 1);
        if $z1 == 0 goto label24;

     label0:
        $r10 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.Object getMutex()>();
        r2 = $r10;
        entermonitor $r10;

     label1:
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void checkClosed()>();

     label2:
        $r11 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.List connectionLifecycleInterceptors>;
        if $r11 == null goto label5;

        $r12 = new com.mysql.jdbc.ConnectionImpl$6;
        $r13 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.List connectionLifecycleInterceptors>;
        $r14 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();
        specialinvoke $r12.<com.mysql.jdbc.ConnectionImpl$6: void <init>(com.mysql.jdbc.ConnectionImpl,java.util.Iterator,java.sql.Savepoint)>(r0, $r14, r1);
        r3 = $r12;
        virtualinvoke r3.<com.mysql.jdbc.IterateBlock: void doForAll()>();
        $z2 = virtualinvoke r3.<com.mysql.jdbc.IterateBlock: boolean fullIteration()>();
        if $z2 != 0 goto label5;

     label3:
        $z3 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getReconnectAtTxEnd()>();
        r0.<com.mysql.jdbc.ConnectionImpl: boolean needsPing> = $z3;
        exitmonitor r2;

     label4:
        return;

     label5:
        $r15 = new java.lang.StringBuffer;
        specialinvoke $r15.<java.lang.StringBuffer: void <init>(java.lang.String)>("ROLLBACK TO SAVEPOINT ");
        r16 = $r15;
        virtualinvoke r16.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(96);
        $r18 = interfaceinvoke r1.<java.sql.Savepoint: java.lang.String getSavepointName()>();
        virtualinvoke r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);
        virtualinvoke r16.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(96);
        r4 = null;

     label6:
        r4 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.sql.Statement getMetadataSafeStatement()>();
        $r21 = virtualinvoke r16.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke r4.<java.sql.Statement: int executeUpdate(java.lang.String)>($r21);

     label7:
        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void closeStatement(java.sql.Statement)>(r4);
        goto label15;

     label8:
        $r22 := @caughtexception;

     label9:
        r5 = $r22;
        i0 = virtualinvoke r5.<java.sql.SQLException: int getErrorCode()>();
        if i0 != 1181 goto label10;

        r6 = virtualinvoke r5.<java.sql.SQLException: java.lang.String getMessage()>();
        if r6 == null goto label10;

        i1 = virtualinvoke r6.<java.lang.String: int indexOf(java.lang.String)>("153");
        if i1 == -1 goto label10;

        $r23 = new java.lang.StringBuffer;
        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();
        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Savepoint \'");
        $r25 = interfaceinvoke r1.<java.sql.Savepoint: java.lang.String getSavepointName()>();
        $r26 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r25);
        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' does not exist");
        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();
        $r29 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String,java.lang.String,int)>($r28, "S1009", i0);
        throw $r29;

     label10:
        $z4 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getIgnoreNonTxTables()>();
        if $z4 == 0 goto label11;

        $i3 = virtualinvoke r5.<java.sql.SQLException: int getErrorCode()>();
        if $i3 == 1196 goto label11;

        throw r5;

     label11:
        $r30 = "08S01";
        $r31 = virtualinvoke r5.<java.sql.SQLException: java.lang.String getSQLState()>();
        $z5 = virtualinvoke $r30.<java.lang.String: boolean equals(java.lang.Object)>($r31);
        if $z5 == 0 goto label12;

        $r32 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String,java.lang.String)>("Communications link failure during rollback(). Transaction resolution unknown.", "08007");
        throw $r32;

     label12:
        throw r5;

     label13:
        $r33 := @caughtexception;
        r7 = $r33;

     label14:
        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void closeStatement(java.sql.Statement)>(r4);
        throw r7;

     label15:
        $z6 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getReconnectAtTxEnd()>();
        r0.<com.mysql.jdbc.ConnectionImpl: boolean needsPing> = $z6;
        goto label19;

     label16:
        $r34 := @caughtexception;

     label17:
        r8 = $r34;

     label18:
        $z7 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getReconnectAtTxEnd()>();
        r0.<com.mysql.jdbc.ConnectionImpl: boolean needsPing> = $z7;
        throw r8;

     label19:
        exitmonitor r2;

     label20:
        goto label25;

     label21:
        $r35 := @caughtexception;

     label22:
        r9 = $r35;
        exitmonitor r2;

     label23:
        throw r9;

     label24:
        $r36 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException notImplemented()>();
        throw $r36;

     label25:
        return;

        catch java.sql.SQLException from label6 to label7 with label8;
        catch java.lang.Throwable from label6 to label7 with label13;
        catch java.lang.Throwable from label9 to label14 with label13;
        catch java.lang.Throwable from label2 to label3 with label16;
        catch java.lang.Throwable from label5 to label15 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
        catch java.lang.Throwable from label1 to label4 with label21;
        catch java.lang.Throwable from label5 to label20 with label21;
        catch java.lang.Throwable from label22 to label23 with label21;
    }

    private void rollbackNoChecks() throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        boolean $z0, $z1, $z2;
        com.mysql.jdbc.MysqlIO $r1;
        java.lang.String $r2;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $z0 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getUseLocalSessionState()>();
        if $z0 == 0 goto label0;

        $z1 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean versionMeetsMinimum(int,int,int)>(5, 0, 0);
        if $z1 == 0 goto label0;

        $r1 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        $z2 = virtualinvoke $r1.<com.mysql.jdbc.MysqlIO: boolean inTransactionOnServer()>();
        if $z2 != 0 goto label0;

        return;

     label0:
        $r2 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String database>;
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.ResultSetInternalMethods execSQL(com.mysql.jdbc.StatementImpl,java.lang.String,int,com.mysql.jdbc.Buffer,int,int,boolean,java.lang.String,com.mysql.jdbc.Field[],boolean)>(null, "rollback", -1, null, 1003, 1007, 0, $r2, null, 0);
        return;
    }

    public java.sql.PreparedStatement serverPrepareStatement(java.lang.String) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1, r2, $r3, $r4;
        boolean $z0;
        com.mysql.jdbc.ServerPreparedStatement $r5;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.lang.String;
        $z0 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getProcessEscapeCodesForPrepStmts()>();
        if $z0 == 0 goto label0;

        $r3 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String nativeSQL(java.lang.String)>(r1);
        goto label1;

     label0:
        $r3 = r1;

     label1:
        r2 = $r3;
        $r4 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getCatalog()>();
        $r5 = staticinvoke <com.mysql.jdbc.ServerPreparedStatement: com.mysql.jdbc.ServerPreparedStatement getInstance(com.mysql.jdbc.ConnectionImpl,java.lang.String,java.lang.String,int,int)>(r0, r2, $r4, 1005, 1007);
        return $r5;
    }

    public java.sql.PreparedStatement serverPrepareStatement(java.lang.String, int) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1, r2, $r4, $r5;
        int i0;
        com.mysql.jdbc.ServerPreparedStatement r3;
        boolean $z0, $z1;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        $z0 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getProcessEscapeCodesForPrepStmts()>();
        if $z0 == 0 goto label0;

        $r4 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String nativeSQL(java.lang.String)>(r1);
        goto label1;

     label0:
        $r4 = r1;

     label1:
        r2 = $r4;
        $r5 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getCatalog()>();
        r3 = staticinvoke <com.mysql.jdbc.ServerPreparedStatement: com.mysql.jdbc.ServerPreparedStatement getInstance(com.mysql.jdbc.ConnectionImpl,java.lang.String,java.lang.String,int,int)>(r0, r2, $r5, 1005, 1007);
        if i0 != 1 goto label2;

        $z1 = 1;
        goto label3;

     label2:
        $z1 = 0;

     label3:
        virtualinvoke r3.<com.mysql.jdbc.PreparedStatement: void setRetrieveGeneratedKeys(boolean)>($z1);
        return r3;
    }

    public java.sql.PreparedStatement serverPrepareStatement(java.lang.String, int, int) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1, r2, $r3, $r4;
        int i0, i1;
        boolean $z0;
        com.mysql.jdbc.ServerPreparedStatement $r5;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        $z0 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getProcessEscapeCodesForPrepStmts()>();
        if $z0 == 0 goto label0;

        $r3 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String nativeSQL(java.lang.String)>(r1);
        goto label1;

     label0:
        $r3 = r1;

     label1:
        r2 = $r3;
        $r4 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getCatalog()>();
        $r5 = staticinvoke <com.mysql.jdbc.ServerPreparedStatement: com.mysql.jdbc.ServerPreparedStatement getInstance(com.mysql.jdbc.ConnectionImpl,java.lang.String,java.lang.String,int,int)>(r0, r2, $r4, i0, i1);
        return $r5;
    }

    public java.sql.PreparedStatement serverPrepareStatement(java.lang.String, int, int, int) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1;
        int i0, i1, i2;
        boolean $z0;
        java.sql.SQLException $r2;
        java.sql.PreparedStatement $r3;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        $z0 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getPedantic()>();
        if $z0 == 0 goto label0;

        if i2 == 1 goto label0;

        $r2 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String,java.lang.String)>("HOLD_CUSRORS_OVER_COMMIT is only supported holdability level", "S1009");
        throw $r2;

     label0:
        $r3 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.sql.PreparedStatement serverPrepareStatement(java.lang.String,int,int)>(r1, i0, i1);
        return $r3;
    }

    public java.sql.PreparedStatement serverPrepareStatement(java.lang.String, int[]) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1;
        int[] r2;
        com.mysql.jdbc.PreparedStatement r3;
        java.sql.PreparedStatement $r4;
        int $i0;
        boolean $z0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: int[];
        $r4 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.sql.PreparedStatement serverPrepareStatement(java.lang.String)>(r1);
        r3 = (com.mysql.jdbc.PreparedStatement) $r4;
        if r2 == null goto label0;

        $i0 = lengthof r2;
        if $i0 <= 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        virtualinvoke r3.<com.mysql.jdbc.PreparedStatement: void setRetrieveGeneratedKeys(boolean)>($z0);
        return r3;
    }

    public java.sql.PreparedStatement serverPrepareStatement(java.lang.String, java.lang.String[]) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1;
        java.lang.String[] r2;
        com.mysql.jdbc.PreparedStatement r3;
        java.sql.PreparedStatement $r4;
        int $i0;
        boolean $z0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String[];
        $r4 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.sql.PreparedStatement serverPrepareStatement(java.lang.String)>(r1);
        r3 = (com.mysql.jdbc.PreparedStatement) $r4;
        if r2 == null goto label0;

        $i0 = lengthof r2;
        if $i0 <= 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        virtualinvoke r3.<com.mysql.jdbc.PreparedStatement: void setRetrieveGeneratedKeys(boolean)>($z0);
        return r3;
    }

    protected boolean serverSupportsConvertFn() throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        boolean $z0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $z0 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean versionMeetsMinimum(int,int,int)>(4, 0, 2);
        return $z0;
    }

    public void setAutoCommit(boolean) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        boolean z0, $z1, $z2, $z3, z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.lang.Object r1, $r5;
        com.mysql.jdbc.ConnectionImpl$7 r2, $r7;
        java.lang.Throwable r3, r4, $r16, $r17;
        java.util.List $r6, $r8;
        java.util.Iterator $r9;
        com.mysql.jdbc.MysqlIO $r10;
        null_type $n0;
        java.lang.String $r12, $r13;
        java.sql.SQLException $r15;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        z0 := @parameter0: boolean;
        $r5 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.Object getMutex()>();
        r1 = $r5;
        entermonitor $r5;

     label0:
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void checkClosed()>();
        $r6 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.List connectionLifecycleInterceptors>;
        if $r6 == null goto label2;

        $r7 = new com.mysql.jdbc.ConnectionImpl$7;
        $r8 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.List connectionLifecycleInterceptors>;
        $r9 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();
        specialinvoke $r7.<com.mysql.jdbc.ConnectionImpl$7: void <init>(com.mysql.jdbc.ConnectionImpl,java.util.Iterator,boolean)>(r0, $r9, z0);
        r2 = $r7;
        virtualinvoke r2.<com.mysql.jdbc.IterateBlock: void doForAll()>();
        $z1 = virtualinvoke r2.<com.mysql.jdbc.IterateBlock: boolean fullIteration()>();
        if $z1 != 0 goto label2;

        exitmonitor r1;

     label1:
        return;

     label2:
        $z2 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getAutoReconnectForPools()>();
        if $z2 == 0 goto label3;

        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setHighAvailability(boolean)>(1);

     label3:
        $z3 = r0.<com.mysql.jdbc.ConnectionImpl: boolean transactionsSupported>;
        if $z3 == 0 goto label9;

        z4 = 1;
        $z5 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getUseLocalSessionState()>();
        if $z5 == 0 goto label4;

        $z6 = r0.<com.mysql.jdbc.ConnectionImpl: boolean autoCommit>;
        if $z6 != z0 goto label4;

        z4 = 0;
        goto label5;

     label4:
        $z7 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getHighAvailability()>();
        if $z7 != 0 goto label5;

        $r10 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO getIO()>();
        z4 = virtualinvoke $r10.<com.mysql.jdbc.MysqlIO: boolean isSetNeededForAutoCommitMode(boolean)>(z0);

     label5:
        r0.<com.mysql.jdbc.ConnectionImpl: boolean autoCommit> = z0;
        if z4 == 0 goto label8;

        $n0 = null;
        if z0 == 0 goto label6;

        $r12 = "SET autocommit=1";
        goto label7;

     label6:
        $r12 = "SET autocommit=0";

     label7:
        $r13 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String database>;
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.ResultSetInternalMethods execSQL(com.mysql.jdbc.StatementImpl,java.lang.String,int,com.mysql.jdbc.Buffer,int,int,boolean,java.lang.String,com.mysql.jdbc.Field[],boolean)>($n0, $r12, -1, null, 1003, 1007, 0, $r13, null, 0);

     label8:
        goto label11;

     label9:
        if z0 != 0 goto label10;

        $z8 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getRelaxAutoCommit()>();
        if $z8 != 0 goto label10;

        $r15 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String,java.lang.String)>("MySQL Versions Older than 3.23.15 do not support transactions", "08003");
        throw $r15;

     label10:
        r0.<com.mysql.jdbc.ConnectionImpl: boolean autoCommit> = z0;

     label11:
        $z9 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getAutoReconnectForPools()>();
        if $z9 == 0 goto label16;

        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setHighAvailability(boolean)>(0);
        goto label16;

     label12:
        $r16 := @caughtexception;

     label13:
        r3 = $r16;

     label14:
        $z10 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getAutoReconnectForPools()>();
        if $z10 == 0 goto label15;

        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setHighAvailability(boolean)>(0);

     label15:
        throw r3;

     label16:
        exitmonitor r1;

     label17:
        return;

     label18:
        $r17 := @caughtexception;

     label19:
        r4 = $r17;
        exitmonitor r1;

     label20:
        throw r4;

        catch java.lang.Throwable from label3 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
        catch java.lang.Throwable from label0 to label1 with label18;
        catch java.lang.Throwable from label2 to label17 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    public void setCatalog(java.lang.String) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1, $r12, $r13, r15, $r20, $r21;
        java.lang.Object r2, $r6;
        com.mysql.jdbc.ConnectionImpl$8 r3, $r9;
        java.lang.StringBuffer r4, $r16;
        java.lang.Throwable r5, $r23;
        java.sql.SQLException $r7;
        java.util.List $r8, $r10;
        java.util.Iterator $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.sql.DatabaseMetaData $r14;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.lang.String;
        $r6 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.Object getMutex()>();
        r2 = $r6;
        entermonitor $r6;

     label0:
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void checkClosed()>();
        if r1 != null goto label1;

        $r7 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String,java.lang.String)>("Catalog can not be null", "S1009");
        throw $r7;

     label1:
        $r8 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.List connectionLifecycleInterceptors>;
        if $r8 == null goto label3;

        $r9 = new com.mysql.jdbc.ConnectionImpl$8;
        $r10 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.List connectionLifecycleInterceptors>;
        $r11 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();
        specialinvoke $r9.<com.mysql.jdbc.ConnectionImpl$8: void <init>(com.mysql.jdbc.ConnectionImpl,java.util.Iterator,java.lang.String)>(r0, $r11, r1);
        r3 = $r9;
        virtualinvoke r3.<com.mysql.jdbc.IterateBlock: void doForAll()>();
        $z0 = virtualinvoke r3.<com.mysql.jdbc.IterateBlock: boolean fullIteration()>();
        if $z0 != 0 goto label3;

        exitmonitor r2;

     label2:
        return;

     label3:
        $z1 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getUseLocalSessionState()>();
        if $z1 == 0 goto label7;

        $z2 = r0.<com.mysql.jdbc.ConnectionImpl: boolean lowerCaseTableNames>;
        if $z2 == 0 goto label5;

        $r12 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String database>;
        $z3 = virtualinvoke $r12.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);
        if $z3 == 0 goto label7;

        exitmonitor r2;

     label4:
        return;

     label5:
        $r13 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String database>;
        $z4 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r1);
        if $z4 == 0 goto label7;

        exitmonitor r2;

     label6:
        return;

     label7:
        $r14 = r0.<com.mysql.jdbc.ConnectionImpl: java.sql.DatabaseMetaData dbmd>;
        r15 = interfaceinvoke $r14.<java.sql.DatabaseMetaData: java.lang.String getIdentifierQuoteString()>();
        if r15 == null goto label8;

        $z5 = virtualinvoke r15.<java.lang.String: boolean equals(java.lang.Object)>(" ");
        if $z5 == 0 goto label9;

     label8:
        r15 = "";

     label9:
        $r16 = new java.lang.StringBuffer;
        specialinvoke $r16.<java.lang.StringBuffer: void <init>(java.lang.String)>("USE ");
        r4 = $r16;
        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r15);
        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);
        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r15);
        $r20 = virtualinvoke r4.<java.lang.StringBuffer: java.lang.String toString()>();
        $r21 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String database>;
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.ResultSetInternalMethods execSQL(com.mysql.jdbc.StatementImpl,java.lang.String,int,com.mysql.jdbc.Buffer,int,int,boolean,java.lang.String,com.mysql.jdbc.Field[],boolean)>(null, $r20, -1, null, 1003, 1007, 0, $r21, null, 0);
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String database> = r1;
        exitmonitor r2;

     label10:
        goto label14;

     label11:
        $r23 := @caughtexception;

     label12:
        r5 = $r23;
        exitmonitor r2;

     label13:
        throw r5;

     label14:
        return;

        catch java.lang.Throwable from label0 to label2 with label11;
        catch java.lang.Throwable from label3 to label4 with label11;
        catch java.lang.Throwable from label5 to label6 with label11;
        catch java.lang.Throwable from label7 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public synchronized void setFailedOver(boolean)
    {
        com.mysql.jdbc.ConnectionImpl r0;
        boolean z0, $z1;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        z0 := @parameter0: boolean;
        if z0 == 0 goto label0;

        $z1 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getRoundRobinLoadBalance()>();
        if $z1 == 0 goto label0;

        return;

     label0:
        r0.<com.mysql.jdbc.ConnectionImpl: boolean failedOver> = z0;
        return;
    }

    private void setFailedOverState() throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        boolean $z0, $z1;
        long $l0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $z0 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getRoundRobinLoadBalance()>();
        if $z0 == 0 goto label0;

        return;

     label0:
        $z1 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getFailOverReadOnly()>();
        if $z1 == 0 goto label1;

        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setReadOnlyInternal(boolean)>(1);

     label1:
        r0.<com.mysql.jdbc.ConnectionImpl: long queriesIssuedFailedOver> = 0L;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean failedOver> = 1;
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        r0.<com.mysql.jdbc.ConnectionImpl: long masterFailTimeMillis> = $l0;
        return;
    }

    public void setHoldability(int) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        int i0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        i0 := @parameter0: int;
        return;
    }

    public void setInGlobalTx(boolean)
    {
        com.mysql.jdbc.ConnectionImpl r0;
        boolean z0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        z0 := @parameter0: boolean;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean isInGlobalTx> = z0;
        return;
    }

    public void setPreferSlaveDuringFailover(boolean)
    {
        com.mysql.jdbc.ConnectionImpl r0;
        boolean z0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        z0 := @parameter0: boolean;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean preferSlaveDuringFailover> = z0;
        return;
    }

    void setReadInfoMsgEnabled(boolean)
    {
        com.mysql.jdbc.ConnectionImpl r0;
        boolean z0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        z0 := @parameter0: boolean;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean readInfoMsg> = z0;
        return;
    }

    public void setReadOnly(boolean) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        boolean z0, $z1, $z2;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        z0 := @parameter0: boolean;
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void checkClosed()>();
        $z1 = r0.<com.mysql.jdbc.ConnectionImpl: boolean failedOver>;
        if $z1 == 0 goto label0;

        $z2 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getFailOverReadOnly()>();
        if $z2 == 0 goto label0;

        if z0 != 0 goto label0;

        return;

     label0:
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setReadOnlyInternal(boolean)>(z0);
        return;
    }

    protected void setReadOnlyInternal(boolean) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        boolean z0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        z0 := @parameter0: boolean;
        r0.<com.mysql.jdbc.ConnectionImpl: boolean readOnly> = z0;
        return;
    }

    public java.sql.Savepoint setSavepoint() throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        com.mysql.jdbc.MysqlSavepoint $r1, r2;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $r1 = new com.mysql.jdbc.MysqlSavepoint;
        specialinvoke $r1.<com.mysql.jdbc.MysqlSavepoint: void <init>()>();
        r2 = $r1;
        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setSavepoint(com.mysql.jdbc.MysqlSavepoint)>(r2);
        return r2;
    }

    private void setSavepoint(com.mysql.jdbc.MysqlSavepoint) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        com.mysql.jdbc.MysqlSavepoint r1;
        java.lang.Object r2, $r7;
        java.lang.StringBuffer r3, $r8;
        java.sql.Statement r4;
        java.lang.Throwable r5, r6, $r14, $r15;
        boolean $z0, $z1;
        java.lang.String $r10, $r13;
        java.sql.SQLException $r16;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: com.mysql.jdbc.MysqlSavepoint;
        $z0 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean versionMeetsMinimum(int,int,int)>(4, 0, 14);
        if $z0 != 0 goto label0;

        $z1 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean versionMeetsMinimum(int,int,int)>(4, 1, 1);
        if $z1 == 0 goto label12;

     label0:
        $r7 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.Object getMutex()>();
        r2 = $r7;
        entermonitor $r7;

     label1:
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void checkClosed()>();
        $r8 = new java.lang.StringBuffer;
        specialinvoke $r8.<java.lang.StringBuffer: void <init>(java.lang.String)>("SAVEPOINT ");
        r3 = $r8;
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(96);
        $r10 = virtualinvoke r1.<com.mysql.jdbc.MysqlSavepoint: java.lang.String getSavepointName()>();
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(96);
        r4 = null;

     label2:
        r4 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.sql.Statement getMetadataSafeStatement()>();
        $r13 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke r4.<java.sql.Statement: int executeUpdate(java.lang.String)>($r13);

     label3:
        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void closeStatement(java.sql.Statement)>(r4);
        goto label7;

     label4:
        $r14 := @caughtexception;

     label5:
        r5 = $r14;

     label6:
        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void closeStatement(java.sql.Statement)>(r4);
        throw r5;

     label7:
        exitmonitor r2;

     label8:
        goto label13;

     label9:
        $r15 := @caughtexception;

     label10:
        r6 = $r15;
        exitmonitor r2;

     label11:
        throw r6;

     label12:
        $r16 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException notImplemented()>();
        throw $r16;

     label13:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label1 to label8 with label9;
        catch java.lang.Throwable from label10 to label11 with label9;
    }

    public synchronized java.sql.Savepoint setSavepoint(java.lang.String) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1;
        com.mysql.jdbc.MysqlSavepoint $r2, r3;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.lang.String;
        $r2 = new com.mysql.jdbc.MysqlSavepoint;
        specialinvoke $r2.<com.mysql.jdbc.MysqlSavepoint: void <init>(java.lang.String)>(r1);
        r3 = $r2;
        specialinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setSavepoint(com.mysql.jdbc.MysqlSavepoint)>(r3);
        return r3;
    }

    private void setSessionVariables() throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.util.List r1;
        int i0, i1;
        java.sql.Statement r2;
        java.lang.String r3, $r5, $r6, $r11, $r15;
        java.lang.Throwable r4, $r16;
        boolean $z0, $z1;
        java.lang.Object $r7;
        java.lang.StringBuffer $r8, $r9, $r10, $r12, $r13, $r14;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $z0 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean versionMeetsMinimum(int,int,int)>(4, 0, 0);
        if $z0 == 0 goto label9;

        $r5 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getSessionVariables()>();
        if $r5 == null goto label9;

        $r6 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String getSessionVariables()>();
        r1 = staticinvoke <com.mysql.jdbc.StringUtils: java.util.List split(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>($r6, ",", "\"\'", "\"\'", 0);
        i0 = interfaceinvoke r1.<java.util.List: int size()>();
        r2 = null;

     label0:
        r2 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: java.sql.Statement getMetadataSafeStatement()>();
        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        $r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);
        r3 = (java.lang.String) $r7;
        $z1 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>("@");
        if $z1 == 0 goto label2;

        $r8 = new java.lang.StringBuffer;
        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();
        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("SET ");
        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);
        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke r2.<java.sql.Statement: int executeUpdate(java.lang.String)>($r11);
        goto label3;

     label2:
        $r12 = new java.lang.StringBuffer;
        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();
        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("SET SESSION ");
        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);
        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke r2.<java.sql.Statement: int executeUpdate(java.lang.String)>($r15);

     label3:
        i1 = i1 + 1;
        goto label1;

     label4:
        if r2 == null goto label9;

        interfaceinvoke r2.<java.sql.Statement: void close()>();
        goto label9;

     label5:
        $r16 := @caughtexception;

     label6:
        r4 = $r16;

     label7:
        if r2 == null goto label8;

        interfaceinvoke r2.<java.sql.Statement: void close()>();

     label8:
        throw r4;

     label9:
        return;

        catch java.lang.Throwable from label0 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public synchronized void setTransactionIsolation(int) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        int i0, $i1, $i2;
        null_type n0;
        boolean z0, $z1, $z2, $z3, $z4;
        java.sql.SQLException $r1, $r8, $r11;
        java.lang.String r2, $r7, $r9;
        java.lang.StringBuffer $r3, $r4, $r5, $r6;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        i0 := @parameter0: int;
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void checkClosed()>();
        $z1 = r0.<com.mysql.jdbc.ConnectionImpl: boolean hasIsolationLevels>;
        if $z1 == 0 goto label13;

        n0 = null;
        z0 = 0;
        $z2 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getAlwaysSendSetIsolation()>();
        if $z2 == 0 goto label0;

        z0 = 1;
        goto label1;

     label0:
        $i1 = r0.<com.mysql.jdbc.ConnectionImpl: int isolationLevel>;
        if i0 == $i1 goto label1;

        z0 = 1;

     label1:
        $z3 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getUseLocalSessionState()>();
        if $z3 == 0 goto label4;

        $i2 = r0.<com.mysql.jdbc.ConnectionImpl: int isolationLevel>;
        if $i2 == i0 goto label2;

        $z4 = 1;
        goto label3;

     label2:
        $z4 = 0;

     label3:
        z0 = $z4;

     label4:
        if z0 == 0 goto label12;

        tableswitch(i0)
        {
            case 0: goto label5;
            case 1: goto label7;
            case 2: goto label6;
            case 3: goto label10;
            case 4: goto label8;
            case 5: goto label10;
            case 6: goto label10;
            case 7: goto label10;
            case 8: goto label9;
            default: goto label10;
        };

     label5:
        $r1 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String)>("Transaction isolation level NONE not supported by MySQL");
        throw $r1;

     label6:
        r2 = "SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED";
        goto label11;

     label7:
        r2 = "SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED";
        goto label11;

     label8:
        r2 = "SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ";
        goto label11;

     label9:
        r2 = "SET SESSION TRANSACTION ISOLATION LEVEL SERIALIZABLE";
        goto label11;

     label10:
        $r3 = new java.lang.StringBuffer;
        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();
        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unsupported transaction isolation level \'");
        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);
        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");
        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();
        $r8 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String,java.lang.String)>($r7, "S1C00");
        throw $r8;

     label11:
        $r9 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String database>;
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.ResultSetInternalMethods execSQL(com.mysql.jdbc.StatementImpl,java.lang.String,int,com.mysql.jdbc.Buffer,int,int,boolean,java.lang.String,com.mysql.jdbc.Field[],boolean)>(null, r2, -1, null, 1003, 1007, 0, $r9, null, 0);
        r0.<com.mysql.jdbc.ConnectionImpl: int isolationLevel> = i0;

     label12:
        goto label14;

     label13:
        $r11 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String,java.lang.String)>("Transaction Isolation Levels are not supported on MySQL versions older than 3.23.36.", "S1C00");
        throw $r11;

     label14:
        return;
    }

    public synchronized void setTypeMap(java.util.Map) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.util.Map r1;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.util.Map;
        r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map typeMap> = r1;
        return;
    }

    private void setupServerForTruncationChecks() throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1, $r9, $r10;
        boolean z0, $z1, $z2, $z3;
        java.lang.StringBuffer r2, $r5;
        java.util.Map $r3;
        java.lang.Object $r4;
        int $i0, $i1, $i2;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $z1 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean getJdbcCompliantTruncation()>();
        if $z1 == 0 goto label5;

        $z2 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: boolean versionMeetsMinimum(int,int,int)>(5, 0, 2);
        if $z2 == 0 goto label5;

        $r3 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map serverVariables>;
        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>("sql_mode");
        r1 = (java.lang.String) $r4;
        $i0 = staticinvoke <com.mysql.jdbc.StringUtils: int indexOfIgnoreCase(java.lang.String,java.lang.String)>(r1, "STRICT_TRANS_TABLES");
        if $i0 == -1 goto label0;

        $z3 = 1;
        goto label1;

     label0:
        $z3 = 0;

     label1:
        z0 = $z3;
        if r1 == null goto label2;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i1 == 0 goto label2;

        if z0 != 0 goto label4;

     label2:
        $r5 = new java.lang.StringBuffer;
        specialinvoke $r5.<java.lang.StringBuffer: void <init>(java.lang.String)>("SET sql_mode=\'");
        r2 = $r5;
        if r1 == null goto label3;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i2 <= 0 goto label3;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

     label3:
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("STRICT_TRANS_TABLES\'");
        $r9 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();
        $r10 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String database>;
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.ResultSetInternalMethods execSQL(com.mysql.jdbc.StatementImpl,java.lang.String,int,com.mysql.jdbc.Buffer,int,int,boolean,java.lang.String,com.mysql.jdbc.Field[],boolean)>(null, $r9, -1, null, 1003, 1007, 0, $r10, null, 0);
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setJdbcCompliantTruncation(boolean)>(0);
        goto label5;

     label4:
        if z0 == 0 goto label5;

        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void setJdbcCompliantTruncation(boolean)>(0);

     label5:
        return;
    }

    private boolean shouldFallBack()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        long $l0, l1, $l2, $l3, $l5, $l7, $l9;
        boolean z0, $z1;
        int $i4, $i8;
        byte $b6, $b10;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        $l2 = r0.<com.mysql.jdbc.ConnectionImpl: long masterFailTimeMillis>;
        $l3 = $l0 - $l2;
        l1 = $l3 / 1000L;
        $i4 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: int getSecondsBeforeRetryMaster()>();
        $l5 = (long) $i4;
        $b6 = l1 cmp $l5;
        if $b6 >= 0 goto label0;

        $l7 = r0.<com.mysql.jdbc.ConnectionImpl: long queriesIssuedFailedOver>;
        $i8 = virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: int getQueriesBeforeRetryMaster()>();
        $l9 = (long) $i8;
        $b10 = $l7 cmp $l9;
        if $b10 < 0 goto label1;

     label0:
        $z1 = 1;
        goto label2;

     label1:
        $z1 = 0;

     label2:
        z0 = $z1;
        return z0;
    }

    public void shutdownServer() throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.Exception r1, $r5;
        java.sql.SQLException r2;
        com.mysql.jdbc.MysqlIO $r3;
        java.lang.String $r6;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;

     label0:
        $r3 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        virtualinvoke $r3.<com.mysql.jdbc.MysqlIO: com.mysql.jdbc.Buffer sendCommand(int,java.lang.String,com.mysql.jdbc.Buffer,boolean,java.lang.String)>(8, null, null, 0, null);

     label1:
        goto label3;

     label2:
        $r5 := @caughtexception;
        r1 = $r5;
        $r6 = staticinvoke <com.mysql.jdbc.Messages: java.lang.String getString(java.lang.String)>("Connection.UnhandledExceptionDuringShutdown");
        r2 = staticinvoke <com.mysql.jdbc.SQLError: java.sql.SQLException createSQLException(java.lang.String,java.lang.String)>($r6, "S1000");
        virtualinvoke r2.<java.sql.SQLException: java.lang.Throwable initCause(java.lang.Throwable)>(r1);
        throw r2;

     label3:
        return;

        catch java.lang.Exception from label0 to label1 with label2;
    }

    public boolean supportsIsolationLevel()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        boolean $z0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $z0 = r0.<com.mysql.jdbc.ConnectionImpl: boolean hasIsolationLevels>;
        return $z0;
    }

    public boolean supportsQuotedIdentifiers()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        boolean $z0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $z0 = r0.<com.mysql.jdbc.ConnectionImpl: boolean hasQuotedIdentifiers>;
        return $z0;
    }

    public boolean supportsTransactions()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        boolean $z0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $z0 = r0.<com.mysql.jdbc.ConnectionImpl: boolean transactionsSupported>;
        return $z0;
    }

    void unregisterStatement(com.mysql.jdbc.StatementImpl)
    {
        com.mysql.jdbc.ConnectionImpl r0;
        com.mysql.jdbc.StatementImpl r1;
        java.util.Map r2, $r4, $r5, $r6;
        java.lang.Throwable r3, $r8;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: com.mysql.jdbc.StatementImpl;
        $r4 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map openStatements>;
        if $r4 == null goto label5;

        $r5 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map openStatements>;
        r2 = $r5;
        entermonitor $r5;

     label0:
        $r6 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map openStatements>;
        interfaceinvoke $r6.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);
        exitmonitor r2;

     label1:
        goto label5;

     label2:
        $r8 := @caughtexception;

     label3:
        r3 = $r8;
        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    void unsetMaxRows(com.mysql.jdbc.StatementImpl) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        com.mysql.jdbc.StatementImpl r1;
        java.lang.Object r2, r3, $r5;
        java.lang.Throwable r4, $r11;
        java.util.Map $r6, $r7, $r8;
        int $i0;
        java.lang.String $r9;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: com.mysql.jdbc.StatementImpl;
        $r5 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.Object mutex>;
        r2 = $r5;
        entermonitor $r5;

     label0:
        $r6 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map statementsUsingMaxRows>;
        if $r6 == null goto label1;

        $r7 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map statementsUsingMaxRows>;
        r3 = interfaceinvoke $r7.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);
        if r3 == null goto label1;

        $r8 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Map statementsUsingMaxRows>;
        $i0 = interfaceinvoke $r8.<java.util.Map: int size()>();
        if $i0 != 0 goto label1;

        $r9 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String database>;
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.ResultSetInternalMethods execSQL(com.mysql.jdbc.StatementImpl,java.lang.String,int,com.mysql.jdbc.Buffer,int,int,boolean,java.lang.String,com.mysql.jdbc.Field[],boolean)>(null, "SET OPTION SQL_SELECT_LIMIT=DEFAULT", -1, null, 1003, 1007, 0, $r9, null, 0);
        r0.<com.mysql.jdbc.ConnectionImpl: boolean maxRowsChanged> = 0;

     label1:
        exitmonitor r2;

     label2:
        goto label6;

     label3:
        $r11 := @caughtexception;

     label4:
        r4 = $r11;
        exitmonitor r2;

     label5:
        throw r4;

     label6:
        return;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    boolean useAnsiQuotedIdentifiers()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        boolean $z0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $z0 = r0.<com.mysql.jdbc.ConnectionImpl: boolean useAnsiQuotes>;
        return $z0;
    }

    boolean useMaxRows()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $r3 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.Object mutex>;
        r1 = $r3;
        entermonitor $r3;

     label0:
        $z0 = r0.<com.mysql.jdbc.ConnectionImpl: boolean maxRowsChanged>;
        exitmonitor r1;

     label1:
        return $z0;

     label2:
        $r4 := @caughtexception;

     label3:
        r2 = $r4;
        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public boolean versionMeetsMinimum(int, int, int) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        int i0, i1, i2;
        com.mysql.jdbc.MysqlIO $r1;
        boolean $z0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        virtualinvoke r0.<com.mysql.jdbc.ConnectionImpl: void checkClosed()>();
        $r1 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.MysqlIO io>;
        $z0 = virtualinvoke $r1.<com.mysql.jdbc.MysqlIO: boolean versionMeetsMinimum(int,int,int)>(i0, i1, i2);
        return $z0;
    }

    protected com.mysql.jdbc.CachedResultSetMetaData getCachedMetaData(java.lang.String)
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1;
        com.mysql.jdbc.util.LRUCache r2, $r4, $r5, $r6;
        java.lang.Throwable r3, $r9;
        java.lang.Object $r7;
        com.mysql.jdbc.CachedResultSetMetaData $r8;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.lang.String;
        $r4 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.util.LRUCache resultSetMetadataCache>;
        if $r4 == null goto label5;

        $r5 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.util.LRUCache resultSetMetadataCache>;
        r2 = $r5;
        entermonitor $r5;

     label0:
        $r6 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.util.LRUCache resultSetMetadataCache>;
        $r7 = virtualinvoke $r6.<com.mysql.jdbc.util.LRUCache: java.lang.Object get(java.lang.Object)>(r1);
        $r8 = (com.mysql.jdbc.CachedResultSetMetaData) $r7;
        exitmonitor r2;

     label1:
        return $r8;

     label2:
        $r9 := @caughtexception;

     label3:
        r3 = $r9;
        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return null;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    protected void initializeResultsMetadataFromCache(java.lang.String, com.mysql.jdbc.CachedResultSetMetaData, com.mysql.jdbc.ResultSetInternalMethods) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1;
        com.mysql.jdbc.CachedResultSetMetaData r2, $r4, r5;
        com.mysql.jdbc.ResultSetInternalMethods r3;
        boolean $z0, $z1;
        com.mysql.jdbc.UpdatableResultSet $r6, $r9;
        com.mysql.jdbc.util.LRUCache $r7;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: com.mysql.jdbc.CachedResultSetMetaData;
        r3 := @parameter2: com.mysql.jdbc.ResultSetInternalMethods;
        if r2 != null goto label1;

        $r4 = new com.mysql.jdbc.CachedResultSetMetaData;
        specialinvoke $r4.<com.mysql.jdbc.CachedResultSetMetaData: void <init>()>();
        r5 = $r4;
        interfaceinvoke r3.<com.mysql.jdbc.ResultSetInternalMethods: void buildIndexMapping()>();
        interfaceinvoke r3.<com.mysql.jdbc.ResultSetInternalMethods: void initializeWithMetadata()>();
        $z0 = r3 instanceof com.mysql.jdbc.UpdatableResultSet;
        if $z0 == 0 goto label0;

        $r6 = (com.mysql.jdbc.UpdatableResultSet) r3;
        virtualinvoke $r6.<com.mysql.jdbc.UpdatableResultSet: void checkUpdatability()>();

     label0:
        interfaceinvoke r3.<com.mysql.jdbc.ResultSetInternalMethods: void populateCachedMetaData(com.mysql.jdbc.CachedResultSetMetaData)>(r5);
        $r7 = r0.<com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.util.LRUCache resultSetMetadataCache>;
        virtualinvoke $r7.<com.mysql.jdbc.util.LRUCache: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r5);
        goto label2;

     label1:
        interfaceinvoke r3.<com.mysql.jdbc.ResultSetInternalMethods: void initializeFromCachedMetaData(com.mysql.jdbc.CachedResultSetMetaData)>(r2);
        interfaceinvoke r3.<com.mysql.jdbc.ResultSetInternalMethods: void initializeWithMetadata()>();
        $z1 = r3 instanceof com.mysql.jdbc.UpdatableResultSet;
        if $z1 == 0 goto label2;

        $r9 = (com.mysql.jdbc.UpdatableResultSet) r3;
        virtualinvoke $r9.<com.mysql.jdbc.UpdatableResultSet: void checkUpdatability()>();

     label2:
        return;
    }

    public java.lang.String getStatementComment()
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String $r1;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $r1 = r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String statementComment>;
        return $r1;
    }

    public void setStatementComment(java.lang.String)
    {
        com.mysql.jdbc.ConnectionImpl r0;
        java.lang.String r1;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: java.lang.String;
        r0.<com.mysql.jdbc.ConnectionImpl: java.lang.String statementComment> = r1;
        return;
    }

    public synchronized void reportQueryTime(long)
    {
        com.mysql.jdbc.ConnectionImpl r0;
        long l0, $l1, $l2, $l3, $l4, $l5, $l6;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        l0 := @parameter0: long;
        $l1 = r0.<com.mysql.jdbc.ConnectionImpl: long queryTimeCount>;
        $l2 = $l1 + 1L;
        r0.<com.mysql.jdbc.ConnectionImpl: long queryTimeCount> = $l2;
        $d0 = r0.<com.mysql.jdbc.ConnectionImpl: double queryTimeSum>;
        $d1 = (double) l0;
        $d2 = $d0 + $d1;
        r0.<com.mysql.jdbc.ConnectionImpl: double queryTimeSum> = $d2;
        $d3 = r0.<com.mysql.jdbc.ConnectionImpl: double queryTimeSumSquares>;
        $l3 = l0 * l0;
        $d4 = (double) $l3;
        $d5 = $d3 + $d4;
        r0.<com.mysql.jdbc.ConnectionImpl: double queryTimeSumSquares> = $d5;
        $d6 = r0.<com.mysql.jdbc.ConnectionImpl: double queryTimeMean>;
        $l4 = r0.<com.mysql.jdbc.ConnectionImpl: long queryTimeCount>;
        $l5 = $l4 - 1L;
        $d7 = (double) $l5;
        $d8 = $d6 * $d7;
        $d9 = (double) l0;
        $d10 = $d8 + $d9;
        $l6 = r0.<com.mysql.jdbc.ConnectionImpl: long queryTimeCount>;
        $d11 = (double) $l6;
        $d12 = $d10 / $d11;
        r0.<com.mysql.jdbc.ConnectionImpl: double queryTimeMean> = $d12;
        return;
    }

    public synchronized boolean isAbonormallyLongQuery(long)
    {
        com.mysql.jdbc.ConnectionImpl r0;
        long l0, $l1, $l3, $l4, $l5;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13;
        byte $b2, $b6;
        boolean $z0;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        l0 := @parameter0: long;
        $l1 = r0.<com.mysql.jdbc.ConnectionImpl: long queryTimeCount>;
        $b2 = $l1 cmp 15L;
        if $b2 >= 0 goto label0;

        return 0;

     label0:
        $d1 = r0.<com.mysql.jdbc.ConnectionImpl: double queryTimeSumSquares>;
        $d2 = r0.<com.mysql.jdbc.ConnectionImpl: double queryTimeSum>;
        $d3 = r0.<com.mysql.jdbc.ConnectionImpl: double queryTimeSum>;
        $d4 = $d2 * $d3;
        $l3 = r0.<com.mysql.jdbc.ConnectionImpl: long queryTimeCount>;
        $d5 = (double) $l3;
        $d6 = $d4 / $d5;
        $d7 = $d1 - $d6;
        $l4 = r0.<com.mysql.jdbc.ConnectionImpl: long queryTimeCount>;
        $l5 = $l4 - 1L;
        $d8 = (double) $l5;
        $d9 = $d7 / $d8;
        d0 = staticinvoke <java.lang.Math: double sqrt(double)>($d9);
        $d10 = (double) l0;
        $d11 = r0.<com.mysql.jdbc.ConnectionImpl: double queryTimeMean>;
        $d12 = 5.0 * d0;
        $d13 = $d11 + $d12;
        $b6 = $d10 cmpl $d13;
        if $b6 <= 0 goto label1;

        $z0 = 1;
        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void initializeExtension(com.mysql.jdbc.Extension) throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        com.mysql.jdbc.Extension r1;
        java.util.Properties $r2;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        r1 := @parameter0: com.mysql.jdbc.Extension;
        $r2 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.Properties props>;
        interfaceinvoke r1.<com.mysql.jdbc.Extension: void init(com.mysql.jdbc.Connection,java.util.Properties)>(r0, $r2);
        return;
    }

    protected void transactionBegun() throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        com.mysql.jdbc.ConnectionImpl$9 r1, $r3;
        java.util.List $r2, $r4;
        java.util.Iterator $r5;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $r2 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.List connectionLifecycleInterceptors>;
        if $r2 == null goto label0;

        $r3 = new com.mysql.jdbc.ConnectionImpl$9;
        $r4 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.List connectionLifecycleInterceptors>;
        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();
        specialinvoke $r3.<com.mysql.jdbc.ConnectionImpl$9: void <init>(com.mysql.jdbc.ConnectionImpl,java.util.Iterator)>(r0, $r5);
        r1 = $r3;
        virtualinvoke r1.<com.mysql.jdbc.IterateBlock: void doForAll()>();

     label0:
        return;
    }

    protected void transactionCompleted() throws java.sql.SQLException
    {
        com.mysql.jdbc.ConnectionImpl r0;
        com.mysql.jdbc.ConnectionImpl$10 r1, $r3;
        java.util.List $r2, $r4;
        java.util.Iterator $r5;

        r0 := @this: com.mysql.jdbc.ConnectionImpl;
        $r2 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.List connectionLifecycleInterceptors>;
        if $r2 == null goto label0;

        $r3 = new com.mysql.jdbc.ConnectionImpl$10;
        $r4 = r0.<com.mysql.jdbc.ConnectionImpl: java.util.List connectionLifecycleInterceptors>;
        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();
        specialinvoke $r3.<com.mysql.jdbc.ConnectionImpl$10: void <init>(com.mysql.jdbc.ConnectionImpl,java.util.Iterator)>(r0, $r5);
        r1 = $r3;
        virtualinvoke r1.<com.mysql.jdbc.IterateBlock: void doForAll()>();

     label0:
        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String r0, $r5;
        java.lang.ClassNotFoundException r1, $r3;
        java.lang.Class $r2;
        java.lang.NoClassDefFoundError $r4;

        r0 := @parameter0: java.lang.String;

     label0:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label1:
        return $r2;

     label2:
        $r3 := @caughtexception;
        r1 = $r3;
        $r4 = new java.lang.NoClassDefFoundError;
        $r5 = virtualinvoke r1.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();
        specialinvoke $r4.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r5);
        throw $r4;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
    }

    static void <clinit>()
    {
        java.lang.Object $r0, $r30;
        boolean z0, z1, $z2;
        byte $b0, $b1, $b2, $b3, $b4;
        java.lang.Class $r1, $r22, $r23, $r26, $r27, $r35, $r38, $r39, $r40, $r42, $r43, $r45, $r46, $r48, $r49;
        java.lang.reflect.Constructor r2, $r50;
        com.mysql.jdbc.log.NullLogger $r3;
        java.util.HashMap $r4, $r5, $r6;
        java.util.Map $r7, $r10, $r13, $r16, $r19;
        java.lang.Integer $r8, $r11, $r14, $r17, $r20;
        java.lang.Class[] $r24, $r36;
        java.lang.Object[] $r28;
        java.lang.Boolean $r29;
        java.util.Timer $r31, $r34;
        java.lang.Throwable $r32, r33;
        java.lang.SecurityException $r51, r52;
        java.lang.RuntimeException $r53, $r56, $r59;
        java.lang.NoSuchMethodException $r54, r55;
        java.lang.ClassNotFoundException $r57, r58;

        $r0 = new java.lang.Object;
        specialinvoke $r0.<java.lang.Object: void <init>()>();
        <com.mysql.jdbc.ConnectionImpl: java.lang.Object CHARSET_CONVERTER_NOT_AVAILABLE_MARKER> = $r0;
        <com.mysql.jdbc.ConnectionImpl: java.util.Map mapTransIsolationNameToValue> = null;
        $r3 = new com.mysql.jdbc.log.NullLogger;
        specialinvoke $r3.<com.mysql.jdbc.log.NullLogger: void <init>(java.lang.String)>("MySQL");
        <com.mysql.jdbc.ConnectionImpl: com.mysql.jdbc.log.Log NULL_LOGGER> = $r3;
        $r4 = new java.util.HashMap;
        specialinvoke $r4.<java.util.HashMap: void <init>()>();
        <com.mysql.jdbc.ConnectionImpl: java.util.Map serverCollationByUrl> = $r4;
        $r5 = new java.util.HashMap;
        specialinvoke $r5.<java.util.HashMap: void <init>()>();
        <com.mysql.jdbc.ConnectionImpl: java.util.Map serverConfigByUrl> = $r5;
        $r6 = new java.util.HashMap;
        specialinvoke $r6.<java.util.HashMap: void <init>(int)>(8);
        <com.mysql.jdbc.ConnectionImpl: java.util.Map mapTransIsolationNameToValue> = $r6;
        $r7 = <com.mysql.jdbc.ConnectionImpl: java.util.Map mapTransIsolationNameToValue>;
        $r8 = staticinvoke <com.mysql.jdbc.Constants: java.lang.Integer integerValueOf(int)>(1);
        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("READ-UNCOMMITED", $r8);
        $r10 = <com.mysql.jdbc.ConnectionImpl: java.util.Map mapTransIsolationNameToValue>;
        $r11 = staticinvoke <com.mysql.jdbc.Constants: java.lang.Integer integerValueOf(int)>(1);
        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("READ-UNCOMMITTED", $r11);
        $r13 = <com.mysql.jdbc.ConnectionImpl: java.util.Map mapTransIsolationNameToValue>;
        $r14 = staticinvoke <com.mysql.jdbc.Constants: java.lang.Integer integerValueOf(int)>(2);
        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("READ-COMMITTED", $r14);
        $r16 = <com.mysql.jdbc.ConnectionImpl: java.util.Map mapTransIsolationNameToValue>;
        $r17 = staticinvoke <com.mysql.jdbc.Constants: java.lang.Integer integerValueOf(int)>(4);
        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("REPEATABLE-READ", $r17);
        $r19 = <com.mysql.jdbc.ConnectionImpl: java.util.Map mapTransIsolationNameToValue>;
        $r20 = staticinvoke <com.mysql.jdbc.Constants: java.lang.Integer integerValueOf(int)>(8);
        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("SERIALIZABLE", $r20);
        z0 = 0;

     label0:
        $r22 = <com.mysql.jdbc.ConnectionImpl: java.lang.Class class$java$util$Timer>;
        if $r22 != null goto label1;

        $r23 = staticinvoke <com.mysql.jdbc.ConnectionImpl: java.lang.Class class$(java.lang.String)>("java.util.Timer");
        <com.mysql.jdbc.ConnectionImpl: java.lang.Class class$java$util$Timer> = $r23;
        goto label2;

     label1:
        $r23 = <com.mysql.jdbc.ConnectionImpl: java.lang.Class class$java$util$Timer>;

     label2:
        $r24 = newarray (java.lang.Class)[2];
        $b0 = 0;
        $r1 = <com.mysql.jdbc.ConnectionImpl: java.lang.Class class$java$lang$String>;
        if $r1 != null goto label3;

        $r26 = staticinvoke <com.mysql.jdbc.ConnectionImpl: java.lang.Class class$(java.lang.String)>("java.lang.String");
        <com.mysql.jdbc.ConnectionImpl: java.lang.Class class$java$lang$String> = $r26;
        goto label4;

     label3:
        $r26 = <com.mysql.jdbc.ConnectionImpl: java.lang.Class class$java$lang$String>;

     label4:
        $r24[$b0] = $r26;
        $r27 = <java.lang.Boolean: java.lang.Class TYPE>;
        $r24[1] = $r27;
        r2 = virtualinvoke $r23.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r24);
        $r28 = newarray (java.lang.Object)[2];
        $r28[0] = "MySQL Statement Cancellation Timer";
        $r29 = <java.lang.Boolean: java.lang.Boolean TRUE>;
        $r28[1] = $r29;
        $r30 = virtualinvoke r2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r28);
        $r31 = (java.util.Timer) $r30;
        <com.mysql.jdbc.ConnectionImpl: java.util.Timer cancelTimer> = $r31;
        z1 = 1;

     label5:
        goto label7;

     label6:
        $r32 := @caughtexception;
        r33 = $r32;
        z1 = 0;

     label7:
        if z1 != 0 goto label8;

        $r34 = new java.util.Timer;
        specialinvoke $r34.<java.util.Timer: void <init>(boolean)>(1);
        <com.mysql.jdbc.ConnectionImpl: java.util.Timer cancelTimer> = $r34;

     label8:
        $z2 = staticinvoke <com.mysql.jdbc.Util: boolean isJdbc4()>();
        if $z2 == 0 goto label22;

     label9:
        $r35 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("com.mysql.jdbc.JDBC4Connection");
        $r36 = newarray (java.lang.Class)[5];
        $b1 = 0;
        $r38 = <com.mysql.jdbc.ConnectionImpl: java.lang.Class class$java$lang$String>;
        if $r38 != null goto label10;

        $r39 = staticinvoke <com.mysql.jdbc.ConnectionImpl: java.lang.Class class$(java.lang.String)>("java.lang.String");
        <com.mysql.jdbc.ConnectionImpl: java.lang.Class class$java$lang$String> = $r39;
        goto label11;

     label10:
        $r39 = <com.mysql.jdbc.ConnectionImpl: java.lang.Class class$java$lang$String>;

     label11:
        $r36[$b1] = $r39;
        $r40 = <java.lang.Integer: java.lang.Class TYPE>;
        $r36[1] = $r40;
        $b2 = 2;
        $r42 = <com.mysql.jdbc.ConnectionImpl: java.lang.Class class$java$util$Properties>;
        if $r42 != null goto label12;

        $r43 = staticinvoke <com.mysql.jdbc.ConnectionImpl: java.lang.Class class$(java.lang.String)>("java.util.Properties");
        <com.mysql.jdbc.ConnectionImpl: java.lang.Class class$java$util$Properties> = $r43;
        goto label13;

     label12:
        $r43 = <com.mysql.jdbc.ConnectionImpl: java.lang.Class class$java$util$Properties>;

     label13:
        $r36[$b2] = $r43;
        $b3 = 3;
        $r45 = <com.mysql.jdbc.ConnectionImpl: java.lang.Class class$java$lang$String>;
        if $r45 != null goto label14;

        $r46 = staticinvoke <com.mysql.jdbc.ConnectionImpl: java.lang.Class class$(java.lang.String)>("java.lang.String");
        <com.mysql.jdbc.ConnectionImpl: java.lang.Class class$java$lang$String> = $r46;
        goto label15;

     label14:
        $r46 = <com.mysql.jdbc.ConnectionImpl: java.lang.Class class$java$lang$String>;

     label15:
        $r36[$b3] = $r46;
        $b4 = 4;
        $r48 = <com.mysql.jdbc.ConnectionImpl: java.lang.Class class$java$lang$String>;
        if $r48 != null goto label16;

        $r49 = staticinvoke <com.mysql.jdbc.ConnectionImpl: java.lang.Class class$(java.lang.String)>("java.lang.String");
        <com.mysql.jdbc.ConnectionImpl: java.lang.Class class$java$lang$String> = $r49;
        goto label17;

     label16:
        $r49 = <com.mysql.jdbc.ConnectionImpl: java.lang.Class class$java$lang$String>;

     label17:
        $r36[$b4] = $r49;
        $r50 = virtualinvoke $r35.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r36);
        <com.mysql.jdbc.ConnectionImpl: java.lang.reflect.Constructor JDBC_4_CONNECTION_CTOR> = $r50;

     label18:
        goto label23;

     label19:
        $r51 := @caughtexception;
        r52 = $r51;
        $r53 = new java.lang.RuntimeException;
        specialinvoke $r53.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r52);
        throw $r53;

     label20:
        $r54 := @caughtexception;
        r55 = $r54;
        $r56 = new java.lang.RuntimeException;
        specialinvoke $r56.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r55);
        throw $r56;

     label21:
        $r57 := @caughtexception;
        r58 = $r57;
        $r59 = new java.lang.RuntimeException;
        specialinvoke $r59.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r58);
        throw $r59;

     label22:
        <com.mysql.jdbc.ConnectionImpl: java.lang.reflect.Constructor JDBC_4_CONNECTION_CTOR> = null;

     label23:
        return;

        catch java.lang.Throwable from label0 to label5 with label6;
        catch java.lang.SecurityException from label9 to label18 with label19;
        catch java.lang.NoSuchMethodException from label9 to label18 with label20;
        catch java.lang.ClassNotFoundException from label9 to label18 with label21;
    }
}
